{"ast":null,"code":"import BigNumber from \"bignumber.js\"; // todo: get navigator declared somehow? probably an issue with using nextjs\n// function getLang() {\n//  if (window.navigator.languages != undefined)\n//   return window.navigator.languages[0];\n//  else\n//   return window.navigator.language;\n// }\n\nexport function formatCurrency(amount, decimals = 2) {\n  if (!isNaN(amount)) {\n    if (BigNumber(amount).gt(0) && BigNumber(amount).lt(0.01)) {\n      return '< 0.01';\n    }\n\n    const formatter = new Intl.NumberFormat(undefined, {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    });\n    return formatter.format(amount);\n  } else {\n    return 0;\n  }\n}\nexport function formatAddress(address, length = \"short\") {\n  if (address && length === \"short\") {\n    address = address.substring(0, 6) + \"...\" + address.substring(address.length - 4, address.length);\n    return address;\n  } else if (address && length === \"long\") {\n    address = address.substring(0, 12) + \"...\" + address.substring(address.length - 8, address.length);\n    return address;\n  } else {\n    return null;\n  }\n}\nexport function bnDec(decimals) {\n  return new BigNumber(10).pow(parseInt(decimals));\n}\nexport function sqrt(value) {\n  if (value < 0n) {\n    throw new Error('square root of negative numbers is not supported');\n  }\n\n  if (value < 2n) {\n    return value;\n  }\n\n  function newtonIteration(n, x0) {\n    // eslint-disable-next-line no-bitwise\n    const x1 = n / x0 + x0 >> 1n;\n\n    if (x0 === x1 || x0 === x1 - 1n) {\n      return x0;\n    }\n\n    return newtonIteration(n, x1);\n  }\n\n  return newtonIteration(value, 1n);\n}\nexport function multiplyBnToFixed(...args) {\n  if (args.length < 3) throw new Error('multiplyBnToFixed needs at least 3 arguments: first bn, second bn to multiply with first, and number of decimals.');\n  const decimals = args[args.length - 1];\n  const bigNumbers = args.slice(0, -1);\n  return bnToFixed(multiplyArray(bigNumbers), decimals * bigNumbers.length, decimals);\n}\n;\nexport function sumArray(numbers) {\n  return numbers.reduce((total, n) => total + Number(n), 0);\n}\nexport function bnToFixed(bn, decimals, displayDecimals = decimals) {\n  const bnDecimals = new BigNumber(10).pow(decimals);\n  return new BigNumber(bn).dividedBy(bnDecimals).toFixed(displayDecimals, BigNumber.ROUND_DOWN);\n}\n;\nexport function floatToFixed(float, decimals = 0) {\n  return new BigNumber(float).toFixed(decimals, BigNumber.ROUND_DOWN);\n}\nexport function multiplyArray(numbers) {\n  return numbers.reduce((total, n) => total * n, 1);\n}","map":{"version":3,"sources":["/Users/pierremarieriviere/Code/solidly-master/utils/utils.js"],"names":["BigNumber","formatCurrency","amount","decimals","isNaN","gt","lt","formatter","Intl","NumberFormat","undefined","minimumFractionDigits","maximumFractionDigits","format","formatAddress","address","length","substring","bnDec","pow","parseInt","sqrt","value","Error","newtonIteration","n","x0","x1","multiplyBnToFixed","args","bigNumbers","slice","bnToFixed","multiplyArray","sumArray","numbers","reduce","total","Number","bn","displayDecimals","bnDecimals","dividedBy","toFixed","ROUND_DOWN","floatToFixed","float"],"mappings":"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","sourcesContent":["import BigNumber from \"bignumber.js\";\n\n// todo: get navigator declared somehow? probably an issue with using nextjs\n// function getLang() {\n//  if (window.navigator.languages != undefined)\n//   return window.navigator.languages[0];\n//  else\n//   return window.navigator.language;\n// }\n\nexport function formatCurrency(amount, decimals = 2) {\n  if (!isNaN(amount)) {\n\n    if(BigNumber(amount).gt(0) && BigNumber(amount).lt(0.01)) {\n      return '< 0.01'\n    }\n\n    const formatter = new Intl.NumberFormat(undefined, {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    });\n\n    return formatter.format(amount);\n  } else {\n    return 0;\n  }\n}\n\nexport function formatAddress(address, length = \"short\") {\n  if (address && length === \"short\") {\n    address =\n      address.substring(0, 6) +\n      \"...\" +\n      address.substring(address.length - 4, address.length);\n    return address;\n  } else if (address && length === \"long\") {\n    address =\n      address.substring(0, 12) +\n      \"...\" +\n      address.substring(address.length - 8, address.length);\n    return address;\n  } else {\n    return null;\n  }\n}\n\nexport function bnDec(decimals) {\n  return new BigNumber(10).pow(parseInt(decimals));\n}\n\nexport function sqrt(value) {\n  if (value < 0n) {\n    throw new Error('square root of negative numbers is not supported')\n  }\n\n  if (value < 2n) {\n    return value\n  }\n\n  function newtonIteration(n, x0) {\n    // eslint-disable-next-line no-bitwise\n    const x1 = (n / x0 + x0) >> 1n\n    if (x0 === x1 || x0 === x1 - 1n) {\n      return x0\n    }\n    return newtonIteration(n, x1)\n  }\n\n  return newtonIteration(value, 1n)\n}\n\nexport function multiplyBnToFixed(...args) {\n  if (args.length < 3) throw new Error('multiplyBnToFixed needs at least 3 arguments: first bn, second bn to multiply with first, and number of decimals.')\n\n  const decimals = args[args.length - 1]\n  const bigNumbers = args.slice(0, -1)\n\n  return bnToFixed(multiplyArray(bigNumbers), decimals * bigNumbers.length, decimals)\n};\n\nexport function sumArray (numbers) {\n  return numbers.reduce((total, n) => total + Number(n), 0)\n}\n\nexport function bnToFixed (bn, decimals, displayDecimals = decimals) {\n  const bnDecimals = new BigNumber(10).pow(decimals)\n\n  return new BigNumber(bn)\n    .dividedBy(bnDecimals)\n    .toFixed(displayDecimals, BigNumber.ROUND_DOWN)\n};\n\nexport function floatToFixed (float, decimals = 0) {\n  return new BigNumber(float).toFixed(decimals, BigNumber.ROUND_DOWN)\n}\n\nexport function multiplyArray (numbers) {\n  return numbers.reduce((total, n) => total * n, 1)\n}\n"]},"metadata":{},"sourceType":"module"}