{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport async from \"promise-async\";\nimport { MAX_UINT256, ZERO_ADDRESS, ACTIONS, CONTRACTS } from \"./constants\";\nimport { v4 as uuidv4 } from 'uuid';\nimport * as moment from \"moment\";\nimport { formatCurrency } from '../utils';\nimport stores from \"./\";\nimport BigNumber from \"bignumber.js\";\n\nconst fetch = require(\"node-fetch\");\n\nclass Store {\n  constructor(dispatcher, emitter) {\n    _defineProperty(this, \"getStore\", index => {\n      return this.store[index];\n    });\n\n    _defineProperty(this, \"setStore\", obj => {\n      this.store = _objectSpread(_objectSpread({}, this.store), obj);\n      console.log(this.store);\n      return this.emitter.emit(ACTIONS.STORE_UPDATED);\n    });\n\n    _defineProperty(this, \"getAsset\", address => {\n      const assets = this.store.assets;\n\n      if (!assets || assets.length === 0) {\n        return null;\n      }\n\n      let theAsset = assets.filter(ass => {\n        if (!ass) {\n          return false;\n        }\n\n        return ass.address.toLowerCase() === address.toLowerCase();\n      });\n\n      if (!theAsset || theAsset.length === 0) {\n        return null;\n      }\n\n      return theAsset[0];\n    });\n\n    _defineProperty(this, \"getNFTByID\", async id => {\n      try {\n        const vestNFTs = this.getStore('vestNFTs');\n        let theNFT = vestNFTs.filter(vestNFT => {\n          return vestNFT.id == id;\n        });\n\n        if (theNFT.length > 0) {\n          return theNFT[0];\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const veToken = this.getStore('veToken');\n        const govToken = this.getStore('govToken');\n        const vestingContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS);\n        const nftsLength = await vestingContract.methods.balanceOf(account.address).call();\n        const arr = Array.from({\n          length: parseInt(nftsLength)\n        }, (v, i) => i);\n        const nfts = await Promise.all(arr.map(async idx => {\n          const tokenIndex = await vestingContract.methods.tokenOfOwnerByIndex(account.address, idx).call();\n          const locked = await vestingContract.methods.locked(tokenIndex).call();\n          const lockValue = await vestingContract.methods.balanceOfNFT(tokenIndex).call(); // probably do some decimals math before returning info. Maybe get more info. I don't know what it returns.\n\n          return {\n            id: tokenIndex,\n            lockEnds: locked.end,\n            lockAmount: BigNumber(locked.amount).div(10 ** govToken.decimals).toFixed(govToken.decimals),\n            lockValue: BigNumber(lockValue).div(10 ** veToken.decimals).toFixed(veToken.decimals)\n          };\n        }));\n        this.setStore({\n          vestNFTs: nfts\n        });\n        theNFT = nfts.filter(nft => {\n          return nft.id == id;\n        });\n\n        if (theNFT.length > 0) {\n          return theNFT[0];\n        }\n\n        return null;\n      } catch (ex) {\n        console.log(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_updateVestNFTByID\", async id => {\n      try {\n        const vestNFTs = this.getStore('vestNFTs');\n        let theNFT = vestNFTs.filter(vestNFT => {\n          return vestNFT.id == id;\n        });\n\n        if (theNFT.length == 0) {\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const veToken = this.getStore('veToken');\n        const govToken = this.getStore('govToken');\n        const vestingContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS);\n        const locked = await vestingContract.methods.locked(id).call();\n        const lockValue = await vestingContract.methods.balanceOfNFT(id).call();\n        const newVestNFTs = vestNFTs.map(nft => {\n          if (nft.id == id) {\n            return {\n              id: id,\n              lockEnds: locked.end,\n              lockAmount: BigNumber(locked.amount).div(10 ** govToken.decimals).toFixed(govToken.decimals),\n              lockValue: BigNumber(lockValue).div(10 ** veToken.decimals).toFixed(veToken.decimals)\n            };\n          }\n\n          return nft;\n        });\n        this.setStore({\n          vestNFTs: newVestNFTs\n        });\n        this.emitter.emit(ACTIONS.UPDATED);\n        return null;\n      } catch (ex) {\n        console.log(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"getPairByAddress\", async pairAddress => {\n      try {\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const pairs = this.getStore('pairs');\n        let thePair = pairs.filter(pair => {\n          return pair.address.toLowerCase() == pairAddress.toLowerCase();\n        });\n\n        if (thePair.length > 0) {\n          const pc = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pairAddress);\n          const [totalSupply, reserve0, reserve1, balanceOf] = await Promise.all([pc.methods.totalSupply().call(), pc.methods.reserve0().call(), pc.methods.reserve1().call(), pc.methods.balanceOf(account.address).call()]);\n          const returnPair = thePair[0];\n          returnPair.balance = BigNumber(balanceOf).div(10 ** returnPair.decimals).toFixed(parseInt(returnPair.decimals));\n          returnPair.totalSupply = BigNumber(totalSupply).div(10 ** returnPair.decimals).toFixed(parseInt(returnPair.decimals));\n          returnPair.reserve0 = BigNumber(reserve0).div(10 ** returnPair.token0.decimals).toFixed(parseInt(returnPair.token0.decimals));\n          returnPair.reserve1 = BigNumber(reserve1).div(10 ** returnPair.token1.decimals).toFixed(parseInt(returnPair.token1.decimals));\n          return returnPair;\n        }\n\n        const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pairAddress);\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n        const [totalWeight] = await Promise.all([gaugesContract.methods.totalWeight().call()]);\n        const [token0, token1, totalSupply, symbol, reserve0, reserve1, decimals, balanceOf, stable, gaugeAddress, gaugeWeight, claimable0, claimable1] = await Promise.all([pairContract.methods.token0().call(), pairContract.methods.token1().call(), pairContract.methods.totalSupply().call(), pairContract.methods.symbol().call(), pairContract.methods.reserve0().call(), pairContract.methods.reserve1().call(), pairContract.methods.decimals().call(), pairContract.methods.balanceOf(account.address).call(), pairContract.methods.stable().call(), gaugesContract.methods.gauges(pairAddress).call(), gaugesContract.methods.weights(pairAddress).call(), pairContract.methods.claimable0(account.address).call(), pairContract.methods.claimable1(account.address).call()]);\n        const token0Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0);\n        const token1Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1);\n        const [token0Symbol, token0Decimals, token0Balance, token1Symbol, token1Decimals, token1Balance] = await Promise.all([token0Contract.methods.symbol().call(), token0Contract.methods.decimals().call(), token0Contract.methods.balanceOf(account.address).call(), token1Contract.methods.symbol().call(), token1Contract.methods.decimals().call(), token1Contract.methods.balanceOf(account.address).call()]);\n        thePair = {\n          address: pairAddress,\n          symbol: symbol,\n          decimals: parseInt(decimals),\n          isStable: stable,\n          token0: {\n            address: token0,\n            symbol: token0Symbol,\n            balance: BigNumber(token0Balance).div(10 ** token0Decimals).toFixed(parseInt(token0Decimals)),\n            decimals: parseInt(token0Decimals)\n          },\n          token1: {\n            address: token1,\n            symbol: token1Symbol,\n            balance: BigNumber(token1Balance).div(10 ** token1Decimals).toFixed(parseInt(token1Decimals)),\n            decimals: parseInt(token1Decimals)\n          },\n          balance: BigNumber(balanceOf).div(10 ** decimals).toFixed(parseInt(decimals)),\n          totalSupply: BigNumber(totalSupply).div(10 ** decimals).toFixed(parseInt(decimals)),\n          reserve0: BigNumber(reserve0).div(10 ** token0Decimals).toFixed(parseInt(token0Decimals)),\n          reserve1: BigNumber(reserve1).div(10 ** token1Decimals).toFixed(parseInt(token1Decimals)),\n          claimable0: BigNumber(claimable0).div(10 ** token0Decimals).toFixed(parseInt(token0Decimals)),\n          claimable1: BigNumber(claimable1).div(10 ** token1Decimals).toFixed(parseInt(token1Decimals))\n        };\n\n        if (gaugeAddress !== ZERO_ADDRESS) {\n          const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, gaugeAddress);\n          const [totalSupply, gaugeBalance, bribeAddress] = await Promise.all([gaugeContract.methods.totalSupply().call(), gaugeContract.methods.balanceOf(account.address).call(), gaugesContract.methods.bribes(gaugeAddress).call()]);\n          const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, bribeAddress);\n          const tokensLength = await bribeContract.methods.rewardsListLength().call();\n          const arry = Array.from({\n            length: parseInt(tokensLength)\n          }, (v, i) => i);\n          const bribes = await Promise.all(arry.map(async idx => {\n            const tokenAddress = await bribeContract.methods.rewards(idx).call();\n            const token = await this.getBaseAsset(tokenAddress);\n            const [rewardRate] = await Promise.all([bribeContract.methods.rewardRate(tokenAddress).call()]);\n            return {\n              token: token,\n              rewardRate: BigNumber(rewardRate).div(10 ** token.decimals).toFixed(token.decimals),\n              rewardAmount: BigNumber(rewardRate).times(604800).div(10 ** token.decimals).toFixed(token.decimals)\n            };\n          }));\n          thePair.gauge = {\n            address: gaugeAddress,\n            bribeAddress: bribeAddress,\n            decimals: 18,\n            balance: BigNumber(gaugeBalance).div(10 ** 18).toFixed(18),\n            totalSupply: BigNumber(totalSupply).div(10 ** 18).toFixed(18),\n            weight: BigNumber(gaugeWeight).div(10 ** 18).toFixed(18),\n            weightPercent: BigNumber(gaugeWeight).times(100).div(totalWeight).toFixed(2),\n            bribes: bribes\n          };\n        }\n\n        pairs.push(thePair);\n        this.setStore({\n          pairs: pairs\n        });\n        return thePair;\n      } catch (ex) {\n        console.log(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"getPair\", async (addressA, addressB, stab) => {\n      if (addressA === 'FTM') {\n        addressA = CONTRACTS.WFTM_ADDRESS;\n      }\n\n      if (addressB === 'FTM') {\n        addressB = CONTRACTS.WFTM_ADDRESS;\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider();\n\n      if (!web3) {\n        console.warn('web3 not found');\n        return null;\n      }\n\n      const account = stores.accountStore.getStore(\"account\");\n\n      if (!account) {\n        console.warn('account not found');\n        return null;\n      }\n\n      const pairs = this.getStore('pairs');\n      let thePair = pairs.filter(pair => {\n        return pair.token0.address.toLowerCase() == addressA.toLowerCase() && pair.token1.address.toLowerCase() == addressB.toLowerCase() && pair.isStable == stab || pair.token0.address.toLowerCase() == addressB.toLowerCase() && pair.token1.address.toLowerCase() == addressA.toLowerCase() && pair.isStable == stab;\n      });\n\n      if (thePair.length > 0) {\n        const pc = new web3.eth.Contract(CONTRACTS.PAIR_ABI, thePair[0].address);\n        const [totalSupply, reserve0, reserve1, balanceOf] = await Promise.all([pc.methods.totalSupply().call(), pc.methods.reserve0().call(), pc.methods.reserve1().call(), pc.methods.balanceOf(account.address).call()]);\n        const returnPair = thePair[0];\n        returnPair.balance = BigNumber(balanceOf).div(10 ** returnPair.decimals).toFixed(parseInt(returnPair.decimals));\n        returnPair.totalSupply = BigNumber(totalSupply).div(10 ** returnPair.decimals).toFixed(parseInt(returnPair.decimals));\n        returnPair.reserve0 = BigNumber(reserve0).div(10 ** returnPair.token0.decimals).toFixed(parseInt(returnPair.token0.decimals));\n        returnPair.reserve1 = BigNumber(reserve1).div(10 ** returnPair.token1.decimals).toFixed(parseInt(returnPair.token1.decimals));\n        return returnPair;\n      }\n\n      const factoryContract = new web3.eth.Contract(CONTRACTS.FACTORY_ABI, CONTRACTS.FACTORY_ADDRESS);\n      const pairAddress = await factoryContract.methods.getPair(addressA, addressB, stab).call();\n\n      if (pairAddress && pairAddress != ZERO_ADDRESS) {\n        const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pairAddress);\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n        const [totalWeight] = await Promise.all([gaugesContract.methods.totalWeight().call()]);\n        const [token0, token1, totalSupply, symbol, reserve0, reserve1, decimals, balanceOf, stable, gaugeAddress, gaugeWeight, claimable0, claimable1] = await Promise.all([pairContract.methods.token0().call(), pairContract.methods.token1().call(), pairContract.methods.totalSupply().call(), pairContract.methods.symbol().call(), pairContract.methods.reserve0().call(), pairContract.methods.reserve1().call(), pairContract.methods.decimals().call(), pairContract.methods.balanceOf(account.address).call(), pairContract.methods.stable().call(), gaugesContract.methods.gauges(pairAddress).call(), gaugesContract.methods.weights(pairAddress).call(), pairContract.methods.claimable0(account.address).call(), pairContract.methods.claimable1(account.address).call()]);\n        const token0Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0);\n        const token1Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1);\n        const [token0Symbol, token0Decimals, token0Balance, token1Symbol, token1Decimals, token1Balance] = await Promise.all([token0Contract.methods.symbol().call(), token0Contract.methods.decimals().call(), token0Contract.methods.balanceOf(account.address).call(), token1Contract.methods.symbol().call(), token1Contract.methods.decimals().call(), token1Contract.methods.balanceOf(account.address).call()]);\n        thePair = {\n          address: pairAddress,\n          symbol: symbol,\n          decimals: parseInt(decimals),\n          isStable: stable,\n          token0: {\n            address: token0,\n            symbol: token0Symbol,\n            balance: BigNumber(token0Balance).div(10 ** token0Decimals).toFixed(parseInt(token0Decimals)),\n            decimals: parseInt(token0Decimals)\n          },\n          token1: {\n            address: token1,\n            symbol: token1Symbol,\n            balance: BigNumber(token1Balance).div(10 ** token1Decimals).toFixed(parseInt(token1Decimals)),\n            decimals: parseInt(token1Decimals)\n          },\n          balance: BigNumber(balanceOf).div(10 ** decimals).toFixed(parseInt(decimals)),\n          totalSupply: BigNumber(totalSupply).div(10 ** decimals).toFixed(parseInt(decimals)),\n          reserve0: BigNumber(reserve0).div(10 ** token0Decimals).toFixed(parseInt(token0Decimals)),\n          reserve1: BigNumber(reserve1).div(10 ** token1Decimals).toFixed(parseInt(token1Decimals)),\n          claimable0: BigNumber(claimable0).div(10 ** token0Decimals).toFixed(parseInt(token0Decimals)),\n          claimable1: BigNumber(claimable1).div(10 ** token1Decimals).toFixed(parseInt(token1Decimals))\n        };\n\n        if (gaugeAddress !== ZERO_ADDRESS) {\n          const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, gaugeAddress);\n          const [totalSupply, gaugeBalance, bribeAddress] = await Promise.all([gaugeContract.methods.totalSupply().call(), gaugeContract.methods.balanceOf(account.address).call(), gaugesContract.methods.bribes(gaugeAddress).call()]);\n          const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, bribeAddress);\n          const tokensLength = await bribeContract.methods.rewardsListLength().call();\n          const arry = Array.from({\n            length: parseInt(tokensLength)\n          }, (v, i) => i);\n          const bribes = await Promise.all(arry.map(async idx => {\n            const tokenAddress = await bribeContract.methods.rewards(idx).call();\n            const token = await this.getBaseAsset(tokenAddress);\n            const [rewardRate] = await Promise.all([bribeContract.methods.rewardRate(tokenAddress).call()]);\n            return {\n              token: token,\n              rewardRate: BigNumber(rewardRate).div(10 ** token.decimals).toFixed(token.decimals),\n              rewardAmount: BigNumber(rewardRate).times(604800).div(10 ** token.decimals).toFixed(token.decimals)\n            };\n          }));\n          thePair.gauge = {\n            address: gaugeAddress,\n            bribeAddress: bribeAddress,\n            decimals: 18,\n            balance: BigNumber(gaugeBalance).div(10 ** 18).toFixed(18),\n            totalSupply: BigNumber(totalSupply).div(10 ** 18).toFixed(18),\n            weight: BigNumber(gaugeWeight).div(10 ** 18).toFixed(18),\n            weightPercent: BigNumber(gaugeWeight).times(100).div(totalWeight).toFixed(2),\n            bribes: bribes\n          };\n        }\n\n        pairs.push(thePair);\n        this.setStore({\n          pairs: pairs\n        });\n        return thePair;\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"removeBaseAsset\", asset => {\n      try {\n        let localBaseAssets = [];\n        const localBaseAssetsString = localStorage.getItem('stableSwap-assets');\n\n        if (localBaseAssetsString && localBaseAssetsString !== '') {\n          localBaseAssets = JSON.parse(localBaseAssetsString);\n          localBaseAssets = localBaseAssets.filter(function (obj) {\n            return obj.address.toLowerCase() !== asset.address.toLowerCase();\n          });\n          localStorage.setItem('stableSwap-assets', JSON.stringify(localBaseAssets));\n          let baseAssets = this.getStore('baseAssets');\n          baseAssets = baseAssets.filter(function (obj) {\n            return obj.address.toLowerCase() !== asset.address.toLowerCase() && asset.local === true;\n          });\n          this.setStore({\n            baseAssets: baseAssets\n          });\n          this.emitter.emit(ACTIONS.BASE_ASSETS_UPDATED, baseAssets);\n        }\n      } catch (ex) {\n        console.log(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"getLocalAssets\", () => {\n      try {\n        let localBaseAssets = [];\n        const localBaseAssetsString = localStorage.getItem('stableSwap-assets');\n\n        if (localBaseAssetsString && localBaseAssetsString !== '') {\n          localBaseAssets = JSON.parse(localBaseAssetsString);\n        }\n\n        return localBaseAssets;\n      } catch (ex) {\n        console.log(ex);\n        return [];\n      }\n    });\n\n    _defineProperty(this, \"getBaseAsset\", async (address, save, getBalance) => {\n      try {\n        const baseAssets = this.getStore('baseAssets');\n        const theBaseAsset = baseAssets.filter(as => {\n          return as.address.toLowerCase() === address.toLowerCase();\n        });\n\n        if (theBaseAsset.length > 0) {\n          return theBaseAsset[0];\n        } // not found, so we search the blockchain for it.\n\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const baseAssetContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, address);\n        const [symbol, decimals, name] = await Promise.all([baseAssetContract.methods.symbol().call(), baseAssetContract.methods.decimals().call(), baseAssetContract.methods.name().call()]);\n        const newBaseAsset = {\n          address: address,\n          symbol: symbol,\n          name: name,\n          decimals: parseInt(decimals),\n          logoURI: null,\n          local: true\n        };\n\n        if (getBalance) {\n          const account = stores.accountStore.getStore(\"account\");\n\n          if (account) {\n            const balanceOf = await baseAssetContract.methods.balanceOf(account.address).call();\n            newBaseAsset.balance = BigNumber(balanceOf).div(10 ** newBaseAsset.decimals).toFixed(newBaseAsset.decimals);\n          }\n        } // GET BACK HERE\n        //only save when a user adds it. don't for when we lookup a pair and find he asset.\n\n\n        if (save) {\n          let localBaseAssets = this.getLocalAssets();\n          localBaseAssets = [...localBaseAssets, newBaseAsset];\n          localStorage.setItem('stableSwap-assets', JSON.stringify(localBaseAssets));\n          const baseAssets = this.getStore('baseAssets');\n          const storeBaseAssets = [...baseAssets, newBaseAsset];\n          this.setStore({\n            baseAssets: storeBaseAssets\n          });\n          this.emitter.emit(ACTIONS.BASE_ASSETS_UPDATED, storeBaseAssets);\n        }\n\n        return newBaseAsset;\n      } catch (ex) {\n        console.log(ex); // this.emitter.emit(ACTIONS.ERROR, ex)\n\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"configure\", async payload => {\n      try {\n        this.setStore({\n          govToken: this._getGovTokenBase()\n        });\n        this.setStore({\n          veToken: this._getVeTokenBase()\n        });\n        this.setStore({\n          baseAssets: await this._getBaseAssets()\n        });\n        this.setStore({\n          routeAssets: await this._getRouteAssets()\n        });\n        this.setStore({\n          pairs: await this._getPairs()\n        });\n        this.emitter.emit(ACTIONS.UPDATED);\n        this.emitter.emit(ACTIONS.CONFIGURED_SS);\n        setTimeout(() => {\n          this.dispatcher.dispatch({\n            type: ACTIONS.GET_BALANCES\n          });\n        }, 1);\n      } catch (ex) {\n        console.log(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"_getBaseAssets\", async () => {\n      try {\n        const response = await fetch(`${process.env.NEXT_PUBLIC_API}//v1/baseAssets`, {\n          method: 'get',\n          headers: {\n            'Authorization': `Basic ${process.env.NEXT_PUBLIC_API_TOKEN}`\n          }\n        });\n        const baseAssetsCall = await response.json();\n        let baseAssets = baseAssetsCall.data;\n        const nativeFTM = {\n          address: CONTRACTS.FTM_ADDRESS,\n          decimals: CONTRACTS.FTM_DECIMALS,\n          logoURI: CONTRACTS.FTM_LOGO,\n          name: CONTRACTS.FTM_NAME,\n          symbol: CONTRACTS.FTM_SYMBOL\n        };\n        baseAssets.unshift(nativeFTM);\n        let localBaseAssets = this.getLocalAssets();\n        return [...baseAssets, ...localBaseAssets];\n      } catch (ex) {\n        console.log(ex);\n        return [];\n      }\n    });\n\n    _defineProperty(this, \"_getRouteAssets\", async () => {\n      try {\n        const response = await fetch(`${process.env.NEXT_PUBLIC_API}/api/v1/routeAssets`, {\n          method: 'get',\n          headers: {\n            'Authorization': `Basic ${process.env.NEXT_PUBLIC_API_TOKEN}`\n          }\n        });\n        const routeAssetsCall = await response.json();\n        return routeAssetsCall.data;\n      } catch (ex) {\n        console.log(ex);\n        return [];\n      }\n    });\n\n    _defineProperty(this, \"_getPairs\", async () => {\n      try {\n        const response = await fetch(`${process.env.NEXT_PUBLIC_API}/api/v1/pairs`, {\n          method: 'get',\n          headers: {\n            'Authorization': `Basic ${process.env.NEXT_PUBLIC_API_TOKEN}`\n          }\n        });\n        const pairsCall = await response.json();\n        return pairsCall.data;\n      } catch (ex) {\n        console.log(ex);\n        return [];\n      }\n    });\n\n    _defineProperty(this, \"_getGovTokenBase\", () => {\n      return {\n        address: CONTRACTS.GOV_TOKEN_ADDRESS,\n        name: CONTRACTS.GOV_TOKEN_NAME,\n        symbol: CONTRACTS.GOV_TOKEN_SYMBOL,\n        decimals: CONTRACTS.GOV_TOKEN_DECIMALS,\n        logoURI: CONTRACTS.GOV_TOKEN_LOGO\n      };\n    });\n\n    _defineProperty(this, \"_getVeTokenBase\", () => {\n      return {\n        address: CONTRACTS.VE_TOKEN_ADDRESS,\n        name: CONTRACTS.VE_TOKEN_NAME,\n        symbol: CONTRACTS.VE_TOKEN_SYMBOL,\n        decimals: CONTRACTS.VE_TOKEN_DECIMALS,\n        logoURI: CONTRACTS.VE_TOKEN_LOGO\n      };\n    });\n\n    _defineProperty(this, \"getBalances\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        this._getGovTokenInfo(web3, account);\n\n        await this._getBaseAssetInfo(web3, account);\n        await this._getPairInfo(web3, account);\n      } catch (ex) {\n        console.log(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"_getVestNFTs\", async (web3, account) => {\n      try {\n        const veToken = this.getStore('veToken');\n        const govToken = this.getStore('govToken');\n        const vestingContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS);\n        const nftsLength = await vestingContract.methods.balanceOf(account.address).call();\n        const arr = Array.from({\n          length: parseInt(nftsLength)\n        }, (v, i) => i);\n        const nfts = await Promise.all(arr.map(async idx => {\n          const tokenIndex = await vestingContract.methods.tokenOfOwnerByIndex(account.address, idx).call();\n          const locked = await vestingContract.methods.locked(tokenIndex).call();\n          const lockValue = await vestingContract.methods.balanceOfNFT(tokenIndex).call(); // probably do some decimals math before returning info. Maybe get more info. I don't know what it returns.\n\n          return {\n            id: tokenIndex,\n            lockEnds: locked.end,\n            lockAmount: BigNumber(locked.amount).div(10 ** govToken.decimals).toFixed(govToken.decimals),\n            lockValue: BigNumber(lockValue).div(10 ** veToken.decimals).toFixed(veToken.decimals)\n          };\n        }));\n        this.setStore({\n          vestNFTs: nfts\n        });\n        this.emitter.emit(ACTIONS.UPDATED);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"_getGovTokenInfo\", async (web3, account) => {\n      try {\n        const govToken = this.getStore('govToken');\n\n        if (!govToken) {\n          console.warn('govToken not found');\n          return null;\n        }\n\n        const veTokenContract = new web3.eth.Contract(CONTRACTS.GOV_TOKEN_ABI, CONTRACTS.GOV_TOKEN_ADDRESS);\n        const [balanceOf] = await Promise.all([veTokenContract.methods.balanceOf(account.address).call()]);\n        govToken.balanceOf = balanceOf;\n        govToken.balance = BigNumber(balanceOf).div(10 ** govToken.decimals).toFixed(govToken.decimals);\n        this.setStore({\n          govToken\n        });\n        this.emitter.emit(ACTIONS.UPDATED);\n\n        this._getVestNFTs(web3, account);\n      } catch (ex) {\n        console.log(ex);\n      }\n    });\n\n    _defineProperty(this, \"_getPairInfo\", async (web3, account, overridePairs) => {\n      try {\n        const multicall = await stores.accountStore.getMulticall();\n        let pairs = [];\n\n        if (overridePairs) {\n          pairs = overridePairs;\n        } else {\n          pairs = this.getStore('pairs');\n        }\n\n        const factoryContract = new web3.eth.Contract(CONTRACTS.FACTORY_ABI, CONTRACTS.FACTORY_ADDRESS);\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n        const [allPairsLength, totalWeight] = await Promise.all([factoryContract.methods.allPairsLength().call(), gaugesContract.methods.totalWeight().call()]);\n        const ps = await Promise.all(pairs.map(async pair => {\n          try {\n            const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address);\n            const token0Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.token0.address);\n            const token1Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.token1.address);\n            const token0 = await this.getBaseAsset(pair.token0.address, false, true);\n            const token1 = await this.getBaseAsset(pair.token1.address, false, true);\n            const [totalSupply, reserves, balanceOf, claimable0, claimable1] = await multicall.aggregate([pairContract.methods.totalSupply(), pairContract.methods.getReserves(), pairContract.methods.balanceOf(account.address), pairContract.methods.claimable0(account.address), pairContract.methods.claimable1(account.address)]);\n            pair.token0 = token0 != null ? token0 : pair.token0;\n            pair.token1 = token1 != null ? token1 : pair.token1;\n            pair.balance = BigNumber(balanceOf).div(10 ** pair.decimals).toFixed(parseInt(pair.decimals));\n            pair.totalSupply = BigNumber(totalSupply).div(10 ** pair.decimals).toFixed(parseInt(pair.decimals));\n            pair.reserve0 = BigNumber(reserves[0]).div(10 ** pair.token0.decimals).toFixed(parseInt(pair.token0.decimals));\n            pair.reserve1 = BigNumber(reserves[1]).div(10 ** pair.token1.decimals).toFixed(parseInt(pair.token1.decimals));\n            pair.claimable0 = BigNumber(claimable0).div(10 ** pair.token0.decimals).toFixed(pair.token0.decimals);\n            pair.claimable1 = BigNumber(claimable1).div(10 ** pair.token1.decimals).toFixed(pair.token1.decimals);\n            return pair;\n          } catch (ex) {\n            console.log('EXCEPTION 1');\n            console.log(pair);\n            console.log(ex);\n            return pair;\n          }\n        }));\n        this.setStore({\n          pairs: ps\n        });\n        this.emitter.emit(ACTIONS.UPDATED);\n        const ps1 = await Promise.all(ps.map(async pair => {\n          try {\n            if (pair.gauge && pair.gauge.address !== ZERO_ADDRESS) {\n              const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address);\n              const [totalSupply, gaugeBalance, gaugeWeight] = await multicall.aggregate([gaugeContract.methods.totalSupply(), gaugeContract.methods.balanceOf(account.address), gaugesContract.methods.weights(pair.address)]);\n              const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, pair.gauge.bribeAddress);\n              const bribes = await Promise.all(pair.gauge.bribes.map(async (bribe, idx) => {\n                const [rewardRate] = await Promise.all([bribeContract.methods.rewardRate(bribe.token.address).call()]);\n                bribe.rewardRate = BigNumber(rewardRate).div(10 ** bribe.token.decimals).toFixed(bribe.token.decimals);\n                bribe.rewardAmount = BigNumber(rewardRate).times(604800).div(10 ** bribe.token.decimals).toFixed(bribe.token.decimals);\n                return bribe;\n              }));\n              pair.gauge.balance = BigNumber(gaugeBalance).div(10 ** 18).toFixed(18);\n              pair.gauge.totalSupply = BigNumber(totalSupply).div(10 ** 18).toFixed(18);\n              pair.gauge.reserve0 = pair.totalSupply > 0 ? BigNumber(pair.reserve0).times(pair.gauge.totalSupply).div(pair.totalSupply).toFixed(pair.token0.decimals) : '0';\n              pair.gauge.reserve1 = pair.totalSupply > 0 ? BigNumber(pair.reserve1).times(pair.gauge.totalSupply).div(pair.totalSupply).toFixed(pair.token1.decimals) : '0';\n              pair.gauge.weight = BigNumber(gaugeWeight).div(10 ** 18).toFixed(18);\n              pair.gauge.weightPercent = BigNumber(gaugeWeight).times(100).div(totalWeight).toFixed(2);\n              pair.gaugebribes = bribes;\n            }\n\n            return pair;\n          } catch (ex) {\n            console.log('EXCEPTION 2');\n            console.log(pair);\n            console.log(ex);\n            return pair;\n          }\n        }));\n        this.setStore({\n          pairs: ps1\n        });\n        this.emitter.emit(ACTIONS.UPDATED);\n      } catch (ex) {\n        console.log(ex);\n      }\n    });\n\n    _defineProperty(this, \"_getBaseAssetInfo\", async (web3, account) => {\n      try {\n        const baseAssets = this.getStore(\"baseAssets\");\n\n        if (!baseAssets) {\n          console.warn('baseAssets not found');\n          return null;\n        }\n\n        const voterContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n        const baseAssetsBalances = await Promise.all(baseAssets.map(async asset => {\n          try {\n            if (asset.address === 'FTM') {\n              let bal = await web3.eth.getBalance(account.address);\n              return {\n                balanceOf: bal,\n                isWhitelisted: true\n              };\n            }\n\n            const assetContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, asset.address);\n            const [isWhitelisted, balanceOf] = await Promise.all([voterContract.methods.isWhitelisted(asset.address).call(), assetContract.methods.balanceOf(account.address).call()]);\n            return {\n              balanceOf,\n              isWhitelisted\n            };\n          } catch (ex) {\n            console.log(\"EXCEPTION 3\");\n            console.log(asset);\n            console.log(ex);\n            return {\n              balanceOf: '0',\n              isWhitelisted: false\n            };\n          }\n        }));\n\n        for (let i = 0; i < baseAssets.length; i++) {\n          baseAssets[i].balance = BigNumber(baseAssetsBalances[i].balanceOf).div(10 ** baseAssets[i].decimals).toFixed(baseAssets[i].decimals);\n          baseAssets[i].isWhitelisted = baseAssetsBalances[i].isWhitelisted;\n        }\n\n        this.setStore({\n          baseAssets\n        });\n        this.emitter.emit(ACTIONS.UPDATED);\n      } catch (ex) {\n        console.log(ex);\n      }\n    });\n\n    _defineProperty(this, \"searchBaseAsset\", async payload => {\n      try {\n        let localBaseAssets = [];\n        const localBaseAssetsString = localStorage.getItem('stableSwap-assets');\n\n        if (localBaseAssetsString && localBaseAssetsString !== '') {\n          localBaseAssets = JSON.parse(localBaseAssetsString);\n        }\n\n        const theBaseAsset = localBaseAssets.filter(as => {\n          return as.address.toLowerCase() === payload.content.address.toLowerCase();\n        });\n\n        if (theBaseAsset.length > 0) {\n          this.emitter.emit(ACTIONS.ASSET_SEARCHED, theBaseAsset);\n          return;\n        }\n\n        const baseAssetContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, payload.content.address);\n        const [symbol, decimals, name] = await Promise.all([baseAssetContract.methods.symbol().call(), baseAssetContract.methods.decimals().call(), baseAssetContract.methods.name().call()]);\n        const newBaseAsset = {\n          address: payload.content.address,\n          symbol: symbol,\n          name: name,\n          decimals: parseInt(decimals)\n        };\n        localBaseAssets = [...localBaseAssets, newBaseAsset];\n        localStorage.setItem('stableSwap-assets', JSON.stringify(localBaseAssets));\n        const baseAssets = this.getStore('baseAssets');\n        const storeBaseAssets = [...baseAssets, ...localBaseAssets];\n        this.setStore({\n          baseAssets: storeBaseAssets\n        });\n        this.emitter.emit(ACTIONS.ASSET_SEARCHED, newBaseAsset);\n      } catch (ex) {\n        console.log(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"createPairStake\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          token0,\n          token1,\n          amount0,\n          amount1,\n          isStable,\n          token,\n          slippage\n        } = payload.content;\n        let toki0 = token0.address;\n        let toki1 = token1.address;\n\n        if (token0.address === 'FTM') {\n          toki0 = CONTRACTS.WFTM_ADDRESS;\n        }\n\n        if (token1.address === 'FTM') {\n          toki1 = CONTRACTS.WFTM_ADDRESS;\n        }\n\n        const factoryContract = new web3.eth.Contract(CONTRACTS.FACTORY_ABI, CONTRACTS.FACTORY_ADDRESS);\n        const pairFor = await factoryContract.methods.getPair(toki0, toki1, isStable).call();\n\n        if (pairFor && pairFor != ZERO_ADDRESS) {\n          await context.updatePairsCall(web3, account);\n          this.emitter.emit(ACTIONS.ERROR, 'Pair already exists');\n          return null;\n        } // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n\n        let allowance0TXID = this.getTXUUID();\n        let allowance1TXID = this.getTXUUID();\n        let depositTXID = this.getTXUUID();\n        let createGaugeTXID = this.getTXUUID();\n        let stakeAllowanceTXID = this.getTXUUID();\n        let stakeTXID = this.getTXUUID(); //DOD A CHECK FOR IF THE POOL ALREADY EXISTS\n\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Create liquidity pool for ${token0.symbol}/${token1.symbol}`,\n          type: 'Liquidity',\n          verb: 'Liquidity Pool Created',\n          transactions: [{\n            uuid: allowance0TXID,\n            description: `Checking your ${token0.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: allowance1TXID,\n            description: `Checking your ${token1.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: depositTXID,\n            description: `Create liquidity pool`,\n            status: 'WAITING'\n          }, {\n            uuid: createGaugeTXID,\n            description: `Create gauge`,\n            status: 'WAITING'\n          }, {\n            uuid: stakeAllowanceTXID,\n            description: `Checking your pool allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: stakeTXID,\n            description: `Stake LP tokens in the gauge`,\n            status: 'WAITING'\n          }]\n        });\n        let allowance0 = 0;\n        let allowance1 = 0; // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        if (token0.address !== 'FTM') {\n          allowance0 = await this._getDepositAllowance(web3, token0, account);\n\n          if (BigNumber(allowance0).lt(amount0)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance0TXID,\n              description: `Allow the router to spend your ${token0.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance0TXID,\n              description: `Allowance on ${token0.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance0 = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allowance on ${token0.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        if (token1.address !== 'FTM') {\n          allowance1 = await this._getDepositAllowance(web3, token1, account);\n\n          if (BigNumber(allowance1).lt(amount1)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance1TXID,\n              description: `Allow the router to spend your ${token1.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance1TXID,\n              description: `Allowance on ${token1.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance1 = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allowance on ${token1.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance0).lt(amount0)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance0TXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        if (BigNumber(allowance1).lt(amount1)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance1TXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT DEPOSIT TRANSACTION\n\n        const sendSlippage = BigNumber(100).minus(slippage).div(100);\n        const sendAmount0 = BigNumber(amount0).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1 = BigNumber(amount1).times(10 ** token1.decimals).toFixed(0);\n        const deadline = '' + moment().add(600, 'seconds').unix();\n        const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10 ** token1.decimals).toFixed(0);\n        let func = 'addLiquidity';\n        let params = [token0.address, token1.address, isStable, sendAmount0, sendAmount1, sendAmount0Min, sendAmount1Min, account.address, deadline];\n        let sendValue = null;\n\n        if (token0.address === 'FTM') {\n          func = 'addLiquidityFTM';\n          params = [token1.address, isStable, sendAmount1, sendAmount1Min, sendAmount0Min, account.address, deadline];\n          sendValue = sendAmount0;\n        }\n\n        if (token1.address === 'FTM') {\n          func = 'addLiquidityFTM';\n          params = [token0.address, isStable, sendAmount0, sendAmount0Min, sendAmount1Min, account.address, deadline];\n          sendValue = sendAmount1;\n        }\n\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n\n        this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, depositTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          } // GET PAIR FOR NEWLY CREATED LIQUIDITY POOL\n\n\n          let tok0 = token0.address;\n          let tok1 = token1.address;\n\n          if (token0.address === 'FTM') {\n            tok0 = CONTRACTS.WFTM_ADDRESS;\n          }\n\n          if (token1.address === 'FTM') {\n            tok1 = CONTRACTS.WFTM_ADDRESS;\n          }\n\n          const pairFor = await factoryContract.methods.getPair(tok0, tok1, isStable).call(); // SUBMIT CREATE GAUGE TRANSACTION\n\n          const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n\n          this._callContractWait(web3, gaugesContract, 'createGauge', [pairFor], account, gasPrice, null, null, createGaugeTXID, async err => {\n            if (err) {\n              return this.emitter.emit(ACTIONS.ERROR, err);\n            }\n\n            const gaugeAddress = await gaugesContract.methods.gauges(pairFor).call();\n            const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pairFor);\n            const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, gaugeAddress);\n            const balanceOf = await pairContract.methods.balanceOf(account.address).call();\n            const pair = await this.getPairByAddress(pairFor);\n            const stakeAllowance = await this._getStakeAllowance(web3, pair, account);\n\n            if (BigNumber(stakeAllowance).lt(BigNumber(balanceOf).div(10 ** pair.decimals).toFixed(pair.decimals))) {\n              this.emitter.emit(ACTIONS.TX_STATUS, {\n                uuid: stakeAllowanceTXID,\n                description: `Allow the router to spend your ${pair.symbol}`\n              });\n            } else {\n              this.emitter.emit(ACTIONS.TX_STATUS, {\n                uuid: stakeAllowanceTXID,\n                description: `Allowance on ${pair.symbol} sufficient`,\n                status: 'DONE'\n              });\n            }\n\n            const allowanceCallsPromise = [];\n\n            if (BigNumber(stakeAllowance).lt(BigNumber(balanceOf).div(10 ** pair.decimals).toFixed(pair.decimals))) {\n              const stakePromise = new Promise((resolve, reject) => {\n                context._callContractWait(web3, pairContract, 'approve', [pair.gauge.address, MAX_UINT256], account, gasPrice, null, null, stakeAllowanceTXID, err => {\n                  if (err) {\n                    reject(err);\n                    return;\n                  }\n\n                  resolve();\n                });\n              });\n              allowanceCallsPromise.push(stakePromise);\n            }\n\n            const done = await Promise.all(allowanceCallsPromise);\n            let sendTok = '0';\n\n            if (token && token.id) {\n              sendTok = token.id;\n            }\n\n            this._callContractWait(web3, gaugeContract, 'deposit', [balanceOf, sendTok], account, gasPrice, null, null, stakeTXID, async err => {\n              if (err) {\n                return this.emitter.emit(ACTIONS.ERROR, err);\n              }\n\n              await context.updatePairsCall(web3, account);\n              this.emitter.emit(ACTIONS.PAIR_CREATED, pairFor);\n            });\n          });\n        }, null, sendValue);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"createPairDeposit\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          token0,\n          token1,\n          amount0,\n          amount1,\n          isStable,\n          slippage\n        } = payload.content;\n        let toki0 = token0.address;\n        let toki1 = token1.address;\n\n        if (token0.address === 'FTM') {\n          toki0 = CONTRACTS.WFTM_ADDRESS;\n        }\n\n        if (token1.address === 'FTM') {\n          toki1 = CONTRACTS.WFTM_ADDRESS;\n        }\n\n        const factoryContract = new web3.eth.Contract(CONTRACTS.FACTORY_ABI, CONTRACTS.FACTORY_ADDRESS);\n        const pairFor = await factoryContract.methods.getPair(toki0, toki1, isStable).call();\n\n        if (pairFor && pairFor != ZERO_ADDRESS) {\n          await context.updatePairsCall(web3, account);\n          this.emitter.emit(ACTIONS.ERROR, 'Pair already exists');\n          return null;\n        } // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n\n        let allowance0TXID = this.getTXUUID();\n        let allowance1TXID = this.getTXUUID();\n        let depositTXID = this.getTXUUID();\n        let createGaugeTXID = this.getTXUUID(); //DOD A CHECK FOR IF THE POOL ALREADY EXISTS\n\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Create liquidity pool for ${token0.symbol}/${token1.symbol}`,\n          type: 'Liquidity',\n          verb: 'Liquidity Pool Created',\n          transactions: [{\n            uuid: allowance0TXID,\n            description: `Checking your ${token0.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: allowance1TXID,\n            description: `Checking your ${token1.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: depositTXID,\n            description: `Create liquidity pool`,\n            status: 'WAITING'\n          }, {\n            uuid: createGaugeTXID,\n            description: `Create gauge`,\n            status: 'WAITING'\n          }]\n        });\n        let allowance0 = 0;\n        let allowance1 = 0; // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        if (token0.address !== 'FTM') {\n          allowance0 = await this._getDepositAllowance(web3, token0, account);\n\n          if (BigNumber(allowance0).lt(amount0)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance0TXID,\n              description: `Allow the router to spend your ${token0.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance0TXID,\n              description: `Allowance on ${token0.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance0 = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allowance on ${token0.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        if (token1.address !== 'FTM') {\n          allowance1 = await this._getDepositAllowance(web3, token1, account);\n\n          if (BigNumber(allowance1).lt(amount1)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance1TXID,\n              description: `Allow the router to spend your ${token1.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance1TXID,\n              description: `Allowance on ${token1.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance1 = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allowance on ${token1.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance0).lt(amount0)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance0TXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        if (BigNumber(allowance1).lt(amount1)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance1TXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT DEPOSIT TRANSACTION\n\n        const sendSlippage = BigNumber(100).minus(slippage).div(100);\n        const sendAmount0 = BigNumber(amount0).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1 = BigNumber(amount1).times(10 ** token1.decimals).toFixed(0);\n        const deadline = '' + moment().add(600, 'seconds').unix();\n        const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10 ** token1.decimals).toFixed(0);\n        let func = 'addLiquidity';\n        let params = [token0.address, token1.address, isStable, sendAmount0, sendAmount1, sendAmount0Min, sendAmount1Min, account.address, deadline];\n        let sendValue = null;\n\n        if (token0.address === 'FTM') {\n          func = 'addLiquidityFTM';\n          params = [token1.address, isStable, sendAmount1, sendAmount1Min, sendAmount0Min, account.address, deadline];\n          sendValue = sendAmount0;\n        }\n\n        if (token1.address === 'FTM') {\n          func = 'addLiquidityFTM';\n          params = [token0.address, isStable, sendAmount0, sendAmount0Min, sendAmount1Min, account.address, deadline];\n          sendValue = sendAmount1;\n        }\n\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n\n        this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, depositTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          } // GET PAIR FOR NEWLY CREATED LIQUIDITY POOL\n\n\n          let tok0 = token0.address;\n          let tok1 = token1.address;\n\n          if (token0.address === 'FTM') {\n            tok0 = CONTRACTS.WFTM_ADDRESS;\n          }\n\n          if (token1.address === 'FTM') {\n            tok1 = CONTRACTS.WFTM_ADDRESS;\n          }\n\n          const pairFor = await factoryContract.methods.getPair(tok0, tok1, isStable).call(); // SUBMIT CREATE GAUGE TRANSACTION\n\n          const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n\n          this._callContractWait(web3, gaugesContract, 'createGauge', [pairFor], account, gasPrice, null, null, createGaugeTXID, async err => {\n            if (err) {\n              return this.emitter.emit(ACTIONS.ERROR, err);\n            }\n\n            await context.updatePairsCall(web3, account);\n            this.emitter.emit(ACTIONS.PAIR_CREATED, pairFor);\n          });\n        }, null, sendValue);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"updatePairsCall\", async (web3, account) => {\n      try {\n        const response = await fetch(`${process.env.NEXT_PUBLIC_API}/api/v1/updatePairs`, {\n          method: 'get',\n          headers: {\n            'Authorization': `Basic ${process.env.NEXT_PUBLIC_API_TOKEN}`\n          }\n        });\n        const pairsCall = await response.json();\n        this.setStore({\n          pairs: pairsCall.data\n        });\n        await this._getPairInfo(web3, account, pairsCall.data);\n      } catch (ex) {\n        console.log(ex);\n      }\n    });\n\n    _defineProperty(this, \"sleep\", ms => {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    });\n\n    _defineProperty(this, \"getTXUUID\", () => {\n      return uuidv4();\n    });\n\n    _defineProperty(this, \"addLiquidity\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          token0,\n          token1,\n          amount0,\n          amount1,\n          minLiquidity,\n          pair,\n          slippage\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let allowance0TXID = this.getTXUUID();\n        let allowance1TXID = this.getTXUUID();\n        let depositTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Add liquidity to ${pair.symbol}`,\n          verb: 'Liquidity Added',\n          type: 'Liquidity',\n          transactions: [{\n            uuid: allowance0TXID,\n            description: `Checking your ${token0.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: allowance1TXID,\n            description: `Checking your ${token1.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: depositTXID,\n            description: `Deposit tokens in the pool`,\n            status: 'WAITING'\n          }]\n        });\n        let allowance0 = 0;\n        let allowance1 = 0; // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        if (token0.address !== 'FTM') {\n          allowance0 = await this._getDepositAllowance(web3, token0, account);\n\n          if (BigNumber(allowance0).lt(amount0)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance0TXID,\n              description: `Allow the router to spend your ${token0.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance0TXID,\n              description: `Allowance on ${token0.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance0 = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allowance on ${token0.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        if (token1.address !== 'FTM') {\n          allowance1 = await this._getDepositAllowance(web3, token1, account);\n\n          if (BigNumber(allowance1).lt(amount1)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance1TXID,\n              description: `Allow the router to spend your ${token1.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance1TXID,\n              description: `Allowance on ${token1.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance1 = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allowance on ${token1.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance0).lt(amount0)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance0TXID, err => {\n              if (err) {\n                console.log(err);\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        if (BigNumber(allowance1).lt(amount1)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance1TXID, err => {\n              if (err) {\n                console.log(err);\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT DEPOSIT TRANSACTION\n\n        const sendSlippage = BigNumber(100).minus(slippage).div(100);\n        const sendAmount0 = BigNumber(amount0).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1 = BigNumber(amount1).times(10 ** token1.decimals).toFixed(0);\n        const deadline = '' + moment().add(600, 'seconds').unix();\n        const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10 ** token1.decimals).toFixed(0);\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n        let func = 'addLiquidity';\n        let params = [token0.address, token1.address, pair.isStable, sendAmount0, sendAmount1, sendAmount0Min, sendAmount1Min, account.address, deadline];\n        let sendValue = null;\n\n        if (token0.address === 'FTM') {\n          func = 'addLiquidityFTM';\n          params = [token1.address, pair.isStable, sendAmount1, sendAmount1Min, sendAmount0Min, account.address, deadline];\n          sendValue = sendAmount0;\n        }\n\n        if (token1.address === 'FTM') {\n          func = 'addLiquidityFTM';\n          params = [token0.address, pair.isStable, sendAmount0, sendAmount0Min, sendAmount1Min, account.address, deadline];\n          sendValue = sendAmount1;\n        }\n\n        this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, depositTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._getPairInfo(web3, account);\n\n          this.emitter.emit(ACTIONS.LIQUIDITY_ADDED);\n        }, null, sendValue);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"stakeLiquidity\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pair,\n          token\n        } = payload.content;\n        let stakeAllowanceTXID = this.getTXUUID();\n        let stakeTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Stake ${pair.symbol} in the gauge`,\n          type: 'Liquidity',\n          verb: 'Liquidity Staked',\n          transactions: [{\n            uuid: stakeAllowanceTXID,\n            description: `Checking your ${pair.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: stakeTXID,\n            description: `Stake LP tokens in the gauge`,\n            status: 'WAITING'\n          }]\n        });\n        const stakeAllowance = await this._getStakeAllowance(web3, pair, account);\n        const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address);\n        const balanceOf = await pairContract.methods.balanceOf(account.address).call();\n\n        if (BigNumber(stakeAllowance).lt(BigNumber(balanceOf).div(10 ** pair.decimals).toFixed(pair.decimals))) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: stakeAllowanceTXID,\n            description: `Allow the router to spend your ${pair.symbol}`\n          });\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: stakeAllowanceTXID,\n            description: `Allowance on ${pair.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = [];\n\n        if (BigNumber(stakeAllowance).lt(BigNumber(balanceOf).div(10 ** pair.decimals).toFixed(pair.decimals))) {\n          const stakePromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, pairContract, 'approve', [pair.gauge.address, MAX_UINT256], account, gasPrice, null, null, stakeAllowanceTXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(stakePromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises);\n        const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address);\n        let sendTok = '0';\n\n        if (token && token.id) {\n          sendTok = token.id;\n        }\n\n        this._callContractWait(web3, gaugeContract, 'deposit', [balanceOf, sendTok], account, gasPrice, null, null, stakeTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._getPairInfo(web3, account);\n\n          this.emitter.emit(ACTIONS.LIQUIDITY_STAKED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"addLiquidityAndStake\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          token0,\n          token1,\n          amount0,\n          amount1,\n          minLiquidity,\n          pair,\n          token,\n          slippage\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let allowance0TXID = this.getTXUUID();\n        let allowance1TXID = this.getTXUUID();\n        let stakeAllowanceTXID = this.getTXUUID();\n        let depositTXID = this.getTXUUID();\n        let stakeTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Add liquidity to ${pair.symbol}`,\n          type: 'Liquidity',\n          verb: 'Liquidity Added',\n          transactions: [{\n            uuid: allowance0TXID,\n            description: `Checking your ${token0.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: allowance1TXID,\n            description: `Checking your ${token1.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: stakeAllowanceTXID,\n            description: `Checking your ${pair.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: depositTXID,\n            description: `Deposit tokens in the pool`,\n            status: 'WAITING'\n          }, {\n            uuid: stakeTXID,\n            description: `Stake LP tokens in the gauge`,\n            status: 'WAITING'\n          }]\n        });\n        let allowance0 = 0;\n        let allowance1 = 0; // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        if (token0.address !== 'FTM') {\n          allowance0 = await this._getDepositAllowance(web3, token0, account);\n\n          if (BigNumber(allowance0).lt(amount0)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance0TXID,\n              description: `Allow the router to spend your ${token0.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance0TXID,\n              description: `Allowance on ${token0.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance0 = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allowance on ${token0.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        if (token1.address !== 'FTM') {\n          allowance1 = await this._getDepositAllowance(web3, token1, account);\n\n          if (BigNumber(allowance1).lt(amount1)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance1TXID,\n              description: `Allow the router to spend your ${token1.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowance1TXID,\n              description: `Allowance on ${token1.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance1 = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allowance on ${token1.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const stakeAllowance = await this._getStakeAllowance(web3, pair, account);\n\n        if (BigNumber(stakeAllowance).lt(minLiquidity)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: stakeAllowanceTXID,\n            description: `Allow the router to spend your ${pair.symbol}`\n          });\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: stakeAllowanceTXID,\n            description: `Allowance on ${pair.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance0).lt(amount0)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance0TXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        if (BigNumber(allowance1).lt(amount1)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance1TXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        if (BigNumber(stakeAllowance).lt(minLiquidity)) {\n          const pairContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address);\n          const stakePromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, pairContract, 'approve', [pair.gauge.address, MAX_UINT256], account, gasPrice, null, null, stakeAllowanceTXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(stakePromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT DEPOSIT TRANSACTION\n\n        const sendSlippage = BigNumber(100).minus(slippage).div(100);\n        const sendAmount0 = BigNumber(amount0).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1 = BigNumber(amount1).times(10 ** token1.decimals).toFixed(0);\n        const deadline = '' + moment().add(600, 'seconds').unix();\n        const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10 ** token1.decimals).toFixed(0);\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n        const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address);\n        const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address);\n        let func = 'addLiquidity';\n        let params = [token0.address, token1.address, pair.isStable, sendAmount0, sendAmount1, sendAmount0Min, sendAmount1Min, account.address, deadline];\n        let sendValue = null;\n\n        if (token0.address === 'FTM') {\n          func = 'addLiquidityFTM';\n          params = [token1.address, pair.isStable, sendAmount1, sendAmount1Min, sendAmount0Min, account.address, deadline];\n          sendValue = sendAmount0;\n        }\n\n        if (token1.address === 'FTM') {\n          func = 'addLiquidityFTM';\n          params = [token0.address, pair.isStable, sendAmount0, sendAmount0Min, sendAmount1Min, account.address, deadline];\n          sendValue = sendAmount1;\n        }\n\n        this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, depositTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          const balanceOf = await pairContract.methods.balanceOf(account.address).call();\n          let sendTok = '0';\n\n          if (token && token.id) {\n            sendTok = token.id;\n          }\n\n          this._callContractWait(web3, gaugeContract, 'deposit', [balanceOf, sendTok], account, gasPrice, null, null, stakeTXID, err => {\n            if (err) {\n              return this.emitter.emit(ACTIONS.ERROR, err);\n            }\n\n            this._getPairInfo(web3, account);\n\n            this.emitter.emit(ACTIONS.ADD_LIQUIDITY_AND_STAKED);\n          });\n        }, null, sendValue);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"_getDepositAllowance\", async (web3, token, account) => {\n      try {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token.address);\n        const allowance = await tokenContract.methods.allowance(account.address, CONTRACTS.ROUTER_ADDRESS).call();\n        return BigNumber(allowance).div(10 ** token.decimals).toFixed(token.decimals);\n      } catch (ex) {\n        console.error(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_getStakeAllowance\", async (web3, pair, account) => {\n      try {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address);\n        const allowance = await tokenContract.methods.allowance(account.address, pair.gauge.address).call();\n        return BigNumber(allowance).div(10 ** pair.decimals).toFixed(pair.decimals);\n      } catch (ex) {\n        console.error(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_getWithdrawAllowance\", async (web3, pair, account) => {\n      try {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address);\n        const allowance = await tokenContract.methods.allowance(account.address, CONTRACTS.ROUTER_ADDRESS).call();\n        return BigNumber(allowance).div(10 ** pair.decimals).toFixed(pair.decimals);\n      } catch (ex) {\n        console.error(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"quoteAddLiquidity\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pair,\n          token0,\n          token1,\n          amount0,\n          amount1\n        } = payload.content;\n\n        if (!pair || !token0 || !token1 || amount0 == '' || amount1 == '') {\n          return null;\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n        const sendAmount0 = BigNumber(amount0).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1 = BigNumber(amount1).times(10 ** token1.decimals).toFixed(0);\n        let addy0 = token0.address;\n        let addy1 = token1.address;\n\n        if (token0.address === 'FTM') {\n          addy0 = CONTRACTS.WFTM_ADDRESS;\n        }\n\n        if (token1.address === 'FTM') {\n          addy1 = CONTRACTS.WFTM_ADDRESS;\n        }\n\n        const res = await routerContract.methods.quoteAddLiquidity(addy0, addy1, pair.isStable, sendAmount0, sendAmount1).call();\n        const returnVal = {\n          inputs: {\n            token0,\n            token1,\n            amount0,\n            amount1\n          },\n          output: BigNumber(res.liquidity).div(10 ** pair.decimals).toFixed(pair.decimals)\n        };\n        this.emitter.emit(ACTIONS.QUOTE_ADD_LIQUIDITY_RETURNED, returnVal);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"getLiquidityBalances\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pair\n        } = payload.content;\n\n        if (!pair) {\n          return;\n        }\n\n        const token0Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.token0.address);\n        const token1Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.token1.address);\n        const pairContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address);\n        const balanceCalls = [token0Contract.methods.balanceOf(account.address).call(), token1Contract.methods.balanceOf(account.address).call(), pairContract.methods.balanceOf(account.address).call()];\n\n        if (pair.gauge) {\n          const gaugeContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.gauge.address);\n          balanceCalls.push(gaugeContract.methods.balanceOf(account.address).call()); // balanceCalls.push(gaugeContract.methods.earned(incentiveAddress, account.address).call())\n        }\n\n        const [token0Balance, token1Balance, poolBalance, gaugeBalance\n        /*, earned*/\n        ] = await Promise.all(balanceCalls);\n        const returnVal = {\n          token0: BigNumber(token0Balance).div(10 ** pair.token0.decimals).toFixed(pair.token0.decimals),\n          token1: BigNumber(token1Balance).div(10 ** pair.token1.decimals).toFixed(pair.token1.decimals),\n          pool: BigNumber(poolBalance).div(10 ** 18).toFixed(18)\n        };\n\n        if (pair.gauge) {\n          returnVal.gauge = gaugeBalance ? BigNumber(gaugeBalance).div(10 ** 18).toFixed(18) : null; // returnVal.earned = BigNumber(earned).div(10**incentiveAsset.decimals).toFixed(incentiveAsset.decimals),\n        }\n\n        this.emitter.emit(ACTIONS.GET_LIQUIDITY_BALANCES_RETURNED, returnVal);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"removeLiquidity\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          token0,\n          token1,\n          pair,\n          slippage\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let allowanceTXID = this.getTXUUID();\n        let withdrawTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Remove liquidity from ${pair.symbol}`,\n          type: 'Liquidity',\n          verb: 'Liquidity Removed',\n          transactions: [{\n            uuid: allowanceTXID,\n            description: `Checking your ${pair.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: withdrawTXID,\n            description: `Withdraw tokens from the pool`,\n            status: 'WAITING'\n          }]\n        }); // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        const allowance = await this._getWithdrawAllowance(web3, pair, account);\n\n        if (BigNumber(allowance).lt(pair.balance)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allow the router to spend your ${pair.symbol}`\n          });\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allowance on ${pair.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance).lt(pair.balance)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, err => {\n              if (err) {\n                console.log(err);\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT WITHDRAW TRANSACTION\n\n        const sendAmount = BigNumber(pair.balance).times(10 ** pair.decimals).toFixed(0);\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n        const quoteRemove = await routerContract.methods.quoteRemoveLiquidity(token0.address, token1.address, pair.isStable, sendAmount).call();\n        const sendSlippage = BigNumber(100).minus(slippage).div(100);\n        const deadline = '' + moment().add(600, 'seconds').unix();\n        const sendAmount0Min = BigNumber(quoteRemove.amountA).times(sendSlippage).toFixed(0);\n        const sendAmount1Min = BigNumber(quoteRemove.amountB).times(sendSlippage).toFixed(0);\n\n        this._callContractWait(web3, routerContract, 'removeLiquidity', [token0.address, token1.address, pair.isStable, sendAmount, sendAmount0Min, sendAmount1Min, account.address, deadline], account, gasPrice, null, null, withdrawTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._getPairInfo(web3, account);\n\n          this.emitter.emit(ACTIONS.LIQUIDITY_REMOVED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"unstakeAndRemoveLiquidity\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          token0,\n          token1,\n          amount,\n          amount0,\n          amount1,\n          pair,\n          slippage\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let allowanceTXID = this.getTXUUID();\n        let withdrawTXID = this.getTXUUID();\n        let unstakeTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Remove liquidity from ${pair.symbol}`,\n          type: 'Liquidity',\n          verb: 'Liquidity Removed',\n          transactions: [{\n            uuid: allowanceTXID,\n            description: `Checking your ${pair.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: unstakeTXID,\n            description: `Unstake LP tokens from the gauge`,\n            status: 'WAITING'\n          }, {\n            uuid: withdrawTXID,\n            description: `Withdraw tokens from the pool`,\n            status: 'WAITING'\n          }]\n        }); // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        const allowance = await this._getWithdrawAllowance(web3, pair, account);\n\n        if (BigNumber(allowance).lt(amount)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allow the router to spend your ${pair.symbol}`\n          });\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allowance on ${pair.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance).lt(amount)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT DEPOSIT TRANSACTION\n\n        const sendSlippage = BigNumber(100).minus(slippage).div(100);\n        const sendAmount = BigNumber(amount).times(10 ** pair.decimals).toFixed(0);\n        const deadline = '' + moment().add(600, 'seconds').unix();\n        const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10 ** token0.decimals).toFixed(0);\n        const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10 ** token1.decimals).toFixed(0);\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n        const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address);\n        const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address);\n\n        this._callContractWait(web3, gaugeContract, 'withdraw', [sendAmount], account, gasPrice, null, null, unstakeTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          const balanceOf = await pairContract.methods.balanceOf(account.address).call();\n\n          this._callContractWait(web3, routerContract, 'removeLiquidity', [token0.address, token1.address, pair.isStable, balanceOf, sendAmount0Min, sendAmount1Min, account.address, deadline], account, gasPrice, null, null, withdrawTXID, err => {\n            if (err) {\n              return this.emitter.emit(ACTIONS.ERROR, err);\n            }\n\n            this._getPairInfo(web3, account);\n\n            this.emitter.emit(ACTIONS.REMOVE_LIQUIDITY_AND_UNSTAKED);\n          });\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"unstakeLiquidity\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          token0,\n          token1,\n          amount,\n          amount0,\n          amount1,\n          pair\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let unstakeTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Unstake liquidity from gauge`,\n          type: 'Liquidity',\n          verb: 'Liquidity Unstaked',\n          transactions: [{\n            uuid: unstakeTXID,\n            description: `Unstake LP tokens from the gauge`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice(); // SUBMIT DEPOSIT TRANSACTION\n\n        const sendAmount = BigNumber(amount).times(10 ** pair.decimals).toFixed(0);\n        const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address);\n\n        this._callContractWait(web3, gaugeContract, 'withdraw', [sendAmount], account, gasPrice, null, null, unstakeTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._getPairInfo(web3, account);\n\n          this.emitter.emit(ACTIONS.LIQUIDITY_UNSTAKED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"quoteRemoveLiquidity\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pair,\n          token0,\n          token1,\n          withdrawAmount\n        } = payload.content;\n\n        if (!pair || !token0 || !token1 || withdrawAmount == '') {\n          return null;\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n        const sendWithdrawAmount = BigNumber(withdrawAmount).times(10 ** pair.decimals).toFixed(0);\n        const res = await routerContract.methods.quoteRemoveLiquidity(token0.address, token1.address, pair.isStable, sendWithdrawAmount).call();\n        const returnVal = {\n          inputs: {\n            token0,\n            token1,\n            withdrawAmount\n          },\n          output: {\n            amount0: BigNumber(res.amountA).div(10 ** token0.decimals).toFixed(token0.decimals),\n            amount1: BigNumber(res.amountB).div(10 ** token1.decimals).toFixed(token1.decimals)\n          }\n        };\n        this.emitter.emit(ACTIONS.QUOTE_REMOVE_LIQUIDITY_RETURNED, returnVal);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"createGauge\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pair\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let createGaugeTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Create liquidity gauge for ${pair.token0.symbol}/${pair.token1.symbol}`,\n          type: 'Liquidity',\n          verb: 'Gauge Created',\n          transactions: [{\n            uuid: createGaugeTXID,\n            description: `Create gauge`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n\n        this._callContractWait(web3, gaugesContract, 'createGauge', [pair.address], account, gasPrice, null, null, createGaugeTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          await this.updatePairsCall(web3, account);\n          this.emitter.emit(ACTIONS.CREATE_GAUGE_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"quoteSwap\", async payload => {\n      const txUUID = this.getTXUUID();\n      console.log(`Entered Quote: ${txUUID}`);\n\n      try {\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        } // some path logic. Have a base asset (FTM) swap from start asset to FTM, swap from FTM back to out asset. Don't know.\n\n\n        const routeAssets = this.getStore('routeAssets');\n        const {\n          fromAsset,\n          toAsset,\n          fromAmount\n        } = payload.content;\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n        const sendFromAmount = BigNumber(fromAmount).times(10 ** fromAsset.decimals).toFixed();\n\n        if (!fromAsset || !toAsset || !fromAmount || !fromAsset.address || !toAsset.address || fromAmount === '') {\n          return null;\n        }\n\n        let addy0 = fromAsset.address;\n        let addy1 = toAsset.address;\n\n        if (fromAsset.address === 'FTM') {\n          addy0 = CONTRACTS.WFTM_ADDRESS;\n        }\n\n        if (toAsset.address === 'FTM') {\n          addy1 = CONTRACTS.WFTM_ADDRESS;\n        }\n\n        const includesRouteAddress = routeAssets.filter(asset => {\n          return asset.address.toLowerCase() == addy0.toLowerCase() || asset.address.toLowerCase() == addy1.toLowerCase();\n        });\n        let amountOuts = [];\n\n        if (includesRouteAddress.length === 0) {\n          amountOuts = routeAssets.map(routeAsset => {\n            return [{\n              routes: [{\n                from: addy0,\n                to: routeAsset.address,\n                stable: true\n              }, {\n                from: routeAsset.address,\n                to: addy1,\n                stable: true\n              }],\n              routeAsset: routeAsset\n            }, {\n              routes: [{\n                from: addy0,\n                to: routeAsset.address,\n                stable: false\n              }, {\n                from: routeAsset.address,\n                to: addy1,\n                stable: false\n              }],\n              routeAsset: routeAsset\n            }, {\n              routes: [{\n                from: addy0,\n                to: routeAsset.address,\n                stable: true\n              }, {\n                from: routeAsset.address,\n                to: addy1,\n                stable: false\n              }],\n              routeAsset: routeAsset\n            }, {\n              routes: [{\n                from: addy0,\n                to: routeAsset.address,\n                stable: false\n              }, {\n                from: routeAsset.address,\n                to: addy1,\n                stable: true\n              }],\n              routeAsset: routeAsset\n            }];\n          }).flat();\n        }\n\n        amountOuts.push({\n          routes: [{\n            from: addy0,\n            to: addy1,\n            stable: true\n          }],\n          routeAsset: null\n        });\n        amountOuts.push({\n          routes: [{\n            from: addy0,\n            to: addy1,\n            stable: false\n          }],\n          routeAsset: null\n        });\n        const multicall = await stores.accountStore.getMulticall();\n        const receiveAmounts = await multicall.aggregate(amountOuts.map(route => {\n          return routerContract.methods.getAmountsOut(sendFromAmount, route.routes);\n        }));\n\n        for (let i = 0; i < receiveAmounts.length; i++) {\n          amountOuts[i].receiveAmounts = receiveAmounts[i];\n          amountOuts[i].finalValue = BigNumber(receiveAmounts[i][receiveAmounts[i].length - 1]).div(10 ** toAsset.decimals).toFixed(toAsset.decimals);\n        }\n\n        const bestAmountOut = amountOuts.filter(ret => {\n          return ret != null;\n        }).reduce((best, current) => {\n          if (!best) {\n            return current;\n          }\n\n          return BigNumber(best.finalValue).gt(current.finalValue) ? best : current;\n        }, 0);\n\n        if (!bestAmountOut) {\n          this.emitter.emit(ACTIONS.ERROR, 'No valid route found to complete swap');\n          return null;\n        }\n\n        let totalRatio = 1;\n\n        for (let i = 0; i < bestAmountOut.routes.length; i++) {\n          if (bestAmountOut.routes[i].stable == true) {} else {\n            const reserves = await routerContract.methods.getReserves(bestAmountOut.routes[i].from, bestAmountOut.routes[i].to, bestAmountOut.routes[i].stable).call();\n            let amountIn = 0;\n            let amountOut = 0;\n\n            if (i == 0) {\n              amountIn = sendFromAmount;\n              amountOut = bestAmountOut.receiveAmounts[i + 1];\n            } else {\n              amountIn = bestAmountOut.receiveAmounts[i];\n              amountOut = bestAmountOut.receiveAmounts[i + 1];\n            }\n\n            const amIn = BigNumber(amountIn).div(reserves.reserveA);\n            const amOut = BigNumber(amountOut).div(reserves.reserveB);\n            const ratio = BigNumber(amOut).div(amIn);\n            totalRatio = BigNumber(totalRatio).times(ratio).toFixed(18);\n          }\n        }\n\n        const priceImpact = BigNumber(1).minus(totalRatio).times(100).toFixed(18);\n        const returnValue = {\n          inputs: {\n            fromAmount: fromAmount,\n            fromAsset: fromAsset,\n            toAsset: toAsset\n          },\n          output: bestAmountOut,\n          priceImpact: priceImpact\n        };\n        console.log(`Returned Quote: ${txUUID} : ${JSON.stringify(returnValue)}`);\n        this.emitter.emit(ACTIONS.QUOTE_SWAP_RETURNED, returnValue);\n      } catch (ex) {\n        console.log(`Exception Quote: ${txUUID}`);\n        console.error(ex);\n        this.emitter.emit(ACTIONS.QUOTE_SWAP_RETURNED, null);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"swap\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          fromAsset,\n          toAsset,\n          fromAmount,\n          toAmount,\n          quote,\n          slippage\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let allowanceTXID = this.getTXUUID();\n        let swapTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Swap ${fromAsset.symbol} for ${toAsset.symbol}`,\n          type: 'Swap',\n          verb: 'Swap Successful',\n          transactions: [{\n            uuid: allowanceTXID,\n            description: `Checking your ${fromAsset.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: swapTXID,\n            description: `Swap ${formatCurrency(fromAmount)} ${fromAsset.symbol} for ${toAsset.symbol}`,\n            status: 'WAITING'\n          }]\n        });\n        let allowance = 0; // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        if (fromAsset.address !== 'FTM') {\n          allowance = await this._getSwapAllowance(web3, fromAsset, account);\n\n          if (BigNumber(allowance).lt(fromAmount)) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowanceTXID,\n              description: `Allow the router to spend your ${fromAsset.symbol}`\n            });\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: allowanceTXID,\n              description: `Allowance on ${fromAsset.symbol} sufficient`,\n              status: 'DONE'\n            });\n          }\n        } else {\n          allowance = MAX_UINT256;\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allowance on ${fromAsset.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance).lt(fromAmount)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, fromAsset.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT SWAP TRANSACTION\n\n        const sendSlippage = BigNumber(100).minus(slippage).div(100);\n        const sendFromAmount = BigNumber(fromAmount).times(10 ** fromAsset.decimals).toFixed(0);\n        const sendMinAmountOut = BigNumber(quote.output.finalValue).times(10 ** toAsset.decimals).times(sendSlippage).toFixed(0);\n        const deadline = '' + moment().add(600, 'seconds').unix();\n        const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS);\n        let func = 'swapExactTokensForTokens';\n        let params = [sendFromAmount, sendMinAmountOut, quote.output.routes, account.address, deadline];\n        let sendValue = null;\n\n        if (fromAsset.address === 'FTM') {\n          func = 'swapExactFTMForTokens';\n          params = [sendMinAmountOut, quote.output.routes, account.address, deadline];\n          sendValue = sendFromAmount;\n        }\n\n        if (toAsset.address === 'FTM') {\n          func = 'swapExactTokensForFTM';\n        }\n\n        this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, swapTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._getSpecificAssetInfo(web3, account, fromAsset.address);\n\n          this._getSpecificAssetInfo(web3, account, toAsset.address);\n\n          this._getPairInfo(web3, account);\n\n          this.emitter.emit(ACTIONS.SWAP_RETURNED);\n        }, null, sendValue);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"_getSpecificAssetInfo\", async (web3, account, assetAddress) => {\n      try {\n        const baseAssets = this.getStore(\"baseAssets\");\n\n        if (!baseAssets) {\n          console.warn('baseAssets not found');\n          return null;\n        }\n\n        const ba = await Promise.all(baseAssets.map(async asset => {\n          if (asset.address.toLowerCase() === assetAddress.toLowerCase()) {\n            if (asset.address === 'FTM') {\n              let bal = await web3.eth.getBalance(account.address);\n              asset.balance = BigNumber(bal).div(10 ** asset.decimals).toFixed(asset.decimals);\n            } else {\n              const assetContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, asset.address);\n              const [balanceOf] = await Promise.all([assetContract.methods.balanceOf(account.address).call()]);\n              asset.balance = BigNumber(balanceOf).div(10 ** asset.decimals).toFixed(asset.decimals);\n            }\n          }\n\n          return asset;\n        }));\n        this.setStore({\n          baseAssets: ba\n        });\n        this.emitter.emit(ACTIONS.UPDATED);\n      } catch (ex) {\n        console.log(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_getSwapAllowance\", async (web3, token, account) => {\n      try {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token.address);\n        const allowance = await tokenContract.methods.allowance(account.address, CONTRACTS.ROUTER_ADDRESS).call();\n        return BigNumber(allowance).div(10 ** token.decimals).toFixed(token.decimals);\n      } catch (ex) {\n        console.error(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"getVestNFTs\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const veToken = this.getStore('veToken');\n        const govToken = this.getStore('govToken');\n        const vestingContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS);\n        const nftsLength = await vestingContract.methods.balanceOf(account.address).call();\n        const arr = Array.from({\n          length: parseInt(nftsLength)\n        }, (v, i) => i);\n        const nfts = await Promise.all(arr.map(async idx => {\n          const tokenIndex = await vestingContract.methods.tokenOfOwnerByIndex(account.address, idx).call();\n          const locked = await vestingContract.methods.locked(tokenIndex).call();\n          const lockValue = await vestingContract.methods.balanceOfNFT(tokenIndex).call(); // probably do some decimals math before returning info. Maybe get more info. I don't know what it returns.\n\n          return {\n            id: tokenIndex,\n            lockEnds: locked.end,\n            lockAmount: BigNumber(locked.amount).div(10 ** govToken.decimals).toFixed(govToken.decimals),\n            lockValue: BigNumber(lockValue).div(10 ** veToken.decimals).toFixed(veToken.decimals)\n          };\n        }));\n        this.setStore({\n          vestNFTs: nfts\n        });\n        this.emitter.emit(ACTIONS.VEST_NFTS_RETURNED, nfts);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"createVest\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const govToken = this.getStore('govToken');\n        const {\n          amount,\n          unlockTime\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let allowanceTXID = this.getTXUUID();\n        let vestTXID = this.getTXUUID();\n        const unlockString = moment().add(unlockTime, 'seconds').format('YYYY-MM-DD');\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Vest ${govToken.symbol} until ${unlockString}`,\n          type: 'Vest',\n          verb: 'Vest Created',\n          transactions: [{\n            uuid: allowanceTXID,\n            description: `Checking your ${govToken.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: vestTXID,\n            description: `Vesting your tokens`,\n            status: 'WAITING'\n          }]\n        }); // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        const allowance = await this._getVestAllowance(web3, govToken, account);\n\n        if (BigNumber(allowance).lt(amount)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allow the vesting contract to use your ${govToken.symbol}`\n          });\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allowance on ${govToken.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance).lt(amount)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, govToken.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            this._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.VE_TOKEN_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT VEST TRANSACTION\n\n        const sendAmount = BigNumber(amount).times(10 ** govToken.decimals).toFixed(0);\n        const veTokenContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS);\n\n        this._callContractWait(web3, veTokenContract, 'create_lock', [sendAmount, unlockTime + ''], account, gasPrice, null, null, vestTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._getGovTokenInfo(web3, account);\n\n          this.getNFTByID('fetchAll');\n          this.emitter.emit(ACTIONS.CREATE_VEST_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"_getVestAllowance\", async (web3, token, account) => {\n      try {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token.address);\n        const allowance = await tokenContract.methods.allowance(account.address, CONTRACTS.VE_TOKEN_ADDRESS).call();\n        return BigNumber(allowance).div(10 ** token.decimals).toFixed(token.decimals);\n      } catch (ex) {\n        console.error(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"increaseVestAmount\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const govToken = this.getStore('govToken');\n        const {\n          amount,\n          tokenID\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let allowanceTXID = this.getTXUUID();\n        let vestTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Increase vest amount on token #${tokenID}`,\n          type: 'Vest',\n          verb: 'Vest Increased',\n          transactions: [{\n            uuid: allowanceTXID,\n            description: `Checking your ${govToken.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: vestTXID,\n            description: `Increasing your vest amount`,\n            status: 'WAITING'\n          }]\n        }); // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        const allowance = await this._getVestAllowance(web3, govToken, account);\n\n        if (BigNumber(allowance).lt(amount)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allow vesting contract to use your ${govToken.symbol}`\n          });\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allowance on ${govToken.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance).lt(amount)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, govToken.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            this._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.VE_TOKEN_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT INCREASE TRANSACTION\n\n        const sendAmount = BigNumber(amount).times(10 ** govToken.decimals).toFixed(0);\n        const veTokenContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS);\n\n        this._callContractWait(web3, veTokenContract, 'increase_amount', [tokenID, sendAmount], account, gasPrice, null, null, vestTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._getGovTokenInfo(web3, account);\n\n          this._updateVestNFTByID(tokenID);\n\n          this.emitter.emit(ACTIONS.INCREASE_VEST_AMOUNT_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"increaseVestDuration\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const govToken = this.getStore('govToken');\n        const {\n          tokenID,\n          unlockTime\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let vestTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Increase unlock time on token #${tokenID}`,\n          type: 'Vest',\n          verb: 'Vest Increased',\n          transactions: [{\n            uuid: vestTXID,\n            description: `Increasing your vest duration`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice(); // SUBMIT INCREASE TRANSACTION\n\n        const veTokenContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS);\n\n        this._callContractWait(web3, veTokenContract, 'increase_unlock_time', [tokenID, unlockTime + ''], account, gasPrice, null, null, vestTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._updateVestNFTByID(tokenID);\n\n          this.emitter.emit(ACTIONS.INCREASE_VEST_DURATION_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"withdrawVest\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const govToken = this.getStore('govToken');\n        const {\n          tokenID\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let vestTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Withdraw vest amount on token #${tokenID}`,\n          type: 'Vest',\n          verb: 'Vest Withdrawn',\n          transactions: [{\n            uuid: vestTXID,\n            description: `Withdrawing your expired tokens`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice(); // SUBMIT INCREASE TRANSACTION\n\n        const veTokenContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS);\n\n        this._callContractWait(web3, veTokenContract, 'withdraw', [tokenID], account, gasPrice, null, null, vestTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this._updateVestNFTByID(tokenID);\n\n          this.emitter.emit(ACTIONS.WITHDRAW_VEST_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"vote\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const govToken = this.getStore('govToken');\n        const {\n          tokenID,\n          votes\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let voteTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Cast vote using token #${tokenID}`,\n          verb: 'Votes Cast',\n          transactions: [{\n            uuid: voteTXID,\n            description: `Cast votes`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice(); // SUBMIT INCREASE TRANSACTION\n\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n        let onlyVotes = votes.filter(vote => {\n          return BigNumber(vote.value).gt(0) || BigNumber(vote.value).lt(0);\n        });\n        let tokens = onlyVotes.map(vote => {\n          return vote.address;\n        });\n        let voteCounts = onlyVotes.map(vote => {\n          return BigNumber(vote.value).times(100).toFixed(0);\n        });\n\n        this._callContractWait(web3, gaugesContract, 'vote', [tokenID, tokens, voteCounts], account, gasPrice, null, null, voteTXID, err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this.emitter.emit(ACTIONS.VOTE_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"getVestVotes\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          tokenID\n        } = payload.content;\n        const pairs = this.getStore('pairs');\n\n        if (!pairs) {\n          return null;\n        }\n\n        if (!tokenID) {\n          return;\n        }\n\n        const filteredPairs = pairs.filter(pair => {\n          return pair && pair.gauge && pair.gauge.address;\n        });\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n        const multicall = await stores.accountStore.getMulticall();\n        const calls = filteredPairs.map(pair => {\n          return gaugesContract.methods.votes(tokenID, pair.address);\n        });\n        const voteCounts = await multicall.aggregate(calls);\n        let votes = [];\n        const totalVotes = voteCounts.reduce((curr, acc) => {\n          let num = BigNumber(acc).gt(0) ? acc : BigNumber(acc).times(-1).toNumber(0);\n          return BigNumber(curr).plus(num);\n        }, 0);\n\n        for (let i = 0; i < voteCounts.length; i++) {\n          votes.push({\n            address: filteredPairs[i].address,\n            votePercent: BigNumber(totalVotes).gt(0) || BigNumber(totalVotes).lt(0) ? BigNumber(voteCounts[i]).times(100).div(totalVotes).toFixed(0) : '0'\n          });\n        }\n\n        this.emitter.emit(ACTIONS.VEST_VOTES_RETURNED, votes);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"createBribe\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          asset,\n          amount,\n          gauge\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let allowanceTXID = this.getTXUUID();\n        let bribeTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Create bribe on ${gauge.token0.symbol}/${gauge.token1.symbol}`,\n          verb: 'Bribe Created',\n          transactions: [{\n            uuid: allowanceTXID,\n            description: `Checking your ${asset.symbol} allowance`,\n            status: 'WAITING'\n          }, {\n            uuid: bribeTXID,\n            description: `Create bribe`,\n            status: 'WAITING'\n          }]\n        }); // CHECK ALLOWANCES AND SET TX DISPLAY\n\n        const allowance = await this._getBribeAllowance(web3, asset, gauge, account);\n\n        if (BigNumber(allowance).lt(amount)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allow the bribe contract to spend your ${asset.symbol}`\n          });\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allowance on ${asset.symbol} sufficient`,\n            status: 'DONE'\n          });\n        }\n\n        const gasPrice = await stores.accountStore.getGasPrice();\n        const allowanceCallsPromises = []; // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n\n        if (BigNumber(allowance).lt(amount)) {\n          const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, asset.address);\n          const tokenPromise = new Promise((resolve, reject) => {\n            this._callContractWait(web3, tokenContract, 'approve', [gauge.gauge.bribeAddress, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          allowanceCallsPromises.push(tokenPromise);\n        }\n\n        const done = await Promise.all(allowanceCallsPromises); // SUBMIT BRIBE TRANSACTION\n\n        const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, gauge.gauge.bribeAddress);\n        const sendAmount = BigNumber(amount).times(10 ** asset.decimals).toFixed(0);\n\n        this._callContractWait(web3, bribeContract, 'notifyRewardAmount', [asset.address, sendAmount], account, gasPrice, null, null, bribeTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          await this.updatePairsCall(web3, account);\n          this.emitter.emit(ACTIONS.BRIBE_CREATED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"_getBribeAllowance\", async (web3, token, pair, account) => {\n      try {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token.address);\n        const allowance = await tokenContract.methods.allowance(account.address, pair.gauge.bribeAddress).call();\n        return BigNumber(allowance).div(10 ** token.decimals).toFixed(token.decimals);\n      } catch (ex) {\n        console.error(ex);\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"getVestBalances\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          tokenID\n        } = payload.content;\n        const pairs = this.getStore('pairs');\n\n        if (!pairs) {\n          return null;\n        }\n\n        if (!tokenID) {\n          return;\n        }\n\n        const filteredPairs = pairs.filter(pair => {\n          return pair && pair.gauge;\n        });\n        const bribesEarned = await Promise.all(filteredPairs.map(async pair => {\n          const bribesEarned = await Promise.all(pair.gauge.bribes.map(async bribe => {\n            const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, pair.gauge.bribeAddress);\n            const [earned] = await Promise.all([bribeContract.methods.earned(bribe.token.address, tokenID).call()]);\n            return {\n              earned: BigNumber(earned).div(10 ** bribe.token.decimals).toFixed(bribe.token.decimals)\n            };\n          }));\n          pair.gauge.bribesEarned = bribesEarned;\n          return pair;\n        }));\n        this.emitter.emit(ACTIONS.VEST_BALANCES_RETURNED, bribesEarned);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"getRewardBalances\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          tokenID\n        } = payload.content;\n        const pairs = this.getStore('pairs');\n        const filteredPairs = [...pairs.filter(pair => {\n          return pair && pair.gauge;\n        })];\n        const filteredPairs2 = [...pairs.filter(pair => {\n          return pair && pair.gauge;\n        })];\n        let filteredBribes = [];\n\n        if (tokenID) {\n          const bribesEarned = await Promise.all(filteredPairs.map(async pair => {\n            const bribesEarned = await Promise.all(pair.gauge.bribes.map(async bribe => {\n              const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, pair.gauge.bribeAddress);\n              const [earned] = await Promise.all([bribeContract.methods.earned(bribe.token.address, tokenID).call()]);\n              bribe.earned = BigNumber(earned).div(10 ** bribe.token.decimals).toFixed(bribe.token.decimals);\n              return bribe;\n            }));\n            pair.gauge.bribesEarned = bribesEarned;\n            return pair;\n          }));\n          filteredBribes = bribesEarned.filter(pair => {\n            if (pair.gauge && pair.gauge.bribesEarned && pair.gauge.bribesEarned.length > 0) {\n              let shouldReturn = false;\n\n              for (let i = 0; i < pair.gauge.bribesEarned.length; i++) {\n                if (BigNumber(pair.gauge.bribesEarned[i].earned).gt(0)) {\n                  shouldReturn = true;\n                }\n              }\n\n              return shouldReturn;\n            }\n\n            return false;\n          }).map(pair => {\n            pair.rewardType = 'Bribe';\n            return pair;\n          });\n        }\n\n        const filteredFees = [];\n\n        for (let i = 0; i < pairs.length; i++) {\n          let pair = Object.assign({}, pairs[i]);\n\n          if (BigNumber(pair.claimable0).gt(0) || BigNumber(pair.claimable1).gt(0)) {\n            pair.rewardType = 'Fees';\n            filteredFees.push(pair);\n          }\n        }\n\n        const rewardsEarned = await Promise.all(filteredPairs2.map(async pair => {\n          const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address);\n          const [earned] = await Promise.all([gaugeContract.methods.earned(CONTRACTS.GOV_TOKEN_ADDRESS, account.address).call()]);\n          pair.gauge.rewardsEarned = BigNumber(earned).div(10 ** 18).toFixed(18);\n          return pair;\n        }));\n        const filteredRewards = [];\n\n        for (let j = 0; j < rewardsEarned.length; j++) {\n          let pair = Object.assign({}, rewardsEarned[j]);\n\n          if (pair.gauge && pair.gauge.rewardsEarned && BigNumber(pair.gauge.rewardsEarned).gt(0)) {\n            pair.rewardType = 'Reward';\n            filteredRewards.push(pair);\n          }\n        }\n\n        console.log(filteredBribes);\n        console.log(filteredFees);\n        console.log(filteredRewards);\n        const rewards = {\n          bribes: filteredBribes,\n          fees: filteredFees,\n          rewards: filteredRewards\n        };\n        this.setStore({\n          rewards\n        });\n        this.emitter.emit(ACTIONS.REWARD_BALANCES_RETURNED, rewards);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"claimBribes\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pair,\n          tokenID\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let claimTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Claim rewards for ${pair.token0.symbol}/${pair.token1.symbol}`,\n          verb: 'Rewards Claimed',\n          transactions: [{\n            uuid: claimTXID,\n            description: `Claiming your bribes`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice(); // SUBMIT CLAIM TRANSACTION\n\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n        const sendGauges = [pair.gauge.bribeAddress];\n        const sendTokens = [pair.gauge.bribesEarned.map(bribe => {\n          return bribe.token.address;\n        })];\n\n        this._callContractWait(web3, gaugesContract, 'claimBribes', [sendGauges, sendTokens, tokenID], account, gasPrice, null, null, claimTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this.getRewardBalances({\n            content: {\n              tokenID\n            }\n          });\n          this.emitter.emit(ACTIONS.CLAIM_REWARD_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"claimAllRewards\", async payload => {\n      try {\n        const context = this;\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pairs,\n          tokenID\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let claimTXID = this.getTXUUID();\n        let feeClaimTXIDs = [];\n        let rewardClaimTXIDs = [];\n        let bribePairs = pairs.filter(pair => {\n          return pair.rewardType === 'Bribe';\n        });\n        let feePairs = pairs.filter(pair => {\n          return pair.rewardType === 'Fees';\n        });\n        let rewardPairs = pairs.filter(pair => {\n          return pair.rewardType === 'Reward';\n        });\n        const sendGauges = bribePairs.map(pair => {\n          return pair.gauge.bribeAddress;\n        });\n        const sendTokens = bribePairs.map(pair => {\n          return pair.gauge.bribesEarned.map(bribe => {\n            return bribe.token.address;\n          });\n        });\n\n        if (bribePairs.length == 0 && feePairs.length == 0 && rewardPairs.length == 0) {\n          this.emitter.emit(ACTIONS.ERROR, 'Nothing to claim');\n          this.emitter.emit(ACTIONS.CLAIM_ALL_REWARDS_RETURNED);\n          return;\n        }\n\n        let sendOBJ = {\n          title: `Claim all rewards`,\n          verb: 'Rewards Claimed',\n          transactions: []\n        };\n\n        if (bribePairs.length > 0) {\n          sendOBJ.transactions.push({\n            uuid: claimTXID,\n            description: `Claiming all your available bribes`,\n            status: 'WAITING'\n          });\n        }\n\n        if (feePairs.length > 0) {\n          for (let i = 0; i < feePairs.length; i++) {\n            const newClaimTX = this.getTXUUID();\n            feeClaimTXIDs.push(newClaimTX);\n            sendOBJ.transactions.push({\n              uuid: newClaimTX,\n              description: `Claiming fees for ${feePairs[i].symbol}`,\n              status: 'WAITING'\n            });\n          }\n        }\n\n        if (rewardPairs.length > 0) {\n          for (let i = 0; i < rewardPairs.length; i++) {\n            const newClaimTX = this.getTXUUID();\n            rewardClaimTXIDs.push(newClaimTX);\n            sendOBJ.transactions.push({\n              uuid: newClaimTX,\n              description: `Claiming reward for ${rewardPairs[i].symbol}`,\n              status: 'WAITING'\n            });\n          }\n        }\n\n        this.emitter.emit(ACTIONS.TX_ADDED, sendOBJ);\n        const gasPrice = await stores.accountStore.getGasPrice();\n\n        if (bribePairs.length > 0) {\n          // SUBMIT CLAIM TRANSACTION\n          const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n          const claimPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, gaugesContract, 'claimBribes', [sendGauges, sendTokens, tokenID], account, gasPrice, null, null, claimTXID, err => {\n              if (err) {\n                reject(err);\n                return;\n              }\n\n              resolve();\n            });\n          });\n          await Promise.all([claimPromise]);\n        }\n\n        if (feePairs.length > 0) {\n          for (let i = 0; i < feePairs.length; i++) {\n            const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, feePairs[i].address);\n            const claimPromise = new Promise((resolve, reject) => {\n              context._callContractWait(web3, pairContract, 'claimFees', [], account, gasPrice, null, null, feeClaimTXIDs[i], err => {\n                if (err) {\n                  reject(err);\n                  return;\n                }\n\n                resolve();\n              });\n            });\n            await Promise.all([claimPromise]);\n          }\n        }\n\n        if (rewardPairs.length > 0) {\n          for (let i = 0; i < rewardPairs.length; i++) {\n            const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, rewardPairs[i].gauge.address);\n            const sendTok = [CONTRACTS.GOV_TOKEN_ADDRESS];\n            const rewardPromise = new Promise((resolve, reject) => {\n              context._callContractWait(web3, gaugeContract, 'getReward', [account.address, sendTok], account, gasPrice, null, null, rewardClaimTXIDs[i], err => {\n                if (err) {\n                  reject(err);\n                  return;\n                }\n\n                resolve();\n              });\n            });\n            await Promise.all([rewardPromise]);\n          }\n        }\n\n        this.getRewardBalances({\n          content: {\n            tokenID\n          }\n        });\n        this.emitter.emit(ACTIONS.CLAIM_ALL_REWARDS_RETURNED);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"claimRewards\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pair,\n          tokenID\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let claimTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Claim rewards for ${pair.token0.symbol}/${pair.token1.symbol}`,\n          verb: 'Rewards Claimed',\n          transactions: [{\n            uuid: claimTXID,\n            description: `Claiming your rewards`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice(); // SUBMIT CLAIM TRANSACTION\n\n        const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address);\n        const sendTokens = [CONTRACTS.GOV_TOKEN_ADDRESS];\n\n        this._callContractWait(web3, gaugeContract, 'getReward', [account.address, sendTokens], account, gasPrice, null, null, claimTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this.getRewardBalances({\n            content: {\n              tokenID\n            }\n          });\n          this.emitter.emit(ACTIONS.CLAIM_REWARD_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"claimPairFees\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          pair,\n          tokenID\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let claimTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `Claim fees for ${pair.token0.symbol}/${pair.token1.symbol}`,\n          verb: 'Fees Claimed',\n          transactions: [{\n            uuid: claimTXID,\n            description: `Claiming your fees`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice(); // SUBMIT CLAIM TRANSACTION\n\n        const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address);\n\n        this._callContractWait(web3, pairContract, 'claimFees', [], account, gasPrice, null, null, claimTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          this.getRewardBalances({\n            content: {\n              tokenID\n            }\n          });\n          this.emitter.emit(ACTIONS.CLAIM_REWARD_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"searchWhitelist\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const veToken = this.getStore('veToken');\n        const {\n          search\n        } = payload.content;\n        const voterContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n        const [isWhitelisted, listingFee] = await Promise.all([voterContract.methods.isWhitelisted(search).call(), voterContract.methods.listing_fee().call()]);\n        const token = await this.getBaseAsset(search);\n        token.isWhitelisted = isWhitelisted;\n        token.listingFee = BigNumber(listingFee).div(10 ** veToken.decimals).toFixed(veToken.decimals);\n        this.emitter.emit(ACTIONS.SEARCH_WHITELIST_RETURNED, token);\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"whitelistToken\", async payload => {\n      try {\n        const account = stores.accountStore.getStore(\"account\");\n\n        if (!account) {\n          console.warn('account not found');\n          return null;\n        }\n\n        const web3 = await stores.accountStore.getWeb3Provider();\n\n        if (!web3) {\n          console.warn('web3 not found');\n          return null;\n        }\n\n        const {\n          token,\n          nft\n        } = payload.content; // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n\n        let whitelistTXID = this.getTXUUID();\n        this.emitter.emit(ACTIONS.TX_ADDED, {\n          title: `WHITELIST ${token.symbol}`,\n          verb: 'Token Whitelisted',\n          transactions: [{\n            uuid: whitelistTXID,\n            description: `Whitelisting ${token.symbol}`,\n            status: 'WAITING'\n          }]\n        });\n        const gasPrice = await stores.accountStore.getGasPrice(); // SUBMIT WHITELIST TRANSACTION\n\n        const voterContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS);\n\n        this._callContractWait(web3, voterContract, 'whitelist', [token.address, nft.id], account, gasPrice, null, null, whitelistTXID, async err => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err);\n          }\n\n          window.setTimeout(() => {\n            this.dispatcher.dispatch({\n              type: ACTIONS.SEARCH_WHITELIST,\n              content: {\n                search: token.address\n              }\n            });\n          }, 2);\n          this.emitter.emit(ACTIONS.WHITELIST_TOKEN_RETURNED);\n        });\n      } catch (ex) {\n        console.error(ex);\n        this.emitter.emit(ACTIONS.ERROR, ex);\n      }\n    });\n\n    _defineProperty(this, \"_callContractWait\", (web3, contract, method, params, account, gasPrice, dispatchEvent, dispatchContent, uuid, callback, paddGasCost, sendValue = null) => {\n      // console.log(method)\n      // console.log(params)\n      // if(sendValue) {\n      //   console.log(sendValue)\n      // }\n      // console.log(uuid)\n      //estimate gas\n      this.emitter.emit(ACTIONS.TX_PENDING, {\n        uuid\n      });\n      const gasCost = contract.methods[method](...params).estimateGas({\n        from: account.address,\n        value: sendValue\n      }).then(gasAmount => {\n        const context = this;\n        let sendGasAmount = BigNumber(gasAmount).times(1.5).toFixed(0); // if (paddGasCost) {\n        //   sendGasAmount = BigNumber(sendGasAmount).times(1.15).toFixed(0)\n        // }\n        //\n        // const sendGasAmount = '3000000'\n        // const context = this\n        //\n\n        contract.methods[method](...params).send({\n          from: account.address,\n          gasPrice: web3.utils.toWei(gasPrice, 'gwei'),\n          gas: sendGasAmount,\n          value: sendValue // maxFeePerGas: web3.utils.toWei(gasPrice, \"gwei\"),\n          // maxPriorityFeePerGas: web3.utils.toWei(\"2\", \"gwei\"),\n\n        }).on(\"transactionHash\", function (txHash) {\n          context.emitter.emit(ACTIONS.TX_SUBMITTED, {\n            uuid,\n            txHash\n          });\n        }).on(\"receipt\", function (receipt) {\n          context.emitter.emit(ACTIONS.TX_CONFIRMED, {\n            uuid,\n            txHash: receipt.transactionHash\n          });\n          callback(null, receipt.transactionHash);\n\n          if (dispatchEvent) {\n            context.dispatcher.dispatch({\n              type: dispatchEvent,\n              content: dispatchContent\n            });\n          }\n        }).on(\"error\", function (error) {\n          if (!error.toString().includes(\"-32601\")) {\n            if (error.message) {\n              context.emitter.emit(ACTIONS.TX_REJECTED, {\n                uuid,\n                error: error.message\n              });\n              return callback(error.message);\n            }\n\n            context.emitter.emit(ACTIONS.TX_REJECTED, {\n              uuid,\n              error: error\n            });\n            callback(error);\n          }\n        }).catch(error => {\n          if (!error.toString().includes(\"-32601\")) {\n            if (error.message) {\n              context.emitter.emit(ACTIONS.TX_REJECTED, {\n                uuid,\n                error: error.message\n              });\n              return callback(error.message);\n            }\n\n            context.emitter.emit(ACTIONS.TX_REJECTED, {\n              uuid,\n              error: error\n            });\n            callback(error);\n          }\n        });\n      }).catch(ex => {\n        console.log(ex);\n\n        if (ex.message) {\n          this.emitter.emit(ACTIONS.TX_REJECTED, {\n            uuid,\n            error: ex.message\n          });\n          return callback(ex.message);\n        }\n\n        this.emitter.emit(ACTIONS.TX_REJECTED, {\n          uuid,\n          error: 'Error estimating gas'\n        });\n        callback(ex);\n      });\n    });\n\n    _defineProperty(this, \"_makeBatchRequest\", (web3, callFrom, calls) => {\n      let batch = new web3.BatchRequest();\n      let promises = calls.map(call => {\n        return new Promise((res, rej) => {\n          let req = call.request({\n            from: callFrom\n          }, (err, data) => {\n            if (err) rej(err);else res(data);\n          });\n          batch.add(req);\n        });\n      });\n      batch.execute();\n      return Promise.all(promises);\n    });\n\n    this.dispatcher = dispatcher;\n    this.emitter = emitter;\n    this.store = {\n      baseAssets: [],\n      assets: [],\n      govToken: null,\n      veToken: null,\n      pairs: [],\n      vestNFTs: [],\n      rewards: {\n        bribes: [],\n        fees: [],\n        rewards: []\n      }\n    };\n    dispatcher.register(function (payload) {\n      switch (payload.type) {\n        case ACTIONS.CONFIGURE_SS:\n          this.configure(payload);\n          break;\n\n        case ACTIONS.GET_BALANCES:\n          this.getBalances(payload);\n          break;\n\n        case ACTIONS.SEARCH_ASSET:\n          this.searchBaseAsset(payload);\n          break;\n        // LIQUIDITY\n\n        case ACTIONS.CREATE_PAIR_AND_STAKE:\n          this.createPairStake(payload);\n          break;\n\n        case ACTIONS.CREATE_PAIR_AND_DEPOSIT:\n          this.createPairDeposit(payload);\n          break;\n\n        case ACTIONS.ADD_LIQUIDITY:\n          this.addLiquidity(payload);\n          break;\n\n        case ACTIONS.STAKE_LIQUIDITY:\n          this.stakeLiquidity(payload);\n          break;\n\n        case ACTIONS.ADD_LIQUIDITY_AND_STAKE:\n          this.addLiquidityAndStake(payload);\n          break;\n\n        case ACTIONS.QUOTE_ADD_LIQUIDITY:\n          this.quoteAddLiquidity(payload);\n          break;\n\n        case ACTIONS.GET_LIQUIDITY_BALANCES:\n          this.getLiquidityBalances(payload);\n          break;\n\n        case ACTIONS.REMOVE_LIQUIDITY:\n          this.removeLiquidity(payload);\n          break;\n\n        case ACTIONS.UNSTAKE_AND_REMOVE_LIQUIDITY:\n          this.unstakeAndRemoveLiquidity(payload);\n          break;\n\n        case ACTIONS.QUOTE_REMOVE_LIQUIDITY:\n          this.quoteRemoveLiquidity(payload);\n          break;\n\n        case ACTIONS.UNSTAKE_LIQUIDITY:\n          this.unstakeLiquidity(payload);\n          break;\n\n        case ACTIONS.CREATE_GAUGE:\n          this.createGauge(payload);\n          break;\n        // SWAP\n\n        case ACTIONS.QUOTE_SWAP:\n          this.quoteSwap(payload);\n          break;\n\n        case ACTIONS.SWAP:\n          this.swap(payload);\n          break;\n        // VESTING\n\n        case ACTIONS.GET_VEST_NFTS:\n          this.getVestNFTs(payload);\n          break;\n\n        case ACTIONS.CREATE_VEST:\n          this.createVest(payload);\n          break;\n\n        case ACTIONS.INCREASE_VEST_AMOUNT:\n          this.increaseVestAmount(payload);\n          break;\n\n        case ACTIONS.INCREASE_VEST_DURATION:\n          this.increaseVestDuration(payload);\n          break;\n\n        case ACTIONS.WITHDRAW_VEST:\n          this.withdrawVest(payload);\n          break;\n        //VOTE\n\n        case ACTIONS.VOTE:\n          this.vote(payload);\n          break;\n\n        case ACTIONS.GET_VEST_VOTES:\n          this.getVestVotes(payload);\n          break;\n\n        case ACTIONS.CREATE_BRIBE:\n          this.createBribe(payload);\n          break;\n\n        case ACTIONS.GET_VEST_BALANCES:\n          this.getVestBalances(payload);\n          break;\n        //REWARDS\n\n        case ACTIONS.GET_REWARD_BALANCES:\n          this.getRewardBalances(payload);\n          break;\n\n        case ACTIONS.CLAIM_BRIBE:\n          this.claimBribes(payload);\n          break;\n\n        case ACTIONS.CLAIM_PAIR_FEES:\n          this.claimPairFees(payload);\n          break;\n\n        case ACTIONS.CLAIM_REWARD:\n          this.claimRewards(payload);\n          break;\n\n        case ACTIONS.CLAIM_ALL_REWARDS:\n          this.claimAllRewards(payload);\n          break;\n        //WHITELIST\n\n        case ACTIONS.SEARCH_WHITELIST:\n          this.searchWhitelist(payload);\n          break;\n\n        case ACTIONS.WHITELIST_TOKEN:\n          this.whitelistToken(payload);\n          break;\n\n        default:\n          {}\n      }\n    }.bind(this));\n  } //\n  // _getMulticallWatcher = (web3, calls) => {\n  //\n  // }\n\n\n}\n\nexport default Store;","map":{"version":3,"sources":["/Users/pierremarieriviere/Code/solidly-master/stores/stableSwapStore.js"],"names":["async","MAX_UINT256","ZERO_ADDRESS","ACTIONS","CONTRACTS","v4","uuidv4","moment","formatCurrency","stores","BigNumber","fetch","require","Store","constructor","dispatcher","emitter","index","store","obj","console","log","emit","STORE_UPDATED","address","assets","length","theAsset","filter","ass","toLowerCase","id","vestNFTs","getStore","theNFT","vestNFT","web3","accountStore","getWeb3Provider","warn","account","veToken","govToken","vestingContract","eth","Contract","VE_TOKEN_ABI","VE_TOKEN_ADDRESS","nftsLength","methods","balanceOf","call","arr","Array","from","parseInt","v","i","nfts","Promise","all","map","idx","tokenIndex","tokenOfOwnerByIndex","locked","lockValue","balanceOfNFT","lockEnds","end","lockAmount","amount","div","decimals","toFixed","setStore","nft","ex","newVestNFTs","UPDATED","pairAddress","pairs","thePair","pair","pc","PAIR_ABI","totalSupply","reserve0","reserve1","returnPair","balance","token0","token1","pairContract","gaugesContract","VOTER_ABI","VOTER_ADDRESS","totalWeight","symbol","stable","gaugeAddress","gaugeWeight","claimable0","claimable1","gauges","weights","token0Contract","ERC20_ABI","token1Contract","token0Symbol","token0Decimals","token0Balance","token1Symbol","token1Decimals","token1Balance","isStable","gaugeContract","GAUGE_ABI","gaugeBalance","bribeAddress","bribes","bribeContract","BRIBE_ABI","tokensLength","rewardsListLength","arry","tokenAddress","rewards","token","getBaseAsset","rewardRate","rewardAmount","times","gauge","weight","weightPercent","push","addressA","addressB","stab","WFTM_ADDRESS","factoryContract","FACTORY_ABI","FACTORY_ADDRESS","getPair","asset","localBaseAssets","localBaseAssetsString","localStorage","getItem","JSON","parse","setItem","stringify","baseAssets","local","BASE_ASSETS_UPDATED","save","getBalance","theBaseAsset","as","baseAssetContract","name","newBaseAsset","logoURI","getLocalAssets","storeBaseAssets","payload","_getGovTokenBase","_getVeTokenBase","_getBaseAssets","routeAssets","_getRouteAssets","_getPairs","CONFIGURED_SS","setTimeout","dispatch","type","GET_BALANCES","ERROR","response","process","env","NEXT_PUBLIC_API","method","headers","NEXT_PUBLIC_API_TOKEN","baseAssetsCall","json","data","nativeFTM","FTM_ADDRESS","FTM_DECIMALS","FTM_LOGO","FTM_NAME","FTM_SYMBOL","unshift","routeAssetsCall","pairsCall","GOV_TOKEN_ADDRESS","GOV_TOKEN_NAME","GOV_TOKEN_SYMBOL","GOV_TOKEN_DECIMALS","GOV_TOKEN_LOGO","VE_TOKEN_NAME","VE_TOKEN_SYMBOL","VE_TOKEN_DECIMALS","VE_TOKEN_LOGO","_getGovTokenInfo","_getBaseAssetInfo","_getPairInfo","error","veTokenContract","GOV_TOKEN_ABI","_getVestNFTs","overridePairs","multicall","getMulticall","allPairsLength","ps","reserves","aggregate","getReserves","ps1","bribe","gaugebribes","voterContract","baseAssetsBalances","bal","isWhitelisted","assetContract","content","ASSET_SEARCHED","context","amount0","amount1","slippage","toki0","toki1","pairFor","updatePairsCall","allowance0TXID","getTXUUID","allowance1TXID","depositTXID","createGaugeTXID","stakeAllowanceTXID","stakeTXID","TX_ADDED","title","verb","transactions","uuid","description","status","allowance0","allowance1","_getDepositAllowance","lt","TX_STATUS","gasPrice","getGasPrice","allowanceCallsPromises","tokenContract","tokenPromise","resolve","reject","_callContractWait","ROUTER_ADDRESS","err","done","sendSlippage","minus","sendAmount0","sendAmount1","deadline","add","unix","sendAmount0Min","sendAmount1Min","func","params","sendValue","routerContract","ROUTER_ABI","tok0","tok1","getPairByAddress","stakeAllowance","_getStakeAllowance","allowanceCallsPromise","stakePromise","sendTok","PAIR_CREATED","ms","minLiquidity","LIQUIDITY_ADDED","LIQUIDITY_STAKED","ADD_LIQUIDITY_AND_STAKED","allowance","addy0","addy1","res","quoteAddLiquidity","returnVal","inputs","output","liquidity","QUOTE_ADD_LIQUIDITY_RETURNED","balanceCalls","poolBalance","pool","GET_LIQUIDITY_BALANCES_RETURNED","allowanceTXID","withdrawTXID","_getWithdrawAllowance","sendAmount","quoteRemove","quoteRemoveLiquidity","amountA","amountB","LIQUIDITY_REMOVED","unstakeTXID","REMOVE_LIQUIDITY_AND_UNSTAKED","LIQUIDITY_UNSTAKED","withdrawAmount","sendWithdrawAmount","QUOTE_REMOVE_LIQUIDITY_RETURNED","CREATE_GAUGE_RETURNED","txUUID","fromAsset","toAsset","fromAmount","sendFromAmount","includesRouteAddress","amountOuts","routeAsset","routes","to","flat","receiveAmounts","route","getAmountsOut","finalValue","bestAmountOut","ret","reduce","best","current","gt","totalRatio","amountIn","amountOut","amIn","reserveA","amOut","reserveB","ratio","priceImpact","returnValue","QUOTE_SWAP_RETURNED","toAmount","quote","swapTXID","_getSwapAllowance","sendMinAmountOut","_getSpecificAssetInfo","SWAP_RETURNED","assetAddress","ba","VEST_NFTS_RETURNED","unlockTime","vestTXID","unlockString","format","_getVestAllowance","getNFTByID","CREATE_VEST_RETURNED","tokenID","_updateVestNFTByID","INCREASE_VEST_AMOUNT_RETURNED","INCREASE_VEST_DURATION_RETURNED","WITHDRAW_VEST_RETURNED","votes","voteTXID","onlyVotes","vote","value","tokens","voteCounts","VOTE_RETURNED","filteredPairs","calls","totalVotes","curr","acc","num","toNumber","plus","votePercent","VEST_VOTES_RETURNED","bribeTXID","_getBribeAllowance","BRIBE_CREATED","bribesEarned","earned","VEST_BALANCES_RETURNED","filteredPairs2","filteredBribes","shouldReturn","rewardType","filteredFees","Object","assign","rewardsEarned","filteredRewards","j","fees","REWARD_BALANCES_RETURNED","claimTXID","sendGauges","sendTokens","getRewardBalances","CLAIM_REWARD_RETURNED","feeClaimTXIDs","rewardClaimTXIDs","bribePairs","feePairs","rewardPairs","CLAIM_ALL_REWARDS_RETURNED","sendOBJ","newClaimTX","claimPromise","rewardPromise","search","listingFee","listing_fee","SEARCH_WHITELIST_RETURNED","whitelistTXID","window","SEARCH_WHITELIST","WHITELIST_TOKEN_RETURNED","contract","dispatchEvent","dispatchContent","callback","paddGasCost","TX_PENDING","gasCost","estimateGas","then","gasAmount","sendGasAmount","send","utils","toWei","gas","on","txHash","TX_SUBMITTED","receipt","TX_CONFIRMED","transactionHash","toString","includes","message","TX_REJECTED","catch","callFrom","batch","BatchRequest","promises","rej","req","request","execute","register","CONFIGURE_SS","configure","getBalances","SEARCH_ASSET","searchBaseAsset","CREATE_PAIR_AND_STAKE","createPairStake","CREATE_PAIR_AND_DEPOSIT","createPairDeposit","ADD_LIQUIDITY","addLiquidity","STAKE_LIQUIDITY","stakeLiquidity","ADD_LIQUIDITY_AND_STAKE","addLiquidityAndStake","QUOTE_ADD_LIQUIDITY","GET_LIQUIDITY_BALANCES","getLiquidityBalances","REMOVE_LIQUIDITY","removeLiquidity","UNSTAKE_AND_REMOVE_LIQUIDITY","unstakeAndRemoveLiquidity","QUOTE_REMOVE_LIQUIDITY","UNSTAKE_LIQUIDITY","unstakeLiquidity","CREATE_GAUGE","createGauge","QUOTE_SWAP","quoteSwap","SWAP","swap","GET_VEST_NFTS","getVestNFTs","CREATE_VEST","createVest","INCREASE_VEST_AMOUNT","increaseVestAmount","INCREASE_VEST_DURATION","increaseVestDuration","WITHDRAW_VEST","withdrawVest","VOTE","GET_VEST_VOTES","getVestVotes","CREATE_BRIBE","createBribe","GET_VEST_BALANCES","getVestBalances","GET_REWARD_BALANCES","CLAIM_BRIBE","claimBribes","CLAIM_PAIR_FEES","claimPairFees","CLAIM_REWARD","claimRewards","CLAIM_ALL_REWARDS","claimAllRewards","searchWhitelist","WHITELIST_TOKEN","whitelistToken","bind"],"mappings":"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","sourcesContent":["import async from \"promise-async\"\nimport {\n  MAX_UINT256,\n  ZERO_ADDRESS,\n  ACTIONS,\n  CONTRACTS\n} from \"./constants\"\nimport { v4 as uuidv4 } from 'uuid'\n\nimport * as moment from \"moment\"\nimport { formatCurrency } from '../utils'\nimport stores from \"./\"\n\nimport BigNumber from \"bignumber.js\"\nconst fetch = require(\"node-fetch\")\n\nclass Store {\n  constructor(dispatcher, emitter) {\n    this.dispatcher = dispatcher\n    this.emitter = emitter\n\n    this.store = {\n      baseAssets: [],\n      assets: [],\n      govToken: null,\n      veToken: null,\n      pairs: [],\n      vestNFTs: [],\n      rewards: {\n        bribes: [],\n        fees: [],\n        rewards: []\n      },\n    }\n\n    dispatcher.register(\n      function (payload) {\n        switch (payload.type) {\n          case ACTIONS.CONFIGURE_SS:\n            this.configure(payload)\n            break\n          case ACTIONS.GET_BALANCES:\n            this.getBalances(payload)\n            break\n          case ACTIONS.SEARCH_ASSET:\n            this.searchBaseAsset(payload)\n            break\n\n          // LIQUIDITY\n          case ACTIONS.CREATE_PAIR_AND_STAKE:\n            this.createPairStake(payload)\n            break\n          case ACTIONS.CREATE_PAIR_AND_DEPOSIT:\n            this.createPairDeposit(payload)\n            break\n          case ACTIONS.ADD_LIQUIDITY:\n            this.addLiquidity(payload)\n            break\n          case ACTIONS.STAKE_LIQUIDITY:\n            this.stakeLiquidity(payload)\n            break\n          case ACTIONS.ADD_LIQUIDITY_AND_STAKE:\n            this.addLiquidityAndStake(payload)\n            break\n          case ACTIONS.QUOTE_ADD_LIQUIDITY:\n            this.quoteAddLiquidity(payload)\n            break\n          case ACTIONS.GET_LIQUIDITY_BALANCES:\n            this.getLiquidityBalances(payload)\n            break\n          case ACTIONS.REMOVE_LIQUIDITY:\n            this.removeLiquidity(payload)\n            break\n          case ACTIONS.UNSTAKE_AND_REMOVE_LIQUIDITY:\n            this.unstakeAndRemoveLiquidity(payload)\n            break\n          case ACTIONS.QUOTE_REMOVE_LIQUIDITY:\n            this.quoteRemoveLiquidity(payload)\n            break\n          case ACTIONS.UNSTAKE_LIQUIDITY:\n            this.unstakeLiquidity(payload)\n            break\n          case ACTIONS.CREATE_GAUGE:\n            this.createGauge(payload)\n            break;\n\n          // SWAP\n          case ACTIONS.QUOTE_SWAP:\n            this.quoteSwap(payload)\n            break\n          case ACTIONS.SWAP:\n            this.swap(payload)\n            break\n\n          // VESTING\n          case ACTIONS.GET_VEST_NFTS:\n            this.getVestNFTs(payload)\n            break\n          case ACTIONS.CREATE_VEST:\n            this.createVest(payload)\n            break\n          case ACTIONS.INCREASE_VEST_AMOUNT:\n            this.increaseVestAmount(payload)\n            break\n          case ACTIONS.INCREASE_VEST_DURATION:\n            this.increaseVestDuration(payload)\n            break\n          case ACTIONS.WITHDRAW_VEST:\n            this.withdrawVest(payload)\n            break\n\n          //VOTE\n          case ACTIONS.VOTE:\n            this.vote(payload)\n            break\n          case ACTIONS.GET_VEST_VOTES:\n            this.getVestVotes(payload)\n            break\n          case ACTIONS.CREATE_BRIBE:\n            this.createBribe(payload)\n            break\n          case ACTIONS.GET_VEST_BALANCES:\n            this.getVestBalances(payload)\n            break\n\n          //REWARDS\n          case ACTIONS.GET_REWARD_BALANCES:\n            this.getRewardBalances(payload)\n            break\n          case ACTIONS.CLAIM_BRIBE:\n            this.claimBribes(payload)\n            break\n          case ACTIONS.CLAIM_PAIR_FEES:\n            this.claimPairFees(payload)\n            break\n          case ACTIONS.CLAIM_REWARD:\n            this.claimRewards(payload)\n            break\n          case ACTIONS.CLAIM_ALL_REWARDS:\n            this.claimAllRewards(payload)\n            break;\n\n          //WHITELIST\n          case ACTIONS.SEARCH_WHITELIST:\n            this.searchWhitelist(payload)\n            break;\n          case ACTIONS.WHITELIST_TOKEN:\n            this.whitelistToken(payload)\n            break;\n          default: {\n          }\n        }\n      }.bind(this),\n    )\n  }\n\n  getStore = (index) => {\n    return this.store[index]\n  }\n\n  setStore = (obj) => {\n    this.store = { ...this.store, ...obj }\n    console.log(this.store)\n    return this.emitter.emit(ACTIONS.STORE_UPDATED)\n  }\n\n\n  // COMMON GETTER FUNCTIONS Assets, BaseAssets, Pairs etc\n  getAsset = (address) => {\n    const assets = this.store.assets\n    if (!assets || assets.length === 0) {\n      return null\n    }\n\n    let theAsset = assets.filter((ass) => {\n      if (!ass) {\n        return false\n      }\n      return ass.address.toLowerCase() === address.toLowerCase()\n    })\n\n    if (!theAsset || theAsset.length === 0) {\n      return null\n    }\n\n    return theAsset[0]\n  }\n\n  getNFTByID = async (id) => {\n    try {\n      const vestNFTs = this.getStore('vestNFTs')\n      let theNFT = vestNFTs.filter((vestNFT) => {\n        return (vestNFT.id == id)\n      })\n\n      if(theNFT.length > 0) {\n        return theNFT[0]\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const veToken = this.getStore('veToken')\n      const govToken = this.getStore('govToken')\n\n      const vestingContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS)\n\n      const nftsLength = await vestingContract.methods.balanceOf(account.address).call()\n      const arr = Array.from({length: parseInt(nftsLength)}, (v, i) => i)\n\n      const nfts = await Promise.all(\n        arr.map(async (idx) => {\n\n          const tokenIndex = await vestingContract.methods.tokenOfOwnerByIndex(account.address, idx).call()\n          const locked = await vestingContract.methods.locked(tokenIndex).call()\n          const lockValue = await vestingContract.methods.balanceOfNFT(tokenIndex).call()\n\n          // probably do some decimals math before returning info. Maybe get more info. I don't know what it returns.\n          return {\n            id: tokenIndex,\n            lockEnds: locked.end,\n            lockAmount: BigNumber(locked.amount).div(10**govToken.decimals).toFixed(govToken.decimals),\n            lockValue: BigNumber(lockValue).div(10**veToken.decimals).toFixed(veToken.decimals)\n          }\n        })\n      )\n\n      this.setStore({ vestNFTs: nfts })\n\n      theNFT = nfts.filter((nft) => {\n        return nft.id == id\n      })\n\n      if(theNFT.length > 0) {\n        return theNFT[0]\n      }\n\n      return null\n    } catch(ex) {\n      console.log(ex)\n      return null\n    }\n  }\n\n  _updateVestNFTByID = async (id) => {\n    try {\n      const vestNFTs = this.getStore('vestNFTs')\n      let theNFT = vestNFTs.filter((vestNFT) => {\n        return (vestNFT.id == id)\n      })\n\n      if(theNFT.length == 0) {\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const veToken = this.getStore('veToken')\n      const govToken = this.getStore('govToken')\n\n      const vestingContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS)\n\n      const locked = await vestingContract.methods.locked(id).call()\n      const lockValue = await vestingContract.methods.balanceOfNFT(id).call()\n\n      const newVestNFTs = vestNFTs.map((nft) => {\n        if(nft.id == id) {\n          return {\n            id: id,\n            lockEnds: locked.end,\n            lockAmount: BigNumber(locked.amount).div(10**govToken.decimals).toFixed(govToken.decimals),\n            lockValue: BigNumber(lockValue).div(10**veToken.decimals).toFixed(veToken.decimals)\n          }\n        }\n\n        return nft\n      })\n\n      this.setStore({ vestNFTs: newVestNFTs })\n      this.emitter.emit(ACTIONS.UPDATED)\n      return null\n    } catch(ex) {\n      console.log(ex)\n      return null\n    }\n  }\n\n  getPairByAddress = async (pairAddress) => {\n    try {\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const pairs = this.getStore('pairs')\n      let thePair = pairs.filter((pair) => {\n        return (pair.address.toLowerCase() == pairAddress.toLowerCase())\n      })\n\n      if(thePair.length > 0) {\n        const pc = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pairAddress)\n\n        const [ totalSupply, reserve0, reserve1, balanceOf ] = await Promise.all([\n          pc.methods.totalSupply().call(),\n          pc.methods.reserve0().call(),\n          pc.methods.reserve1().call(),\n          pc.methods.balanceOf(account.address).call(),\n        ])\n\n        const returnPair = thePair[0]\n        returnPair.balance = BigNumber(balanceOf).div(10**returnPair.decimals).toFixed(parseInt(returnPair.decimals))\n        returnPair.totalSupply = BigNumber(totalSupply).div(10**returnPair.decimals).toFixed(parseInt(returnPair.decimals))\n        returnPair.reserve0 = BigNumber(reserve0).div(10**returnPair.token0.decimals).toFixed(parseInt(returnPair.token0.decimals))\n        returnPair.reserve1 = BigNumber(reserve1).div(10**returnPair.token1.decimals).toFixed(parseInt(returnPair.token1.decimals))\n\n        return returnPair\n      }\n\n      const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pairAddress)\n      const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      const [ totalWeight ] = await Promise.all([\n        gaugesContract.methods.totalWeight().call()\n      ])\n\n      const [ token0, token1, totalSupply, symbol, reserve0, reserve1, decimals, balanceOf, stable, gaugeAddress, gaugeWeight, claimable0, claimable1 ] = await Promise.all([\n        pairContract.methods.token0().call(),\n        pairContract.methods.token1().call(),\n        pairContract.methods.totalSupply().call(),\n        pairContract.methods.symbol().call(),\n        pairContract.methods.reserve0().call(),\n        pairContract.methods.reserve1().call(),\n        pairContract.methods.decimals().call(),\n        pairContract.methods.balanceOf(account.address).call(),\n        pairContract.methods.stable().call(),\n        gaugesContract.methods.gauges(pairAddress).call(),\n        gaugesContract.methods.weights(pairAddress).call(),\n        pairContract.methods.claimable0(account.address).call(),\n        pairContract.methods.claimable1(account.address).call()\n      ])\n\n      const token0Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0)\n      const token1Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1)\n\n      const [ token0Symbol, token0Decimals, token0Balance, token1Symbol, token1Decimals, token1Balance ] = await Promise.all([\n        token0Contract.methods.symbol().call(),\n        token0Contract.methods.decimals().call(),\n        token0Contract.methods.balanceOf(account.address).call(),\n        token1Contract.methods.symbol().call(),\n        token1Contract.methods.decimals().call(),\n        token1Contract.methods.balanceOf(account.address).call(),\n      ])\n\n      thePair = {\n        address: pairAddress,\n        symbol: symbol,\n        decimals: parseInt(decimals),\n        isStable: stable,\n        token0: {\n          address: token0,\n          symbol: token0Symbol,\n          balance: BigNumber(token0Balance).div(10**token0Decimals).toFixed(parseInt(token0Decimals)),\n          decimals: parseInt(token0Decimals)\n        },\n        token1: {\n          address: token1,\n          symbol: token1Symbol,\n          balance: BigNumber(token1Balance).div(10**token1Decimals).toFixed(parseInt(token1Decimals)),\n          decimals: parseInt(token1Decimals)\n        },\n        balance: BigNumber(balanceOf).div(10**decimals).toFixed(parseInt(decimals)),\n        totalSupply: BigNumber(totalSupply).div(10**decimals).toFixed(parseInt(decimals)),\n        reserve0: BigNumber(reserve0).div(10**token0Decimals).toFixed(parseInt(token0Decimals)),\n        reserve1: BigNumber(reserve1).div(10**token1Decimals).toFixed(parseInt(token1Decimals)),\n        claimable0: BigNumber(claimable0).div(10**token0Decimals).toFixed(parseInt(token0Decimals)),\n        claimable1: BigNumber(claimable1).div(10**token1Decimals).toFixed(parseInt(token1Decimals))\n      }\n\n      if(gaugeAddress !== ZERO_ADDRESS) {\n        const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, gaugeAddress)\n\n        const [ totalSupply, gaugeBalance, bribeAddress ] = await Promise.all([\n          gaugeContract.methods.totalSupply().call(),\n          gaugeContract.methods.balanceOf(account.address).call(),\n          gaugesContract.methods.bribes(gaugeAddress).call()\n        ])\n\n        const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, bribeAddress)\n\n        const tokensLength = await bribeContract.methods.rewardsListLength().call()\n        const arry = Array.from({length: parseInt(tokensLength)}, (v, i) => i)\n\n        const bribes = await Promise.all(\n          arry.map(async (idx) => {\n\n            const tokenAddress = await bribeContract.methods.rewards(idx).call()\n            const token = await this.getBaseAsset(tokenAddress)\n\n            const [ rewardRate ] = await Promise.all([\n              bribeContract.methods.rewardRate(tokenAddress).call(),\n            ])\n\n            return {\n              token: token,\n              rewardRate: BigNumber(rewardRate).div(10**token.decimals).toFixed(token.decimals),\n              rewardAmount: BigNumber(rewardRate).times(604800).div(10**token.decimals).toFixed(token.decimals)\n            }\n\n          })\n        )\n\n        thePair.gauge = {\n          address: gaugeAddress,\n          bribeAddress: bribeAddress,\n          decimals: 18,\n          balance: BigNumber(gaugeBalance).div(10**18).toFixed(18),\n          totalSupply: BigNumber(totalSupply).div(10**18).toFixed(18),\n          weight: BigNumber(gaugeWeight).div(10**18).toFixed(18),\n          weightPercent: BigNumber(gaugeWeight).times(100).div(totalWeight).toFixed(2),\n          bribes: bribes,\n        }\n      }\n\n      pairs.push(thePair)\n      this.setStore({ pairs: pairs })\n\n      return thePair\n    } catch(ex) {\n      console.log(ex)\n      return null\n    }\n  }\n\n  getPair = async (addressA, addressB, stab) => {\n\n    if(addressA === 'FTM') {\n      addressA = CONTRACTS.WFTM_ADDRESS\n    }\n    if(addressB === 'FTM') {\n      addressB = CONTRACTS.WFTM_ADDRESS\n    }\n\n    const web3 = await stores.accountStore.getWeb3Provider()\n    if (!web3) {\n      console.warn('web3 not found')\n      return null\n    }\n    const account = stores.accountStore.getStore(\"account\")\n    if (!account) {\n      console.warn('account not found')\n      return null\n    }\n\n    const pairs = this.getStore('pairs')\n    let thePair = pairs.filter((pair) => {\n      return ((pair.token0.address.toLowerCase() == addressA.toLowerCase() && pair.token1.address.toLowerCase() == addressB.toLowerCase() && pair.isStable == stab) ||\n      (pair.token0.address.toLowerCase() == addressB.toLowerCase() && pair.token1.address.toLowerCase() == addressA.toLowerCase() && pair.isStable == stab))\n    })\n    if(thePair.length > 0) {\n\n      const pc = new web3.eth.Contract(CONTRACTS.PAIR_ABI, thePair[0].address)\n\n      const [ totalSupply, reserve0, reserve1, balanceOf ] = await Promise.all([\n        pc.methods.totalSupply().call(),\n        pc.methods.reserve0().call(),\n        pc.methods.reserve1().call(),\n        pc.methods.balanceOf(account.address).call(),\n      ])\n\n      const returnPair = thePair[0]\n      returnPair.balance = BigNumber(balanceOf).div(10**returnPair.decimals).toFixed(parseInt(returnPair.decimals))\n      returnPair.totalSupply = BigNumber(totalSupply).div(10**returnPair.decimals).toFixed(parseInt(returnPair.decimals))\n      returnPair.reserve0 = BigNumber(reserve0).div(10**returnPair.token0.decimals).toFixed(parseInt(returnPair.token0.decimals))\n      returnPair.reserve1 = BigNumber(reserve1).div(10**returnPair.token1.decimals).toFixed(parseInt(returnPair.token1.decimals))\n\n      return returnPair\n    }\n\n    const factoryContract = new web3.eth.Contract(CONTRACTS.FACTORY_ABI, CONTRACTS.FACTORY_ADDRESS)\n    const pairAddress = await factoryContract.methods.getPair(addressA, addressB, stab).call()\n\n    if(pairAddress && pairAddress != ZERO_ADDRESS) {\n      const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pairAddress)\n      const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      const [ totalWeight ] = await Promise.all([\n        gaugesContract.methods.totalWeight().call()\n      ])\n\n      const [ token0, token1, totalSupply, symbol, reserve0, reserve1, decimals, balanceOf, stable, gaugeAddress, gaugeWeight, claimable0, claimable1 ] = await Promise.all([\n        pairContract.methods.token0().call(),\n        pairContract.methods.token1().call(),\n        pairContract.methods.totalSupply().call(),\n        pairContract.methods.symbol().call(),\n        pairContract.methods.reserve0().call(),\n        pairContract.methods.reserve1().call(),\n        pairContract.methods.decimals().call(),\n        pairContract.methods.balanceOf(account.address).call(),\n        pairContract.methods.stable().call(),\n        gaugesContract.methods.gauges(pairAddress).call(),\n        gaugesContract.methods.weights(pairAddress).call(),\n        pairContract.methods.claimable0(account.address).call(),\n        pairContract.methods.claimable1(account.address).call()\n      ])\n\n      const token0Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0)\n      const token1Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1)\n\n      const [ token0Symbol, token0Decimals, token0Balance, token1Symbol, token1Decimals, token1Balance ] = await Promise.all([\n        token0Contract.methods.symbol().call(),\n        token0Contract.methods.decimals().call(),\n        token0Contract.methods.balanceOf(account.address).call(),\n        token1Contract.methods.symbol().call(),\n        token1Contract.methods.decimals().call(),\n        token1Contract.methods.balanceOf(account.address).call(),\n      ])\n\n      thePair = {\n        address: pairAddress,\n        symbol: symbol,\n        decimals: parseInt(decimals),\n        isStable: stable,\n        token0: {\n          address: token0,\n          symbol: token0Symbol,\n          balance: BigNumber(token0Balance).div(10**token0Decimals).toFixed(parseInt(token0Decimals)),\n          decimals: parseInt(token0Decimals)\n        },\n        token1: {\n          address: token1,\n          symbol: token1Symbol,\n          balance: BigNumber(token1Balance).div(10**token1Decimals).toFixed(parseInt(token1Decimals)),\n          decimals: parseInt(token1Decimals)\n        },\n        balance: BigNumber(balanceOf).div(10**decimals).toFixed(parseInt(decimals)),\n        totalSupply: BigNumber(totalSupply).div(10**decimals).toFixed(parseInt(decimals)),\n        reserve0: BigNumber(reserve0).div(10**token0Decimals).toFixed(parseInt(token0Decimals)),\n        reserve1: BigNumber(reserve1).div(10**token1Decimals).toFixed(parseInt(token1Decimals)),\n        claimable0: BigNumber(claimable0).div(10**token0Decimals).toFixed(parseInt(token0Decimals)),\n        claimable1: BigNumber(claimable1).div(10**token1Decimals).toFixed(parseInt(token1Decimals))\n      }\n\n      if(gaugeAddress !== ZERO_ADDRESS) {\n        const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, gaugeAddress)\n\n        const [ totalSupply, gaugeBalance, bribeAddress ] = await Promise.all([\n          gaugeContract.methods.totalSupply().call(),\n          gaugeContract.methods.balanceOf(account.address).call(),\n          gaugesContract.methods.bribes(gaugeAddress).call()\n        ])\n\n        const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, bribeAddress)\n\n        const tokensLength = await bribeContract.methods.rewardsListLength().call()\n        const arry = Array.from({length: parseInt(tokensLength)}, (v, i) => i)\n\n        const bribes = await Promise.all(\n          arry.map(async (idx) => {\n\n            const tokenAddress = await bribeContract.methods.rewards(idx).call()\n            const token = await this.getBaseAsset(tokenAddress)\n\n            const [ rewardRate ] = await Promise.all([\n              bribeContract.methods.rewardRate(tokenAddress).call(),\n            ])\n\n            return {\n              token: token,\n              rewardRate: BigNumber(rewardRate).div(10**token.decimals).toFixed(token.decimals),\n              rewardAmount: BigNumber(rewardRate).times(604800).div(10**token.decimals).toFixed(token.decimals)\n            }\n          })\n        )\n\n        thePair.gauge = {\n          address: gaugeAddress,\n          bribeAddress: bribeAddress,\n          decimals: 18,\n          balance: BigNumber(gaugeBalance).div(10**18).toFixed(18),\n          totalSupply: BigNumber(totalSupply).div(10**18).toFixed(18),\n          weight: BigNumber(gaugeWeight).div(10**18).toFixed(18),\n          weightPercent: BigNumber(gaugeWeight).times(100).div(totalWeight).toFixed(2),\n          bribes: bribes,\n        }\n      }\n\n      pairs.push(thePair)\n      this.setStore({ pairs: pairs })\n\n      return thePair\n    }\n\n    return null\n  }\n\n  removeBaseAsset = (asset) => {\n    try {\n      let localBaseAssets = []\n      const localBaseAssetsString = localStorage.getItem('stableSwap-assets')\n\n      if(localBaseAssetsString && localBaseAssetsString !== '') {\n        localBaseAssets = JSON.parse(localBaseAssetsString)\n\n        localBaseAssets = localBaseAssets.filter(function( obj ) {\n          return obj.address.toLowerCase() !== asset.address.toLowerCase()\n        })\n\n        localStorage.setItem('stableSwap-assets', JSON.stringify(localBaseAssets))\n\n        let baseAssets = this.getStore('baseAssets')\n        baseAssets = baseAssets.filter(function( obj ) {\n          return obj.address.toLowerCase() !== asset.address.toLowerCase() && asset.local === true\n        })\n\n        this.setStore({ baseAssets: baseAssets })\n        this.emitter.emit(ACTIONS.BASE_ASSETS_UPDATED, baseAssets)\n      }\n    } catch(ex) {\n      console.log(ex)\n      return null\n    }\n  }\n\n  getLocalAssets = () => {\n    try {\n      let localBaseAssets = []\n      const localBaseAssetsString = localStorage.getItem('stableSwap-assets')\n\n      if(localBaseAssetsString && localBaseAssetsString !== '') {\n        localBaseAssets = JSON.parse(localBaseAssetsString)\n      }\n\n      return localBaseAssets\n    } catch(ex) {\n      console.log(ex)\n      return []\n    }\n  }\n\n  getBaseAsset = async (address, save, getBalance) => {\n    try {\n      const baseAssets = this.getStore('baseAssets')\n\n      const theBaseAsset = baseAssets.filter((as) => {\n        return as.address.toLowerCase() === address.toLowerCase()\n      })\n      if(theBaseAsset.length > 0) {\n        return theBaseAsset[0]\n      }\n\n      // not found, so we search the blockchain for it.\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const baseAssetContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, address)\n\n      const [ symbol, decimals, name ] = await Promise.all([\n        baseAssetContract.methods.symbol().call(),\n        baseAssetContract.methods.decimals().call(),\n        baseAssetContract.methods.name().call(),\n      ])\n\n      const newBaseAsset = {\n        address: address,\n        symbol: symbol,\n        name: name,\n        decimals: parseInt(decimals),\n        logoURI: null,\n        local: true\n      }\n\n      if(getBalance) {\n        const account = stores.accountStore.getStore(\"account\")\n        if(account) {\n          const balanceOf = await baseAssetContract.methods.balanceOf(account.address).call()\n          newBaseAsset.balance = BigNumber(balanceOf).div(10**newBaseAsset.decimals).toFixed(newBaseAsset.decimals)\n        }\n      } // GET BACK HERE\n\n      //only save when a user adds it. don't for when we lookup a pair and find he asset.\n      if(save) {\n        let localBaseAssets = this.getLocalAssets()\n        localBaseAssets = [...localBaseAssets, newBaseAsset]\n        localStorage.setItem('stableSwap-assets', JSON.stringify(localBaseAssets))\n\n        const baseAssets = this.getStore('baseAssets')\n        const storeBaseAssets = [...baseAssets, newBaseAsset]\n\n        this.setStore({ baseAssets: storeBaseAssets })\n        this.emitter.emit(ACTIONS.BASE_ASSETS_UPDATED, storeBaseAssets)\n      }\n\n      return newBaseAsset\n    } catch(ex) {\n      console.log(ex)\n      // this.emitter.emit(ACTIONS.ERROR, ex)\n      return null\n    }\n  }\n\n\n\n  // DISPATCHER FUNCTIONS\n  configure = async (payload) => {\n    try {\n      this.setStore({ govToken: this._getGovTokenBase() })\n      this.setStore({ veToken: this._getVeTokenBase() })\n      this.setStore({ baseAssets: await this._getBaseAssets() })\n      this.setStore({ routeAssets: await this._getRouteAssets() })\n      this.setStore({ pairs: await this._getPairs() })\n\n      this.emitter.emit(ACTIONS.UPDATED)\n      this.emitter.emit(ACTIONS.CONFIGURED_SS)\n\n      setTimeout(() => {\n        this.dispatcher.dispatch({ type: ACTIONS.GET_BALANCES })\n      }, 1)\n    } catch (ex) {\n      console.log(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  _getBaseAssets = async () => {\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API}//v1/baseAssets`, {\n      \tmethod: 'get',\n      \theaders: {\n          'Authorization': `Basic ${process.env.NEXT_PUBLIC_API_TOKEN}`,\n        }\n      })\n      const baseAssetsCall = await response.json()\n\n      let baseAssets = baseAssetsCall.data\n\n      const nativeFTM = {\n        address: CONTRACTS.FTM_ADDRESS,\n        decimals: CONTRACTS.FTM_DECIMALS,\n        logoURI: CONTRACTS.FTM_LOGO,\n        name: CONTRACTS.FTM_NAME,\n        symbol: CONTRACTS.FTM_SYMBOL\n      }\n\n      baseAssets.unshift(nativeFTM)\n\n      let localBaseAssets = this.getLocalAssets()\n\n      return [...baseAssets, ...localBaseAssets]\n\n    } catch(ex) {\n      console.log(ex)\n      return []\n    }\n  }\n\n  _getRouteAssets = async () => {\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API}/api/v1/routeAssets`, {\n      \tmethod: 'get',\n      \theaders: {\n          'Authorization': `Basic ${process.env.NEXT_PUBLIC_API_TOKEN}`,\n        }\n      })\n      const routeAssetsCall = await response.json()\n      return routeAssetsCall.data\n    } catch(ex) {\n      console.log(ex)\n      return []\n    }\n  }\n\n  _getPairs = async () => {\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API}/api/v1/pairs`, {\n      \tmethod: 'get',\n      \theaders: {\n          'Authorization': `Basic ${process.env.NEXT_PUBLIC_API_TOKEN}`,\n        }\n      })\n      const pairsCall = await response.json()\n      return pairsCall.data\n    } catch(ex) {\n      console.log(ex)\n      return []\n    }\n  }\n\n  _getGovTokenBase = () => {\n    return {\n      address: CONTRACTS.GOV_TOKEN_ADDRESS,\n      name: CONTRACTS.GOV_TOKEN_NAME,\n      symbol: CONTRACTS.GOV_TOKEN_SYMBOL,\n      decimals: CONTRACTS.GOV_TOKEN_DECIMALS,\n      logoURI: CONTRACTS.GOV_TOKEN_LOGO\n    }\n  }\n\n  _getVeTokenBase = () => {\n    return {\n      address: CONTRACTS.VE_TOKEN_ADDRESS,\n      name: CONTRACTS.VE_TOKEN_NAME,\n      symbol: CONTRACTS.VE_TOKEN_SYMBOL,\n      decimals: CONTRACTS.VE_TOKEN_DECIMALS,\n      logoURI: CONTRACTS.VE_TOKEN_LOGO,\n    }\n  }\n\n  getBalances = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      this._getGovTokenInfo(web3, account)\n      await this._getBaseAssetInfo(web3, account)\n      await this._getPairInfo(web3, account)\n    } catch(ex) {\n      console.log(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  _getVestNFTs = async (web3, account) => {\n    try {\n      const veToken = this.getStore('veToken')\n      const govToken = this.getStore('govToken')\n\n      const vestingContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS)\n\n      const nftsLength = await vestingContract.methods.balanceOf(account.address).call()\n      const arr = Array.from({length: parseInt(nftsLength)}, (v, i) => i)\n\n      const nfts = await Promise.all(\n        arr.map(async (idx) => {\n\n          const tokenIndex = await vestingContract.methods.tokenOfOwnerByIndex(account.address, idx).call()\n          const locked = await vestingContract.methods.locked(tokenIndex).call()\n          const lockValue = await vestingContract.methods.balanceOfNFT(tokenIndex).call()\n\n          // probably do some decimals math before returning info. Maybe get more info. I don't know what it returns.\n          return {\n            id: tokenIndex,\n            lockEnds: locked.end,\n            lockAmount: BigNumber(locked.amount).div(10**govToken.decimals).toFixed(govToken.decimals),\n            lockValue: BigNumber(lockValue).div(10**veToken.decimals).toFixed(veToken.decimals)\n          }\n        })\n      )\n\n      this.setStore({ vestNFTs: nfts })\n      this.emitter.emit(ACTIONS.UPDATED)\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  _getGovTokenInfo = async (web3, account) => {\n    try {\n      const govToken = this.getStore('govToken')\n      if (!govToken) {\n        console.warn('govToken not found')\n        return null\n      }\n\n      const veTokenContract = new web3.eth.Contract(CONTRACTS.GOV_TOKEN_ABI, CONTRACTS.GOV_TOKEN_ADDRESS)\n\n      const [ balanceOf ] = await Promise.all([\n        veTokenContract.methods.balanceOf(account.address).call()\n      ])\n\n      govToken.balanceOf = balanceOf\n      govToken.balance = BigNumber(balanceOf).div(10**govToken.decimals).toFixed(govToken.decimals)\n\n      this.setStore({ govToken })\n      this.emitter.emit(ACTIONS.UPDATED)\n\n      this._getVestNFTs(web3, account)\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n  _getPairInfo = async (web3, account, overridePairs) => {\n    try {\n      const multicall = await stores.accountStore.getMulticall()\n\n      let pairs = []\n\n      if(overridePairs) {\n        pairs = overridePairs\n      } else {\n        pairs = this.getStore('pairs')\n      }\n\n      const factoryContract = new web3.eth.Contract(CONTRACTS.FACTORY_ABI, CONTRACTS.FACTORY_ADDRESS)\n      const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      const [ allPairsLength, totalWeight ] = await Promise.all([\n        factoryContract.methods.allPairsLength().call(),\n        gaugesContract.methods.totalWeight().call()\n      ])\n\n      const ps = await Promise.all(\n        pairs.map(async (pair) => {\n          try {\n            const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address)\n            const token0Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.token0.address)\n            const token1Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.token1.address)\n\n            const token0 = await this.getBaseAsset(pair.token0.address, false, true)\n            const token1 = await this.getBaseAsset(pair.token1.address, false, true)\n\n            const [ totalSupply, reserves, balanceOf, claimable0, claimable1 ] = await multicall.aggregate([\n              pairContract.methods.totalSupply(),\n              pairContract.methods.getReserves(),\n              pairContract.methods.balanceOf(account.address),\n              pairContract.methods.claimable0(account.address),\n              pairContract.methods.claimable1(account.address)\n            ])\n\n            pair.token0 = token0 != null ? token0 : pair.token0\n            pair.token1 = token1 != null ? token1 : pair.token1\n            pair.balance = BigNumber(balanceOf).div(10**pair.decimals).toFixed(parseInt(pair.decimals))\n            pair.totalSupply = BigNumber(totalSupply).div(10**pair.decimals).toFixed(parseInt(pair.decimals))\n            pair.reserve0 = BigNumber(reserves[0]).div(10**pair.token0.decimals).toFixed(parseInt(pair.token0.decimals))\n            pair.reserve1 = BigNumber(reserves[1]).div(10**pair.token1.decimals).toFixed(parseInt(pair.token1.decimals))\n            pair.claimable0 = BigNumber(claimable0).div(10**pair.token0.decimals).toFixed(pair.token0.decimals)\n            pair.claimable1 = BigNumber(claimable1).div(10**pair.token1.decimals).toFixed(pair.token1.decimals)\n\n            return pair\n          } catch (ex) {\n            console.log('EXCEPTION 1')\n            console.log(pair)\n            console.log(ex)\n            return pair\n          }\n        })\n      )\n\n      this.setStore({ pairs: ps })\n      this.emitter.emit(ACTIONS.UPDATED)\n\n\n      const ps1 = await Promise.all(\n        ps.map(async (pair) => {\n          try {\n\n            if(pair.gauge && pair.gauge.address !== ZERO_ADDRESS) {\n              const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address)\n\n              const [ totalSupply, gaugeBalance, gaugeWeight ] = await multicall.aggregate([\n                gaugeContract.methods.totalSupply(),\n                gaugeContract.methods.balanceOf(account.address),\n                gaugesContract.methods.weights(pair.address)\n              ])\n\n              const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, pair.gauge.bribeAddress)\n\n              const bribes = await Promise.all(\n                pair.gauge.bribes.map(async (bribe, idx) => {\n\n                  const [ rewardRate ] = await Promise.all([\n                    bribeContract.methods.rewardRate(bribe.token.address).call(),\n                  ])\n\n                  bribe.rewardRate = BigNumber(rewardRate).div(10**bribe.token.decimals).toFixed(bribe.token.decimals)\n                  bribe.rewardAmount = BigNumber(rewardRate).times(604800).div(10**bribe.token.decimals).toFixed(bribe.token.decimals)\n\n                  return bribe\n                })\n              )\n\n              pair.gauge.balance = BigNumber(gaugeBalance).div(10**18).toFixed(18)\n              pair.gauge.totalSupply = BigNumber(totalSupply).div(10**18).toFixed(18)\n              pair.gauge.reserve0 = pair.totalSupply > 0 ? BigNumber(pair.reserve0).times(pair.gauge.totalSupply).div(pair.totalSupply).toFixed(pair.token0.decimals) : '0'\n              pair.gauge.reserve1 = pair.totalSupply > 0 ? BigNumber(pair.reserve1).times(pair.gauge.totalSupply).div(pair.totalSupply).toFixed(pair.token1.decimals) : '0'\n              pair.gauge.weight = BigNumber(gaugeWeight).div(10**18).toFixed(18)\n              pair.gauge.weightPercent = BigNumber(gaugeWeight).times(100).div(totalWeight).toFixed(2)\n              pair.gaugebribes = bribes\n            }\n\n            return pair\n\n          } catch (ex) {\n            console.log('EXCEPTION 2')\n            console.log(pair)\n            console.log(ex)\n            return pair\n          }\n        })\n      )\n\n      this.setStore({ pairs: ps1 })\n      this.emitter.emit(ACTIONS.UPDATED)\n\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n  _getBaseAssetInfo = async (web3, account) => {\n    try {\n      const baseAssets = this.getStore(\"baseAssets\")\n      if (!baseAssets) {\n        console.warn('baseAssets not found')\n        return null\n      }\n\n      const voterContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      const baseAssetsBalances = await Promise.all(\n        baseAssets.map(async (asset) => {\n          try {\n            if(asset.address === 'FTM') {\n              let bal = await web3.eth.getBalance(account.address)\n              return {\n                balanceOf: bal,\n                isWhitelisted: true\n              }\n            }\n\n            const assetContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, asset.address)\n\n            const [ isWhitelisted, balanceOf ] = await Promise.all([\n              voterContract.methods.isWhitelisted(asset.address).call(),\n              assetContract.methods.balanceOf(account.address).call(),\n            ])\n\n            return {\n              balanceOf,\n              isWhitelisted\n            }\n          } catch(ex) {\n            console.log(\"EXCEPTION 3\")\n            console.log(asset)\n            console.log(ex)\n            return {\n              balanceOf: '0',\n              isWhitelisted: false\n            }\n          }\n        })\n      )\n\n      for (let i = 0; i < baseAssets.length; i++) {\n        baseAssets[i].balance = BigNumber(baseAssetsBalances[i].balanceOf).div(10 ** baseAssets[i].decimals).toFixed(baseAssets[i].decimals)\n        baseAssets[i].isWhitelisted = baseAssetsBalances[i].isWhitelisted\n      }\n\n      this.setStore({ baseAssets })\n      this.emitter.emit(ACTIONS.UPDATED)\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n  searchBaseAsset = async (payload) => {\n    try {\n      let localBaseAssets = []\n      const localBaseAssetsString = localStorage.getItem('stableSwap-assets')\n\n      if(localBaseAssetsString && localBaseAssetsString !== '') {\n        localBaseAssets = JSON.parse(localBaseAssetsString)\n      }\n\n      const theBaseAsset = localBaseAssets.filter((as) => {\n        return as.address.toLowerCase() === payload.content.address.toLowerCase()\n      })\n      if(theBaseAsset.length > 0) {\n        this.emitter.emit(ACTIONS.ASSET_SEARCHED, theBaseAsset)\n        return\n      }\n\n      const baseAssetContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, payload.content.address)\n\n      const [ symbol, decimals, name ] = await Promise.all([\n        baseAssetContract.methods.symbol().call(),\n        baseAssetContract.methods.decimals().call(),\n        baseAssetContract.methods.name().call(),\n      ])\n\n      const newBaseAsset = {\n        address: payload.content.address,\n        symbol: symbol,\n        name: name,\n        decimals: parseInt(decimals)\n      }\n\n      localBaseAssets = [...localBaseAssets, newBaseAsset]\n      localStorage.setItem('stableSwap-assets', JSON.stringify(localBaseAssets))\n\n      const baseAssets = this.getStore('baseAssets')\n      const storeBaseAssets = [...baseAssets, ...localBaseAssets]\n\n      this.setStore({ baseAssets: storeBaseAssets })\n\n      this.emitter.emit(ACTIONS.ASSET_SEARCHED, newBaseAsset)\n    } catch(ex) {\n      console.log(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  createPairStake = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { token0, token1, amount0, amount1, isStable, token, slippage } = payload.content\n\n      let toki0 = token0.address\n      let toki1 = token1.address\n      if(token0.address === 'FTM') {\n        toki0 = CONTRACTS.WFTM_ADDRESS\n      }\n      if(token1.address === 'FTM') {\n        toki1 = CONTRACTS.WFTM_ADDRESS\n      }\n\n      const factoryContract = new web3.eth.Contract(CONTRACTS.FACTORY_ABI, CONTRACTS.FACTORY_ADDRESS)\n      const pairFor = await factoryContract.methods.getPair(toki0, toki1, isStable).call()\n\n      if(pairFor && pairFor != ZERO_ADDRESS) {\n        await context.updatePairsCall(web3, account)\n        this.emitter.emit(ACTIONS.ERROR, 'Pair already exists')\n        return null\n      }\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowance0TXID = this.getTXUUID()\n      let allowance1TXID = this.getTXUUID()\n      let depositTXID = this.getTXUUID()\n      let createGaugeTXID = this.getTXUUID()\n      let stakeAllowanceTXID = this.getTXUUID()\n      let stakeTXID = this.getTXUUID()\n\n      //DOD A CHECK FOR IF THE POOL ALREADY EXISTS\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Create liquidity pool for ${token0.symbol}/${token1.symbol}`, type: 'Liquidity', verb: 'Liquidity Pool Created', transactions: [\n        {\n          uuid: allowance0TXID,\n          description: `Checking your ${token0.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: allowance1TXID,\n          description: `Checking your ${token1.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: depositTXID,\n          description: `Create liquidity pool`,\n          status: 'WAITING'\n        },\n        {\n          uuid: createGaugeTXID,\n          description: `Create gauge`,\n          status: 'WAITING'\n        },\n        {\n          uuid: stakeAllowanceTXID,\n          description: `Checking your pool allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: stakeTXID,\n          description: `Stake LP tokens in the gauge`,\n          status: 'WAITING'\n        }\n      ]})\n\n      let allowance0 = 0\n      let allowance1 = 0\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      if(token0.address !== 'FTM') {\n        allowance0 = await this._getDepositAllowance(web3, token0, account)\n        if(BigNumber(allowance0).lt(amount0)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allow the router to spend your ${token0.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allowance on ${token0.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance0 = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowance0TXID,\n          description: `Allowance on ${token0.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      if(token1.address !== 'FTM') {\n        allowance1 = await this._getDepositAllowance(web3, token1, account)\n        if(BigNumber(allowance1).lt(amount1)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allow the router to spend your ${token1.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allowance on ${token1.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance1 = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowance1TXID,\n          description: `Allowance on ${token1.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance0).lt(amount0)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance0TXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n\n      if(BigNumber(allowance1).lt(amount1)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance1TXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n\n      // SUBMIT DEPOSIT TRANSACTION\n      const sendSlippage = BigNumber(100).minus(slippage).div(100)\n      const sendAmount0 = BigNumber(amount0).times(10**token0.decimals).toFixed(0)\n      const sendAmount1 = BigNumber(amount1).times(10**token1.decimals).toFixed(0)\n      const deadline = ''+moment().add(600, 'seconds').unix()\n      const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10**token0.decimals).toFixed(0)\n      const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10**token1.decimals).toFixed(0)\n\n\n      let func = 'addLiquidity'\n      let params = [token0.address, token1.address, isStable, sendAmount0, sendAmount1, sendAmount0Min, sendAmount1Min, account.address, deadline]\n      let sendValue = null\n\n      if(token0.address === 'FTM') {\n        func = 'addLiquidityFTM'\n        params = [token1.address, isStable, sendAmount1, sendAmount1Min, sendAmount0Min, account.address, deadline]\n        sendValue = sendAmount0\n      }\n      if(token1.address === 'FTM') {\n        func = 'addLiquidityFTM'\n        params = [token0.address, isStable, sendAmount0, sendAmount0Min, sendAmount1Min, account.address, deadline]\n        sendValue = sendAmount1\n      }\n\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n      this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, depositTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        // GET PAIR FOR NEWLY CREATED LIQUIDITY POOL\n        let tok0 = token0.address\n        let tok1 = token1.address\n        if(token0.address === 'FTM') {\n          tok0 = CONTRACTS.WFTM_ADDRESS\n        }\n        if(token1.address === 'FTM') {\n          tok1 = CONTRACTS.WFTM_ADDRESS\n        }\n        const pairFor = await factoryContract.methods.getPair(tok0, tok1, isStable).call()\n\n        // SUBMIT CREATE GAUGE TRANSACTION\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n        this._callContractWait(web3, gaugesContract, 'createGauge', [pairFor], account, gasPrice, null, null, createGaugeTXID, async (err) => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err)\n          }\n\n          const gaugeAddress = await gaugesContract.methods.gauges(pairFor).call()\n\n          const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pairFor)\n          const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, gaugeAddress)\n\n          const balanceOf = await pairContract.methods.balanceOf(account.address).call()\n\n          const pair = await this.getPairByAddress(pairFor)\n          const stakeAllowance = await this._getStakeAllowance(web3, pair, account)\n\n          if(BigNumber(stakeAllowance).lt( BigNumber(balanceOf).div(10**pair.decimals).toFixed(pair.decimals) )) {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: stakeAllowanceTXID,\n              description: `Allow the router to spend your ${pair.symbol}`\n            })\n          } else {\n            this.emitter.emit(ACTIONS.TX_STATUS, {\n              uuid: stakeAllowanceTXID,\n              description: `Allowance on ${pair.symbol} sufficient`,\n              status: 'DONE'\n            })\n          }\n\n          const allowanceCallsPromise = []\n\n          if(BigNumber(stakeAllowance).lt( BigNumber(balanceOf).div(10**pair.decimals).toFixed(pair.decimals)  )) {\n            const stakePromise = new Promise((resolve, reject) => {\n              context._callContractWait(web3, pairContract, 'approve', [pair.gauge.address, MAX_UINT256], account, gasPrice, null, null, stakeAllowanceTXID, (err) => {\n                if (err) {\n                  reject(err)\n                  return\n                }\n\n                resolve()\n              })\n            })\n\n            allowanceCallsPromise.push(stakePromise)\n          }\n\n          const done = await Promise.all(allowanceCallsPromise)\n\n          let sendTok = '0'\n          if(token && token.id) {\n            sendTok = token.id\n          }\n\n          this._callContractWait(web3, gaugeContract, 'deposit', [balanceOf, sendTok], account, gasPrice, null, null, stakeTXID, async (err) => {\n            if (err) {\n              return this.emitter.emit(ACTIONS.ERROR, err)\n            }\n\n            await context.updatePairsCall(web3, account)\n\n            this.emitter.emit(ACTIONS.PAIR_CREATED, pairFor)\n          })\n\n        })\n      }, null, sendValue)\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  createPairDeposit = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { token0, token1, amount0, amount1, isStable, slippage } = payload.content\n\n      let toki0 = token0.address\n      let toki1 = token1.address\n      if(token0.address === 'FTM') {\n        toki0 = CONTRACTS.WFTM_ADDRESS\n      }\n      if(token1.address === 'FTM') {\n        toki1 = CONTRACTS.WFTM_ADDRESS\n      }\n\n\n      const factoryContract = new web3.eth.Contract(CONTRACTS.FACTORY_ABI, CONTRACTS.FACTORY_ADDRESS)\n      const pairFor = await factoryContract.methods.getPair(toki0, toki1, isStable).call()\n\n      if(pairFor && pairFor != ZERO_ADDRESS) {\n        await context.updatePairsCall(web3, account)\n        this.emitter.emit(ACTIONS.ERROR, 'Pair already exists')\n        return null\n      }\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowance0TXID = this.getTXUUID()\n      let allowance1TXID = this.getTXUUID()\n      let depositTXID = this.getTXUUID()\n      let createGaugeTXID = this.getTXUUID()\n\n      //DOD A CHECK FOR IF THE POOL ALREADY EXISTS\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Create liquidity pool for ${token0.symbol}/${token1.symbol}`, type: 'Liquidity', verb: 'Liquidity Pool Created', transactions: [\n        {\n          uuid: allowance0TXID,\n          description: `Checking your ${token0.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: allowance1TXID,\n          description: `Checking your ${token1.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: depositTXID,\n          description: `Create liquidity pool`,\n          status: 'WAITING'\n        },\n        {\n          uuid: createGaugeTXID,\n          description: `Create gauge`,\n          status: 'WAITING'\n        }\n      ]})\n\n      let allowance0 = 0\n      let allowance1 = 0\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      if(token0.address !== 'FTM') {\n        allowance0 = await this._getDepositAllowance(web3, token0, account)\n        if(BigNumber(allowance0).lt(amount0)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allow the router to spend your ${token0.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allowance on ${token0.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance0 = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowance0TXID,\n          description: `Allowance on ${token0.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      if(token1.address !== 'FTM') {\n        allowance1 = await this._getDepositAllowance(web3, token1, account)\n        if(BigNumber(allowance1).lt(amount1)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allow the router to spend your ${token1.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allowance on ${token1.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance1 = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowance1TXID,\n          description: `Allowance on ${token1.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance0).lt(amount0)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance0TXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n\n      if(BigNumber(allowance1).lt(amount1)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance1TXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n\n      // SUBMIT DEPOSIT TRANSACTION\n      const sendSlippage = BigNumber(100).minus(slippage).div(100)\n      const sendAmount0 = BigNumber(amount0).times(10**token0.decimals).toFixed(0)\n      const sendAmount1 = BigNumber(amount1).times(10**token1.decimals).toFixed(0)\n      const deadline = ''+moment().add(600, 'seconds').unix()\n      const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10**token0.decimals).toFixed(0)\n      const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10**token1.decimals).toFixed(0)\n\n\n      let func = 'addLiquidity'\n      let params = [token0.address, token1.address, isStable, sendAmount0, sendAmount1, sendAmount0Min, sendAmount1Min, account.address, deadline]\n      let sendValue = null\n\n      if(token0.address === 'FTM') {\n        func = 'addLiquidityFTM'\n        params = [token1.address, isStable, sendAmount1, sendAmount1Min, sendAmount0Min, account.address, deadline]\n        sendValue = sendAmount0\n      }\n      if(token1.address === 'FTM') {\n        func = 'addLiquidityFTM'\n        params = [token0.address, isStable, sendAmount0, sendAmount0Min, sendAmount1Min, account.address, deadline]\n        sendValue = sendAmount1\n      }\n\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n      this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, depositTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        // GET PAIR FOR NEWLY CREATED LIQUIDITY POOL\n        let tok0 = token0.address\n        let tok1 = token1.address\n        if(token0.address === 'FTM') {\n          tok0 = CONTRACTS.WFTM_ADDRESS\n        }\n        if(token1.address === 'FTM') {\n          tok1 = CONTRACTS.WFTM_ADDRESS\n        }\n        const pairFor = await factoryContract.methods.getPair(tok0, tok1, isStable).call()\n\n        // SUBMIT CREATE GAUGE TRANSACTION\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n        this._callContractWait(web3, gaugesContract, 'createGauge', [pairFor], account, gasPrice, null, null, createGaugeTXID, async (err) => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err)\n          }\n\n          await context.updatePairsCall(web3, account)\n\n          this.emitter.emit(ACTIONS.PAIR_CREATED, pairFor)\n        })\n      }, null, sendValue)\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  updatePairsCall = async (web3, account) => {\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API}/api/v1/updatePairs`, {\n        method: 'get',\n        headers: {\n          'Authorization': `Basic ${process.env.NEXT_PUBLIC_API_TOKEN}`,\n        }\n      })\n      const pairsCall = await response.json()\n      this.setStore({ pairs: pairsCall.data })\n\n      await this._getPairInfo(web3, account, pairsCall.data)\n\n    } catch(ex) {\n      console.log(ex)\n    }\n  }\n\n  sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  getTXUUID = () => {\n    return uuidv4()\n  }\n\n  addLiquidity = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { token0, token1, amount0, amount1, minLiquidity, pair, slippage } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowance0TXID = this.getTXUUID()\n      let allowance1TXID = this.getTXUUID()\n      let depositTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Add liquidity to ${pair.symbol}`, verb: 'Liquidity Added', type: 'Liquidity', transactions: [\n        {\n          uuid: allowance0TXID,\n          description: `Checking your ${token0.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: allowance1TXID,\n          description: `Checking your ${token1.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: depositTXID,\n          description: `Deposit tokens in the pool`,\n          status: 'WAITING'\n        },\n      ]})\n\n      let allowance0 = 0\n      let allowance1 = 0\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      if(token0.address !== 'FTM') {\n        allowance0 = await this._getDepositAllowance(web3, token0, account)\n        if(BigNumber(allowance0).lt(amount0)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allow the router to spend your ${token0.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allowance on ${token0.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance0 = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowance0TXID,\n          description: `Allowance on ${token0.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      if(token1.address !== 'FTM') {\n        allowance1 = await this._getDepositAllowance(web3, token1, account)\n        if(BigNumber(allowance1).lt(amount1)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allow the router to spend your ${token1.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allowance on ${token1.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance1 = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowance1TXID,\n          description: `Allowance on ${token1.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance0).lt(amount0)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance0TXID, (err) => {\n            if (err) {\n              console.log(err)\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n\n      if(BigNumber(allowance1).lt(amount1)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance1TXID, (err) => {\n            if (err) {\n              console.log(err)\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n      // SUBMIT DEPOSIT TRANSACTION\n      const sendSlippage = BigNumber(100).minus(slippage).div(100)\n      const sendAmount0 = BigNumber(amount0).times(10**token0.decimals).toFixed(0)\n      const sendAmount1 = BigNumber(amount1).times(10**token1.decimals).toFixed(0)\n      const deadline = ''+moment().add(600, 'seconds').unix()\n      const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10**token0.decimals).toFixed(0)\n      const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10**token1.decimals).toFixed(0)\n\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n\n      let func = 'addLiquidity'\n      let params = [token0.address, token1.address, pair.isStable, sendAmount0, sendAmount1, sendAmount0Min, sendAmount1Min, account.address, deadline]\n      let sendValue = null\n\n      if(token0.address === 'FTM') {\n        func = 'addLiquidityFTM'\n        params = [token1.address, pair.isStable, sendAmount1, sendAmount1Min, sendAmount0Min, account.address, deadline]\n        sendValue = sendAmount0\n      }\n      if(token1.address === 'FTM') {\n        func = 'addLiquidityFTM'\n        params = [token0.address, pair.isStable, sendAmount0, sendAmount0Min, sendAmount1Min, account.address, deadline]\n        sendValue = sendAmount1\n      }\n\n      this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, depositTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._getPairInfo(web3, account)\n\n        this.emitter.emit(ACTIONS.LIQUIDITY_ADDED)\n      }, null, sendValue)\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  stakeLiquidity = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pair, token } = payload.content\n\n      let stakeAllowanceTXID = this.getTXUUID()\n      let stakeTXID = this.getTXUUID()\n\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Stake ${pair.symbol} in the gauge`, type: 'Liquidity', verb: 'Liquidity Staked', transactions: [\n        {\n          uuid: stakeAllowanceTXID,\n          description: `Checking your ${pair.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: stakeTXID,\n          description: `Stake LP tokens in the gauge`,\n          status: 'WAITING'\n        }\n      ]})\n\n      const stakeAllowance = await this._getStakeAllowance(web3, pair, account)\n\n      const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address)\n      const balanceOf = await pairContract.methods.balanceOf(account.address).call()\n\n      if(BigNumber(stakeAllowance).lt( BigNumber(balanceOf).div(10**pair.decimals).toFixed(pair.decimals) )) {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: stakeAllowanceTXID,\n          description: `Allow the router to spend your ${pair.symbol}`\n        })\n      } else {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: stakeAllowanceTXID,\n          description: `Allowance on ${pair.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n      if(BigNumber(stakeAllowance).lt( BigNumber(balanceOf).div(10**pair.decimals).toFixed(pair.decimals)  )) {\n        const stakePromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, pairContract, 'approve', [pair.gauge.address, MAX_UINT256], account, gasPrice, null, null, stakeAllowanceTXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(stakePromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n\n      const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address)\n\n      let sendTok = '0'\n      if(token && token.id) {\n        sendTok = token.id\n      }\n\n      this._callContractWait(web3, gaugeContract, 'deposit', [balanceOf, sendTok], account, gasPrice, null, null, stakeTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._getPairInfo(web3, account)\n\n        this.emitter.emit(ACTIONS.LIQUIDITY_STAKED)\n      })\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  addLiquidityAndStake = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { token0, token1, amount0, amount1, minLiquidity, pair, token, slippage } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowance0TXID = this.getTXUUID()\n      let allowance1TXID = this.getTXUUID()\n      let stakeAllowanceTXID = this.getTXUUID()\n      let depositTXID = this.getTXUUID()\n      let stakeTXID = this.getTXUUID()\n\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Add liquidity to ${pair.symbol}`, type: 'Liquidity', verb: 'Liquidity Added', transactions: [\n        {\n          uuid: allowance0TXID,\n          description: `Checking your ${token0.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: allowance1TXID,\n          description: `Checking your ${token1.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: stakeAllowanceTXID,\n          description: `Checking your ${pair.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: depositTXID,\n          description: `Deposit tokens in the pool`,\n          status: 'WAITING'\n        },\n        {\n          uuid: stakeTXID,\n          description: `Stake LP tokens in the gauge`,\n          status: 'WAITING'\n        }\n      ]})\n\n      let allowance0 = 0\n      let allowance1 = 0\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      if(token0.address !== 'FTM') {\n        allowance0 = await this._getDepositAllowance(web3, token0, account)\n        if(BigNumber(allowance0).lt(amount0)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allow the router to spend your ${token0.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance0TXID,\n            description: `Allowance on ${token0.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance0 = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowance0TXID,\n          description: `Allowance on ${token0.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      if(token1.address !== 'FTM') {\n        allowance1 = await this._getDepositAllowance(web3, token1, account)\n        if(BigNumber(allowance1).lt(amount1)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allow the router to spend your ${token1.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowance1TXID,\n            description: `Allowance on ${token1.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance1 = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowance1TXID,\n          description: `Allowance on ${token1.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n\n      const stakeAllowance = await this._getStakeAllowance(web3, pair, account)\n\n      if(BigNumber(stakeAllowance).lt(minLiquidity)) {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: stakeAllowanceTXID,\n          description: `Allow the router to spend your ${pair.symbol}`\n        })\n      } else {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: stakeAllowanceTXID,\n          description: `Allowance on ${pair.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance0).lt(amount0)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token0.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance0TXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n\n      if(BigNumber(allowance1).lt(amount1)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token1.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowance1TXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n\n      if(BigNumber(stakeAllowance).lt(minLiquidity)) {\n        const pairContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address)\n\n        const stakePromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, pairContract, 'approve', [pair.gauge.address, MAX_UINT256], account, gasPrice, null, null, stakeAllowanceTXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(stakePromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n\n      // SUBMIT DEPOSIT TRANSACTION\n      const sendSlippage = BigNumber(100).minus(slippage).div(100)\n      const sendAmount0 = BigNumber(amount0).times(10**token0.decimals).toFixed(0)\n      const sendAmount1 = BigNumber(amount1).times(10**token1.decimals).toFixed(0)\n      const deadline = ''+moment().add(600, 'seconds').unix()\n      const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10**token0.decimals).toFixed(0)\n      const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10**token1.decimals).toFixed(0)\n\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n      const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address)\n      const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address)\n\n      let func = 'addLiquidity'\n      let params = [token0.address, token1.address, pair.isStable, sendAmount0, sendAmount1, sendAmount0Min, sendAmount1Min, account.address, deadline]\n      let sendValue = null\n\n      if(token0.address === 'FTM') {\n        func = 'addLiquidityFTM'\n        params = [token1.address, pair.isStable, sendAmount1, sendAmount1Min, sendAmount0Min, account.address, deadline]\n        sendValue = sendAmount0\n      }\n      if(token1.address === 'FTM') {\n        func = 'addLiquidityFTM'\n        params = [token0.address, pair.isStable, sendAmount0, sendAmount0Min, sendAmount1Min, account.address, deadline]\n        sendValue = sendAmount1\n      }\n\n      this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, depositTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        const balanceOf = await pairContract.methods.balanceOf(account.address).call()\n\n        let sendTok = '0'\n        if(token && token.id) {\n          sendTok = token.id\n        }\n\n        this._callContractWait(web3, gaugeContract, 'deposit', [balanceOf, sendTok], account, gasPrice, null, null, stakeTXID, (err) => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err)\n          }\n\n          this._getPairInfo(web3, account)\n\n          this.emitter.emit(ACTIONS.ADD_LIQUIDITY_AND_STAKED)\n        })\n      }, null, sendValue)\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  _getDepositAllowance = async (web3, token, account) => {\n    try {\n      const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token.address)\n      const allowance = await tokenContract.methods.allowance(account.address, CONTRACTS.ROUTER_ADDRESS).call()\n      return BigNumber(allowance).div(10**token.decimals).toFixed(token.decimals)\n    } catch (ex) {\n      console.error(ex)\n      return null\n    }\n  }\n\n  _getStakeAllowance = async (web3, pair, account) => {\n    try {\n      const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address)\n      const allowance = await tokenContract.methods.allowance(account.address, pair.gauge.address).call()\n      return BigNumber(allowance).div(10**pair.decimals).toFixed(pair.decimals)\n    } catch (ex) {\n      console.error(ex)\n      return null\n    }\n  }\n\n  _getWithdrawAllowance = async (web3, pair, account) => {\n    try {\n      const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address)\n      const allowance = await tokenContract.methods.allowance(account.address, CONTRACTS.ROUTER_ADDRESS).call()\n      return BigNumber(allowance).div(10**pair.decimals).toFixed(pair.decimals)\n    } catch (ex) {\n      console.error(ex)\n      return null\n    }\n  }\n\n  quoteAddLiquidity = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pair, token0, token1, amount0, amount1 } = payload.content\n\n      if(!pair || !token0 || !token1 || amount0 == '' || amount1 == '') {\n        return null\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n\n      const sendAmount0 = BigNumber(amount0).times(10**token0.decimals).toFixed(0)\n      const sendAmount1 = BigNumber(amount1).times(10**token1.decimals).toFixed(0)\n\n      let addy0 = token0.address\n      let addy1 = token1.address\n\n      if(token0.address === 'FTM') {\n        addy0 = CONTRACTS.WFTM_ADDRESS\n      }\n      if(token1.address === 'FTM') {\n        addy1 = CONTRACTS.WFTM_ADDRESS\n      }\n\n      const res = await routerContract.methods.quoteAddLiquidity(addy0, addy1, pair.isStable, sendAmount0, sendAmount1).call()\n\n      const returnVal = {\n        inputs: {\n          token0,\n          token1,\n          amount0,\n          amount1,\n        },\n        output: BigNumber(res.liquidity).div(10**(pair.decimals)).toFixed(pair.decimals)\n      }\n      this.emitter.emit(ACTIONS.QUOTE_ADD_LIQUIDITY_RETURNED, returnVal)\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  getLiquidityBalances = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pair } = payload.content\n\n      if(!pair) {\n        return\n      }\n\n      const token0Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.token0.address)\n      const token1Contract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.token1.address)\n      const pairContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address)\n\n      const balanceCalls = [\n        token0Contract.methods.balanceOf(account.address).call(),\n        token1Contract.methods.balanceOf(account.address).call(),\n        pairContract.methods.balanceOf(account.address).call()\n      ]\n\n      if(pair.gauge) {\n        const gaugeContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.gauge.address)\n        balanceCalls.push(gaugeContract.methods.balanceOf(account.address).call())\n        // balanceCalls.push(gaugeContract.methods.earned(incentiveAddress, account.address).call())\n      }\n\n      const [ token0Balance, token1Balance, poolBalance, gaugeBalance/*, earned*/ ] = await Promise.all(balanceCalls)\n\n      const returnVal = {\n        token0: BigNumber(token0Balance).div(10**pair.token0.decimals).toFixed(pair.token0.decimals),\n        token1: BigNumber(token1Balance).div(10**pair.token1.decimals).toFixed(pair.token1.decimals),\n        pool: BigNumber(poolBalance).div(10**18).toFixed(18),\n      }\n\n      if(pair.gauge) {\n        returnVal.gauge = gaugeBalance ? BigNumber(gaugeBalance).div(10**18).toFixed(18) : null\n        // returnVal.earned = BigNumber(earned).div(10**incentiveAsset.decimals).toFixed(incentiveAsset.decimals),\n      }\n\n      this.emitter.emit(ACTIONS.GET_LIQUIDITY_BALANCES_RETURNED, returnVal)\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  removeLiquidity = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { token0, token1, pair, slippage } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowanceTXID = this.getTXUUID()\n      let withdrawTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Remove liquidity from ${pair.symbol}`, type: 'Liquidity', verb: 'Liquidity Removed', transactions: [\n        {\n          uuid: allowanceTXID,\n          description: `Checking your ${pair.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: withdrawTXID,\n          description: `Withdraw tokens from the pool`,\n          status: 'WAITING'\n        },\n      ]})\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      const allowance = await this._getWithdrawAllowance(web3, pair, account)\n\n      if(BigNumber(allowance).lt(pair.balance)) {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allow the router to spend your ${pair.symbol}`\n        })\n      } else {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allowance on ${pair.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance).lt(pair.balance)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, (err) => {\n            if (err) {\n              console.log(err)\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n      // SUBMIT WITHDRAW TRANSACTION\n      const sendAmount = BigNumber(pair.balance).times(10**pair.decimals).toFixed(0)\n\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n\n      const quoteRemove = await routerContract.methods.quoteRemoveLiquidity(token0.address, token1.address, pair.isStable, sendAmount).call()\n\n      const sendSlippage = BigNumber(100).minus(slippage).div(100)\n      const deadline = ''+moment().add(600, 'seconds').unix()\n      const sendAmount0Min = BigNumber(quoteRemove.amountA).times(sendSlippage).toFixed(0)\n      const sendAmount1Min = BigNumber(quoteRemove.amountB).times(sendSlippage).toFixed(0)\n\n\n      this._callContractWait(web3, routerContract, 'removeLiquidity', [token0.address, token1.address, pair.isStable, sendAmount, sendAmount0Min, sendAmount1Min, account.address, deadline], account, gasPrice, null, null, withdrawTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._getPairInfo(web3, account)\n\n        this.emitter.emit(ACTIONS.LIQUIDITY_REMOVED)\n      })\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  unstakeAndRemoveLiquidity = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { token0, token1, amount, amount0, amount1, pair, slippage } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowanceTXID = this.getTXUUID()\n      let withdrawTXID = this.getTXUUID()\n      let unstakeTXID = this.getTXUUID()\n\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Remove liquidity from ${pair.symbol}`, type: 'Liquidity', verb: 'Liquidity Removed', transactions: [\n        {\n          uuid: allowanceTXID,\n          description: `Checking your ${pair.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: unstakeTXID,\n          description: `Unstake LP tokens from the gauge`,\n          status: 'WAITING'\n        },\n        {\n          uuid: withdrawTXID,\n          description: `Withdraw tokens from the pool`,\n          status: 'WAITING'\n        }\n      ]})\n\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      const allowance = await this._getWithdrawAllowance(web3, pair, account)\n\n      if(BigNumber(allowance).lt(amount)) {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allow the router to spend your ${pair.symbol}`\n        })\n      } else {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allowance on ${pair.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance).lt(amount)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, pair.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n\n      // SUBMIT DEPOSIT TRANSACTION\n      const sendSlippage = BigNumber(100).minus(slippage).div(100)\n      const sendAmount = BigNumber(amount).times(10**pair.decimals).toFixed(0)\n      const deadline = ''+moment().add(600, 'seconds').unix()\n      const sendAmount0Min = BigNumber(amount0).times(sendSlippage).times(10**token0.decimals).toFixed(0)\n      const sendAmount1Min = BigNumber(amount1).times(sendSlippage).times(10**token1.decimals).toFixed(0)\n\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n      const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address)\n      const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address)\n\n      this._callContractWait(web3, gaugeContract, 'withdraw', [sendAmount], account, gasPrice, null, null, unstakeTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        const balanceOf = await pairContract.methods.balanceOf(account.address).call()\n\n        this._callContractWait(web3, routerContract, 'removeLiquidity', [token0.address, token1.address, pair.isStable, balanceOf, sendAmount0Min, sendAmount1Min, account.address, deadline], account, gasPrice, null, null, withdrawTXID, (err) => {\n          if (err) {\n            return this.emitter.emit(ACTIONS.ERROR, err)\n          }\n\n          this._getPairInfo(web3, account)\n\n          this.emitter.emit(ACTIONS.REMOVE_LIQUIDITY_AND_UNSTAKED)\n        })\n      })\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  unstakeLiquidity = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { token0, token1, amount, amount0, amount1, pair } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let unstakeTXID = this.getTXUUID()\n\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Unstake liquidity from gauge`, type: 'Liquidity', verb: 'Liquidity Unstaked', transactions: [\n        {\n          uuid: unstakeTXID,\n          description: `Unstake LP tokens from the gauge`,\n          status: 'WAITING'\n        }\n      ]})\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n\n      // SUBMIT DEPOSIT TRANSACTION\n      const sendAmount = BigNumber(amount).times(10**pair.decimals).toFixed(0)\n\n      const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address)\n\n      this._callContractWait(web3, gaugeContract, 'withdraw', [sendAmount], account, gasPrice, null, null, unstakeTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._getPairInfo(web3, account)\n\n        this.emitter.emit(ACTIONS.LIQUIDITY_UNSTAKED)\n      })\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  quoteRemoveLiquidity = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pair, token0, token1, withdrawAmount } = payload.content\n\n      if(!pair || !token0 || !token1 || withdrawAmount == '') {\n        return null\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n\n      const sendWithdrawAmount = BigNumber(withdrawAmount).times(10**pair.decimals).toFixed(0)\n\n      const res = await routerContract.methods.quoteRemoveLiquidity(token0.address, token1.address, pair.isStable, sendWithdrawAmount).call()\n\n      const returnVal = {\n        inputs: {\n          token0,\n          token1,\n          withdrawAmount\n        },\n        output: {\n          amount0: BigNumber(res.amountA).div(10**(token0.decimals)).toFixed(token0.decimals),\n          amount1: BigNumber(res.amountB).div(10**(token1.decimals)).toFixed(token1.decimals)\n        }\n      }\n      this.emitter.emit(ACTIONS.QUOTE_REMOVE_LIQUIDITY_RETURNED, returnVal)\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  createGauge = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pair } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let createGaugeTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Create liquidity gauge for ${pair.token0.symbol}/${pair.token1.symbol}`, type: 'Liquidity', verb: 'Gauge Created', transactions: [\n        {\n          uuid: createGaugeTXID,\n          description: `Create gauge`,\n          status: 'WAITING'\n        }\n      ]})\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n      this._callContractWait(web3, gaugesContract, 'createGauge', [pair.address], account, gasPrice, null, null, createGaugeTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        await this.updatePairsCall(web3, account)\n\n        this.emitter.emit(ACTIONS.CREATE_GAUGE_RETURNED)\n      })\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  quoteSwap = async (payload) => {\n    const txUUID = this.getTXUUID()\n    console.log(`Entered Quote: ${txUUID}`)\n    try {\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      // some path logic. Have a base asset (FTM) swap from start asset to FTM, swap from FTM back to out asset. Don't know.\n      const routeAssets = this.getStore('routeAssets')\n      const { fromAsset, toAsset, fromAmount } = payload.content\n\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n      const sendFromAmount = BigNumber(fromAmount).times(10**fromAsset.decimals).toFixed()\n\n      if (!fromAsset || !toAsset || !fromAmount || !fromAsset.address || !toAsset.address || fromAmount === '') {\n        return null\n      }\n\n      let addy0 = fromAsset.address\n      let addy1 = toAsset.address\n\n      if(fromAsset.address === 'FTM') {\n        addy0 = CONTRACTS.WFTM_ADDRESS\n      }\n      if(toAsset.address === 'FTM') {\n        addy1 = CONTRACTS.WFTM_ADDRESS\n      }\n\n      const includesRouteAddress = routeAssets.filter((asset) => {\n        return (asset.address.toLowerCase() == addy0.toLowerCase() || asset.address.toLowerCase() == addy1.toLowerCase())\n      })\n\n      let amountOuts = []\n\n      if(includesRouteAddress.length === 0) {\n        amountOuts = routeAssets.map((routeAsset) => {\n          return [\n            {\n              routes: [{\n                from: addy0,\n                to: routeAsset.address,\n                stable: true\n              },{\n                from: routeAsset.address,\n                to: addy1,\n                stable: true\n              }],\n              routeAsset: routeAsset\n            },\n            {\n              routes: [{\n                from: addy0,\n                to: routeAsset.address,\n                stable: false\n              },{\n                from: routeAsset.address,\n                to: addy1,\n                stable: false\n              }],\n              routeAsset: routeAsset\n            },\n            {\n              routes: [{\n                from: addy0,\n                to: routeAsset.address,\n                stable: true\n              },{\n                from: routeAsset.address,\n                to: addy1,\n                stable: false\n              }],\n              routeAsset: routeAsset\n            },\n            {\n              routes: [{\n                from: addy0,\n                to: routeAsset.address,\n                stable: false\n              },{\n                from: routeAsset.address,\n                to: addy1,\n                stable: true\n              }],\n              routeAsset: routeAsset\n            }\n          ]\n        }).flat()\n      }\n\n      amountOuts.push({\n        routes: [{\n          from: addy0,\n          to: addy1,\n          stable: true\n        }],\n        routeAsset: null\n      })\n\n      amountOuts.push({\n        routes: [{\n          from: addy0,\n          to: addy1,\n          stable: false\n        }],\n        routeAsset: null\n      })\n\n      const multicall = await stores.accountStore.getMulticall()\n      const receiveAmounts = await multicall.aggregate(amountOuts.map((route) => {\n        return routerContract.methods.getAmountsOut(sendFromAmount, route.routes)\n      }))\n\n      for(let i = 0; i < receiveAmounts.length; i++) {\n        amountOuts[i].receiveAmounts = receiveAmounts[i]\n        amountOuts[i].finalValue = BigNumber(receiveAmounts[i][receiveAmounts[i].length-1]).div(10**toAsset.decimals).toFixed(toAsset.decimals)\n      }\n\n      const bestAmountOut = amountOuts.filter((ret) => {\n        return ret != null\n      }).reduce((best, current) => {\n        if(!best) {\n          return current\n        }\n        return (BigNumber(best.finalValue).gt(current.finalValue) ? best : current)\n      }, 0)\n\n      if(!bestAmountOut) {\n        this.emitter.emit(ACTIONS.ERROR, 'No valid route found to complete swap')\n        return null\n      }\n\n      let totalRatio = 1\n\n      for(let i = 0; i < bestAmountOut.routes.length; i++) {\n        if(bestAmountOut.routes[i].stable == true) {\n\n        } else {\n          const reserves = await routerContract.methods.getReserves(bestAmountOut.routes[i].from, bestAmountOut.routes[i].to, bestAmountOut.routes[i].stable).call()\n          let amountIn = 0\n          let amountOut = 0\n          if(i == 0) {\n            amountIn = sendFromAmount\n            amountOut = bestAmountOut.receiveAmounts[i+1]\n          } else {\n            amountIn = bestAmountOut.receiveAmounts[i]\n            amountOut = bestAmountOut.receiveAmounts[i+1]\n          }\n\n          const amIn = BigNumber(amountIn).div(reserves.reserveA)\n          const amOut = BigNumber(amountOut).div(reserves.reserveB)\n          const ratio = BigNumber(amOut).div(amIn)\n\n          totalRatio = BigNumber(totalRatio).times(ratio).toFixed(18)\n        }\n      }\n\n      const priceImpact = BigNumber(1).minus(totalRatio).times(100).toFixed(18)\n\n      const returnValue = {\n        inputs: {\n          fromAmount: fromAmount,\n          fromAsset: fromAsset,\n          toAsset: toAsset\n        },\n        output: bestAmountOut,\n        priceImpact: priceImpact\n      }\n\n      console.log(`Returned Quote: ${txUUID} : ${JSON.stringify(returnValue)}`)\n      this.emitter.emit(ACTIONS.QUOTE_SWAP_RETURNED, returnValue)\n\n    } catch(ex) {\n    console.log(`Exception Quote: ${txUUID}`)\n      console.error(ex)\n      this.emitter.emit(ACTIONS.QUOTE_SWAP_RETURNED, null)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  swap = async (payload) => {\n    try {\n      const context = this\n\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { fromAsset, toAsset, fromAmount, toAmount, quote, slippage } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowanceTXID = this.getTXUUID()\n      let swapTXID = this.getTXUUID()\n\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Swap ${fromAsset.symbol} for ${toAsset.symbol}`, type: 'Swap', verb: 'Swap Successful', transactions: [\n        {\n          uuid: allowanceTXID,\n          description: `Checking your ${fromAsset.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: swapTXID,\n          description: `Swap ${formatCurrency(fromAmount)} ${fromAsset.symbol} for ${toAsset.symbol}`,\n          status: 'WAITING'\n        }\n      ]})\n\n      let allowance = 0\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      if(fromAsset.address !== 'FTM') {\n        allowance = await this._getSwapAllowance(web3, fromAsset, account)\n\n        if(BigNumber(allowance).lt(fromAmount)) {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allow the router to spend your ${fromAsset.symbol}`\n          })\n        } else {\n          this.emitter.emit(ACTIONS.TX_STATUS, {\n            uuid: allowanceTXID,\n            description: `Allowance on ${fromAsset.symbol} sufficient`,\n            status: 'DONE'\n          })\n        }\n      } else {\n        allowance = MAX_UINT256\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allowance on ${fromAsset.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance).lt(fromAmount)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, fromAsset.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.ROUTER_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n      // SUBMIT SWAP TRANSACTION\n      const sendSlippage = BigNumber(100).minus(slippage).div(100)\n      const sendFromAmount = BigNumber(fromAmount).times(10**fromAsset.decimals).toFixed(0)\n      const sendMinAmountOut = BigNumber(quote.output.finalValue).times(10**toAsset.decimals).times(sendSlippage).toFixed(0)\n      const deadline = ''+moment().add(600, 'seconds').unix()\n\n      const routerContract = new web3.eth.Contract(CONTRACTS.ROUTER_ABI, CONTRACTS.ROUTER_ADDRESS)\n\n\n      let func = 'swapExactTokensForTokens'\n      let params = [sendFromAmount, sendMinAmountOut, quote.output.routes, account.address, deadline]\n      let sendValue = null\n\n      if(fromAsset.address === 'FTM') {\n        func = 'swapExactFTMForTokens'\n        params = [sendMinAmountOut, quote.output.routes, account.address, deadline]\n        sendValue = sendFromAmount\n      }\n      if(toAsset.address === 'FTM') {\n        func = 'swapExactTokensForFTM'\n      }\n\n      this._callContractWait(web3, routerContract, func, params, account, gasPrice, null, null, swapTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._getSpecificAssetInfo(web3, account, fromAsset.address)\n        this._getSpecificAssetInfo(web3, account, toAsset.address)\n        this._getPairInfo(web3, account)\n\n        this.emitter.emit(ACTIONS.SWAP_RETURNED)\n      }, null, sendValue)\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  _getSpecificAssetInfo = async (web3, account, assetAddress) => {\n    try {\n      const baseAssets = this.getStore(\"baseAssets\")\n      if (!baseAssets) {\n        console.warn('baseAssets not found')\n        return null\n      }\n\n      const ba = await Promise.all(\n        baseAssets.map(async (asset) => {\n          if(asset.address.toLowerCase() === assetAddress.toLowerCase()) {\n            if(asset.address === 'FTM') {\n              let bal = await web3.eth.getBalance(account.address)\n              asset.balance = BigNumber(bal).div(10 ** asset.decimals).toFixed(asset.decimals)\n            } else {\n              const assetContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, asset.address)\n\n              const [ balanceOf ] = await Promise.all([\n                assetContract.methods.balanceOf(account.address).call(),\n              ])\n\n              asset.balance = BigNumber(balanceOf).div(10 ** asset.decimals).toFixed(asset.decimals)\n            }\n          }\n\n          return asset\n        })\n      )\n\n      this.setStore({ baseAssets: ba })\n      this.emitter.emit(ACTIONS.UPDATED)\n\n    } catch (ex) {\n      console.log(ex)\n      return null\n    }\n  }\n\n  _getSwapAllowance = async (web3, token, account) => {\n    try {\n      const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token.address)\n      const allowance = await tokenContract.methods.allowance(account.address, CONTRACTS.ROUTER_ADDRESS).call()\n      return BigNumber(allowance).div(10**token.decimals).toFixed(token.decimals)\n    } catch (ex) {\n      console.error(ex)\n      return null\n    }\n  }\n\n  getVestNFTs = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const veToken = this.getStore('veToken')\n      const govToken = this.getStore('govToken')\n\n      const vestingContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS)\n\n      const nftsLength = await vestingContract.methods.balanceOf(account.address).call()\n      const arr = Array.from({length: parseInt(nftsLength)}, (v, i) => i)\n\n      const nfts = await Promise.all(\n        arr.map(async (idx) => {\n\n          const tokenIndex = await vestingContract.methods.tokenOfOwnerByIndex(account.address, idx).call()\n          const locked = await vestingContract.methods.locked(tokenIndex).call()\n          const lockValue = await vestingContract.methods.balanceOfNFT(tokenIndex).call()\n\n          // probably do some decimals math before returning info. Maybe get more info. I don't know what it returns.\n          return {\n            id: tokenIndex,\n            lockEnds: locked.end,\n            lockAmount: BigNumber(locked.amount).div(10**govToken.decimals).toFixed(govToken.decimals),\n            lockValue: BigNumber(lockValue).div(10**veToken.decimals).toFixed(veToken.decimals)\n          }\n        })\n      )\n\n      this.setStore({ vestNFTs: nfts })\n      this.emitter.emit(ACTIONS.VEST_NFTS_RETURNED, nfts)\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  createVest = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const govToken = this.getStore('govToken')\n      const { amount, unlockTime } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowanceTXID = this.getTXUUID()\n      let vestTXID = this.getTXUUID()\n\n      const unlockString = moment().add(unlockTime, 'seconds').format('YYYY-MM-DD')\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Vest ${govToken.symbol} until ${unlockString}`, type: 'Vest', verb: 'Vest Created', transactions: [\n        {\n          uuid: allowanceTXID,\n          description: `Checking your ${govToken.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: vestTXID,\n          description: `Vesting your tokens`,\n          status: 'WAITING'\n        }\n      ]})\n\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      const allowance = await this._getVestAllowance(web3, govToken, account)\n\n      if(BigNumber(allowance).lt(amount)) {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allow the vesting contract to use your ${govToken.symbol}`\n        })\n      } else {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allowance on ${govToken.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance).lt(amount)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, govToken.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          this._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.VE_TOKEN_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n      // SUBMIT VEST TRANSACTION\n      const sendAmount = BigNumber(amount).times(10**govToken.decimals).toFixed(0)\n\n      const veTokenContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS)\n\n      this._callContractWait(web3, veTokenContract, 'create_lock', [sendAmount, unlockTime+''], account, gasPrice, null, null, vestTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._getGovTokenInfo(web3, account)\n        this.getNFTByID('fetchAll')\n\n        this.emitter.emit(ACTIONS.CREATE_VEST_RETURNED)\n      })\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  _getVestAllowance = async (web3, token, account) => {\n    try {\n      const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token.address)\n      const allowance = await tokenContract.methods.allowance(account.address, CONTRACTS.VE_TOKEN_ADDRESS).call()\n      return BigNumber(allowance).div(10**token.decimals).toFixed(token.decimals)\n    } catch (ex) {\n      console.error(ex)\n      return null\n    }\n  }\n\n  increaseVestAmount = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const govToken = this.getStore('govToken')\n      const { amount, tokenID } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowanceTXID = this.getTXUUID()\n      let vestTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Increase vest amount on token #${tokenID}`, type: 'Vest', verb: 'Vest Increased', transactions: [\n        {\n          uuid: allowanceTXID,\n          description: `Checking your ${govToken.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: vestTXID,\n          description: `Increasing your vest amount`,\n          status: 'WAITING'\n        }\n      ]})\n\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      const allowance = await this._getVestAllowance(web3, govToken, account)\n\n      if(BigNumber(allowance).lt(amount)) {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allow vesting contract to use your ${govToken.symbol}`\n        })\n      } else {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allowance on ${govToken.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance).lt(amount)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, govToken.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          this._callContractWait(web3, tokenContract, 'approve', [CONTRACTS.VE_TOKEN_ADDRESS, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n      // SUBMIT INCREASE TRANSACTION\n      const sendAmount = BigNumber(amount).times(10**govToken.decimals).toFixed(0)\n\n      const veTokenContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS)\n\n      this._callContractWait(web3, veTokenContract, 'increase_amount', [tokenID, sendAmount], account, gasPrice, null, null, vestTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._getGovTokenInfo(web3, account)\n        this._updateVestNFTByID(tokenID)\n\n        this.emitter.emit(ACTIONS.INCREASE_VEST_AMOUNT_RETURNED)\n      })\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  increaseVestDuration = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const govToken = this.getStore('govToken')\n      const { tokenID, unlockTime } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let vestTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Increase unlock time on token #${tokenID}`, type: 'Vest', verb: 'Vest Increased', transactions: [\n        {\n          uuid: vestTXID,\n          description: `Increasing your vest duration`,\n          status: 'WAITING'\n        }\n      ]})\n\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      // SUBMIT INCREASE TRANSACTION\n      const veTokenContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS)\n\n      this._callContractWait(web3, veTokenContract, 'increase_unlock_time', [tokenID, unlockTime+''], account, gasPrice, null, null, vestTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._updateVestNFTByID(tokenID)\n\n        this.emitter.emit(ACTIONS.INCREASE_VEST_DURATION_RETURNED)\n      })\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  withdrawVest = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const govToken = this.getStore('govToken')\n      const { tokenID } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let vestTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Withdraw vest amount on token #${tokenID}`, type: 'Vest', verb: 'Vest Withdrawn', transactions: [\n        {\n          uuid: vestTXID,\n          description: `Withdrawing your expired tokens`,\n          status: 'WAITING'\n        }\n      ]})\n\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      // SUBMIT INCREASE TRANSACTION\n      const veTokenContract = new web3.eth.Contract(CONTRACTS.VE_TOKEN_ABI, CONTRACTS.VE_TOKEN_ADDRESS)\n\n      this._callContractWait(web3, veTokenContract, 'withdraw', [tokenID], account, gasPrice, null, null, vestTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this._updateVestNFTByID(tokenID)\n\n        this.emitter.emit(ACTIONS.WITHDRAW_VEST_RETURNED)\n      })\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  vote = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const govToken = this.getStore('govToken')\n      const { tokenID, votes } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let voteTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Cast vote using token #${tokenID}`, verb: 'Votes Cast', transactions: [\n        {\n          uuid: voteTXID,\n          description: `Cast votes`,\n          status: 'WAITING'\n        }\n      ]})\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      // SUBMIT INCREASE TRANSACTION\n      const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      let onlyVotes = votes.filter((vote) => {\n        return (BigNumber(vote.value).gt(0) || BigNumber(vote.value).lt(0))\n      })\n\n      let tokens = onlyVotes.map((vote) => {\n        return vote.address\n      })\n\n      let voteCounts = onlyVotes.map((vote) => {\n        return BigNumber(vote.value).times(100).toFixed(0)\n      })\n\n      this._callContractWait(web3, gaugesContract, 'vote', [tokenID, tokens, voteCounts], account, gasPrice, null, null, voteTXID, (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this.emitter.emit(ACTIONS.VOTE_RETURNED)\n      })\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  getVestVotes = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { tokenID } = payload.content\n      const pairs = this.getStore('pairs')\n\n      if(!pairs) {\n        return null\n      }\n\n      if(!tokenID) {\n        return\n      }\n\n      const filteredPairs = pairs.filter((pair) => {\n        return pair && pair.gauge && pair.gauge.address\n      })\n\n      const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      const multicall = await stores.accountStore.getMulticall()\n\n      const calls = filteredPairs.map((pair) => {\n        return gaugesContract.methods.votes(tokenID, pair.address)\n      })\n\n      const voteCounts = await multicall.aggregate(calls);\n\n      let votes = []\n\n      const totalVotes = voteCounts.reduce((curr, acc) => {\n        let num = BigNumber(acc).gt(0) ? acc : BigNumber(acc).times(-1).toNumber(0)\n        return BigNumber(curr).plus(num)\n      }, 0)\n\n      for(let i = 0; i < voteCounts.length; i++) {\n        votes.push({\n          address: filteredPairs[i].address,\n          votePercent: (BigNumber(totalVotes).gt(0) || BigNumber(totalVotes).lt(0)) ? BigNumber(voteCounts[i]).times(100).div(totalVotes).toFixed(0) : '0'\n        })\n      }\n\n      this.emitter.emit(ACTIONS.VEST_VOTES_RETURNED, votes)\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  createBribe = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { asset, amount, gauge } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let allowanceTXID = this.getTXUUID()\n      let bribeTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Create bribe on ${gauge.token0.symbol}/${gauge.token1.symbol}`, verb: 'Bribe Created', transactions: [\n        {\n          uuid: allowanceTXID,\n          description: `Checking your ${asset.symbol} allowance`,\n          status: 'WAITING'\n        },\n        {\n          uuid: bribeTXID,\n          description: `Create bribe`,\n          status: 'WAITING'\n        }\n      ]})\n\n\n      // CHECK ALLOWANCES AND SET TX DISPLAY\n      const allowance = await this._getBribeAllowance(web3, asset, gauge, account)\n\n      if(BigNumber(allowance).lt(amount)) {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allow the bribe contract to spend your ${asset.symbol}`\n        })\n      } else {\n        this.emitter.emit(ACTIONS.TX_STATUS, {\n          uuid: allowanceTXID,\n          description: `Allowance on ${asset.symbol} sufficient`,\n          status: 'DONE'\n        })\n      }\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      const allowanceCallsPromises = []\n\n      // SUBMIT REQUIRED ALLOWANCE TRANSACTIONS\n      if(BigNumber(allowance).lt(amount)) {\n        const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, asset.address)\n\n        const tokenPromise = new Promise((resolve, reject) => {\n          this._callContractWait(web3, tokenContract, 'approve', [gauge.gauge.bribeAddress, MAX_UINT256], account, gasPrice, null, null, allowanceTXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        allowanceCallsPromises.push(tokenPromise)\n      }\n\n      const done = await Promise.all(allowanceCallsPromises)\n\n      // SUBMIT BRIBE TRANSACTION\n      const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, gauge.gauge.bribeAddress)\n\n      const sendAmount = BigNumber(amount).times(10**asset.decimals).toFixed(0)\n\n      this._callContractWait(web3, bribeContract, 'notifyRewardAmount', [asset.address, sendAmount], account, gasPrice, null, null, bribeTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        await this.updatePairsCall(web3, account)\n\n        this.emitter.emit(ACTIONS.BRIBE_CREATED)\n      })\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  _getBribeAllowance = async (web3, token, pair, account) => {\n    try {\n      const tokenContract = new web3.eth.Contract(CONTRACTS.ERC20_ABI, token.address)\n      const allowance = await tokenContract.methods.allowance(account.address, pair.gauge.bribeAddress).call()\n      return BigNumber(allowance).div(10**token.decimals).toFixed(token.decimals)\n    } catch (ex) {\n      console.error(ex)\n      return null\n    }\n  }\n\n  getVestBalances = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { tokenID } = payload.content\n      const pairs = this.getStore('pairs')\n\n      if(!pairs) {\n        return null\n      }\n\n      if(!tokenID) {\n        return\n      }\n\n      const filteredPairs = pairs.filter((pair) => {\n        return pair && pair.gauge\n      })\n\n      const bribesEarned = await Promise.all(\n        filteredPairs.map(async (pair) => {\n\n          const bribesEarned = await Promise.all(\n            pair.gauge.bribes.map(async (bribe) => {\n              const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, pair.gauge.bribeAddress)\n\n              const [ earned ] = await Promise.all([\n                bribeContract.methods.earned(bribe.token.address, tokenID).call(),\n              ])\n\n              return {\n                earned: BigNumber(earned).div(10**bribe.token.decimals).toFixed(bribe.token.decimals),\n              }\n            })\n          )\n\n          pair.gauge.bribesEarned = bribesEarned\n\n          return pair\n        })\n      )\n\n      this.emitter.emit(ACTIONS.VEST_BALANCES_RETURNED, bribesEarned)\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  getRewardBalances = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { tokenID } = payload.content\n\n      const pairs = this.getStore('pairs')\n\n      const filteredPairs = [...pairs.filter((pair) => {\n        return pair && pair.gauge\n      })]\n\n      const filteredPairs2 = [...pairs.filter((pair) => {\n        return pair && pair.gauge\n      })]\n\n      let filteredBribes = []\n\n      if(tokenID) {\n        const bribesEarned = await Promise.all(\n          filteredPairs.map(async (pair) => {\n\n            const bribesEarned = await Promise.all(\n              pair.gauge.bribes.map(async (bribe) => {\n                const bribeContract = new web3.eth.Contract(CONTRACTS.BRIBE_ABI, pair.gauge.bribeAddress)\n\n                const [ earned ] = await Promise.all([\n                  bribeContract.methods.earned(bribe.token.address, tokenID).call(),\n                ])\n\n                bribe.earned = BigNumber(earned).div(10**bribe.token.decimals).toFixed(bribe.token.decimals)\n                return bribe\n              })\n            )\n            pair.gauge.bribesEarned = bribesEarned\n\n            return pair\n          })\n        )\n\n        filteredBribes = bribesEarned.filter((pair) => {\n          if(pair.gauge && pair.gauge.bribesEarned && pair.gauge.bribesEarned.length > 0) {\n            let shouldReturn = false\n\n            for(let i = 0; i < pair.gauge.bribesEarned.length; i++) {\n              if(BigNumber(pair.gauge.bribesEarned[i].earned).gt(0)) {\n                shouldReturn = true\n              }\n            }\n\n            return shouldReturn\n          }\n\n          return false\n        }).map((pair) => {\n          pair.rewardType = 'Bribe'\n          return pair\n        })\n      }\n\n      const filteredFees = []\n      for(let i = 0; i < pairs.length; i++) {\n        let pair = Object.assign({}, pairs[i])\n        if(BigNumber(pair.claimable0).gt(0) || BigNumber(pair.claimable1).gt(0)) {\n          pair.rewardType = 'Fees'\n          filteredFees.push(pair)\n        }\n      }\n\n      const rewardsEarned = await Promise.all(\n        filteredPairs2.map(async (pair) => {\n\n          const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address)\n\n          const [ earned ] = await Promise.all([\n            gaugeContract.methods.earned(CONTRACTS.GOV_TOKEN_ADDRESS, account.address).call(),\n          ])\n\n          pair.gauge.rewardsEarned = BigNumber(earned).div(10**18).toFixed(18)\n          return pair\n        })\n      )\n\n      const filteredRewards = []\n      for(let j = 0; j < rewardsEarned.length; j++) {\n        let pair = Object.assign({}, rewardsEarned[j])\n        if(pair.gauge && pair.gauge.rewardsEarned && BigNumber(pair.gauge.rewardsEarned).gt(0)) {\n          pair.rewardType = 'Reward'\n          filteredRewards.push(pair)\n        }\n      }\n\n      console.log(filteredBribes)\n      console.log(filteredFees)\n      console.log(filteredRewards)\n\n      const rewards = {\n        bribes: filteredBribes,\n        fees: filteredFees,\n        rewards: filteredRewards,\n      }\n\n      this.setStore({\n        rewards\n      })\n\n      this.emitter.emit(ACTIONS.REWARD_BALANCES_RETURNED, rewards)\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  claimBribes = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pair, tokenID } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let claimTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Claim rewards for ${pair.token0.symbol}/${pair.token1.symbol}`, verb: 'Rewards Claimed', transactions: [\n        {\n          uuid: claimTXID,\n          description: `Claiming your bribes`,\n          status: 'WAITING'\n        }\n      ]})\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      // SUBMIT CLAIM TRANSACTION\n      const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      const sendGauges = [ pair.gauge.bribeAddress ]\n      const sendTokens = [ pair.gauge.bribesEarned.map((bribe) => {\n        return bribe.token.address\n      }) ]\n\n      this._callContractWait(web3, gaugesContract, 'claimBribes', [sendGauges, sendTokens, tokenID], account, gasPrice, null, null, claimTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this.getRewardBalances({ content: { tokenID } })\n        this.emitter.emit(ACTIONS.CLAIM_REWARD_RETURNED)\n      })\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  claimAllRewards = async (payload) => {\n    try {\n      const context = this\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pairs, tokenID } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let claimTXID = this.getTXUUID()\n      let feeClaimTXIDs = []\n      let rewardClaimTXIDs = []\n\n\n      let bribePairs = pairs.filter((pair) => {\n        return pair.rewardType === 'Bribe'\n      })\n\n      let feePairs = pairs.filter((pair) => {\n        return pair.rewardType === 'Fees'\n      })\n\n      let rewardPairs = pairs.filter((pair) => {\n        return pair.rewardType === 'Reward'\n      })\n\n      const sendGauges = bribePairs.map((pair) => {\n        return pair.gauge.bribeAddress\n      })\n      const sendTokens = bribePairs.map((pair) => {\n        return pair.gauge.bribesEarned.map((bribe) => {\n          return bribe.token.address\n        })\n      })\n\n      if(bribePairs.length == 0 && feePairs.length == 0 && rewardPairs.length == 0) {\n        this.emitter.emit(ACTIONS.ERROR, 'Nothing to claim')\n        this.emitter.emit(ACTIONS.CLAIM_ALL_REWARDS_RETURNED)\n        return\n      }\n\n      let sendOBJ = { title: `Claim all rewards`, verb: 'Rewards Claimed', transactions: [ ]}\n\n      if(bribePairs.length > 0) {\n        sendOBJ.transactions.push({\n          uuid: claimTXID,\n          description: `Claiming all your available bribes`,\n          status: 'WAITING'\n        })\n      }\n\n      if(feePairs.length > 0) {\n        for(let i = 0; i < feePairs.length; i++) {\n          const newClaimTX = this.getTXUUID()\n\n          feeClaimTXIDs.push(newClaimTX)\n          sendOBJ.transactions.push({\n            uuid: newClaimTX,\n            description: `Claiming fees for ${feePairs[i].symbol}`,\n            status: 'WAITING'\n          })\n        }\n      }\n\n      if(rewardPairs.length > 0) {\n        for(let i = 0; i < rewardPairs.length; i++) {\n          const newClaimTX = this.getTXUUID()\n\n          rewardClaimTXIDs.push(newClaimTX)\n          sendOBJ.transactions.push({\n            uuid: newClaimTX,\n            description: `Claiming reward for ${rewardPairs[i].symbol}`,\n            status: 'WAITING'\n          })\n        }\n      }\n\n      this.emitter.emit(ACTIONS.TX_ADDED, sendOBJ)\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      if(bribePairs.length > 0) {\n        // SUBMIT CLAIM TRANSACTION\n        const gaugesContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n        const claimPromise = new Promise((resolve, reject) => {\n          context._callContractWait(web3, gaugesContract, 'claimBribes', [sendGauges, sendTokens, tokenID], account, gasPrice, null, null, claimTXID, (err) => {\n            if (err) {\n              reject(err)\n              return\n            }\n\n            resolve()\n          })\n        })\n\n        await Promise.all([claimPromise])\n      }\n\n      if(feePairs.length > 0) {\n        for(let i = 0; i < feePairs.length; i++) {\n          const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, feePairs[i].address)\n\n          const claimPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, pairContract, 'claimFees', [], account, gasPrice, null, null, feeClaimTXIDs[i], (err) => {\n              if (err) {\n                reject(err)\n                return\n              }\n\n              resolve()\n            })\n          })\n\n          await Promise.all([claimPromise])\n        }\n      }\n\n      if(rewardPairs.length > 0) {\n        for(let i = 0; i < rewardPairs.length; i++) {\n          const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, rewardPairs[i].gauge.address)\n          const sendTok = [ CONTRACTS.GOV_TOKEN_ADDRESS ]\n\n          const rewardPromise = new Promise((resolve, reject) => {\n            context._callContractWait(web3, gaugeContract, 'getReward', [account.address, sendTok], account, gasPrice, null, null, rewardClaimTXIDs[i], (err) => {\n              if (err) {\n                reject(err)\n                return\n              }\n\n              resolve()\n            })\n          })\n\n          await Promise.all([rewardPromise])\n        }\n      }\n\n      this.getRewardBalances({ content: { tokenID } })\n      this.emitter.emit(ACTIONS.CLAIM_ALL_REWARDS_RETURNED)\n\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  claimRewards = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pair, tokenID } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let claimTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Claim rewards for ${pair.token0.symbol}/${pair.token1.symbol}`, verb: 'Rewards Claimed', transactions: [\n        {\n          uuid: claimTXID,\n          description: `Claiming your rewards`,\n          status: 'WAITING'\n        }\n      ]})\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      // SUBMIT CLAIM TRANSACTION\n      const gaugeContract = new web3.eth.Contract(CONTRACTS.GAUGE_ABI, pair.gauge.address)\n\n      const sendTokens = [ CONTRACTS.GOV_TOKEN_ADDRESS ]\n\n      this._callContractWait(web3, gaugeContract, 'getReward', [account.address, sendTokens], account, gasPrice, null, null, claimTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this.getRewardBalances({ content: { tokenID } })\n        this.emitter.emit(ACTIONS.CLAIM_REWARD_RETURNED)\n      })\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  claimPairFees = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { pair, tokenID } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let claimTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `Claim fees for ${pair.token0.symbol}/${pair.token1.symbol}`, verb: 'Fees Claimed', transactions: [\n        {\n          uuid: claimTXID,\n          description: `Claiming your fees`,\n          status: 'WAITING'\n        }\n      ]})\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      // SUBMIT CLAIM TRANSACTION\n      const pairContract = new web3.eth.Contract(CONTRACTS.PAIR_ABI, pair.address)\n\n      this._callContractWait(web3, pairContract, 'claimFees', [], account, gasPrice, null, null, claimTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        this.getRewardBalances({ content: { tokenID } })\n        this.emitter.emit(ACTIONS.CLAIM_REWARD_RETURNED)\n      })\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n\n  searchWhitelist = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n      const veToken = this.getStore('veToken')\n\n      const { search } = payload.content\n\n\n      const voterContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      const [ isWhitelisted, listingFee ] = await Promise.all([\n        voterContract.methods.isWhitelisted(search).call(),\n        voterContract.methods.listing_fee().call()\n      ])\n\n      const token = await this.getBaseAsset(search)\n      token.isWhitelisted = isWhitelisted\n      token.listingFee = BigNumber(listingFee).div(10**veToken.decimals).toFixed(veToken.decimals)\n\n      this.emitter.emit(ACTIONS.SEARCH_WHITELIST_RETURNED, token)\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  whitelistToken = async (payload) => {\n    try {\n      const account = stores.accountStore.getStore(\"account\")\n      if (!account) {\n        console.warn('account not found')\n        return null\n      }\n\n      const web3 = await stores.accountStore.getWeb3Provider()\n      if (!web3) {\n        console.warn('web3 not found')\n        return null\n      }\n\n      const { token, nft } = payload.content\n\n      // ADD TRNASCTIONS TO TRANSACTION QUEUE DISPLAY\n      let whitelistTXID = this.getTXUUID()\n\n      this.emitter.emit(ACTIONS.TX_ADDED, { title: `WHITELIST ${token.symbol}`, verb: 'Token Whitelisted', transactions: [\n        {\n          uuid: whitelistTXID,\n          description: `Whitelisting ${token.symbol}`,\n          status: 'WAITING'\n        }\n      ]})\n\n      const gasPrice = await stores.accountStore.getGasPrice()\n\n      // SUBMIT WHITELIST TRANSACTION\n      const voterContract = new web3.eth.Contract(CONTRACTS.VOTER_ABI, CONTRACTS.VOTER_ADDRESS)\n\n      this._callContractWait(web3, voterContract, 'whitelist', [token.address, nft.id], account, gasPrice, null, null, whitelistTXID, async (err) => {\n        if (err) {\n          return this.emitter.emit(ACTIONS.ERROR, err)\n        }\n\n        window.setTimeout(() => {\n          this.dispatcher.dispatch({ type: ACTIONS.SEARCH_WHITELIST, content: { search: token.address } })\n        }, 2)\n\n        this.emitter.emit(ACTIONS.WHITELIST_TOKEN_RETURNED)\n      })\n    } catch(ex) {\n      console.error(ex)\n      this.emitter.emit(ACTIONS.ERROR, ex)\n    }\n  }\n\n  _callContractWait = (web3, contract, method, params, account, gasPrice, dispatchEvent, dispatchContent, uuid, callback, paddGasCost, sendValue = null) => {\n    // console.log(method)\n    // console.log(params)\n    // if(sendValue) {\n    //   console.log(sendValue)\n    // }\n    // console.log(uuid)\n    //estimate gas\n    this.emitter.emit(ACTIONS.TX_PENDING, { uuid })\n\n    const gasCost = contract.methods[method](...params)\n      .estimateGas({ from: account.address, value: sendValue })\n      .then((gasAmount) => {\n        const context = this\n\n        let sendGasAmount = BigNumber(gasAmount).times(1.5).toFixed(0)\n        // if (paddGasCost) {\n        //   sendGasAmount = BigNumber(sendGasAmount).times(1.15).toFixed(0)\n        // }\n        //\n        // const sendGasAmount = '3000000'\n        // const context = this\n        //\n        contract.methods[method](...params)\n          .send({\n            from: account.address,\n            gasPrice: web3.utils.toWei(gasPrice, 'gwei'),\n            gas: sendGasAmount,\n            value: sendValue,\n            // maxFeePerGas: web3.utils.toWei(gasPrice, \"gwei\"),\n            // maxPriorityFeePerGas: web3.utils.toWei(\"2\", \"gwei\"),\n          })\n          .on(\"transactionHash\", function (txHash) {\n            context.emitter.emit(ACTIONS.TX_SUBMITTED, { uuid, txHash })\n          })\n          .on(\"receipt\", function (receipt) {\n            context.emitter.emit(ACTIONS.TX_CONFIRMED, { uuid, txHash: receipt.transactionHash })\n            callback(null, receipt.transactionHash)\n            if (dispatchEvent) {\n              context.dispatcher.dispatch({ type: dispatchEvent, content: dispatchContent })\n            }\n          })\n          .on(\"error\", function (error) {\n            if (!error.toString().includes(\"-32601\")) {\n              if (error.message) {\n                context.emitter.emit(ACTIONS.TX_REJECTED, { uuid, error: error.message })\n                return callback(error.message)\n              }\n              context.emitter.emit(ACTIONS.TX_REJECTED, { uuid, error: error })\n              callback(error)\n            }\n          })\n          .catch((error) => {\n            if (!error.toString().includes(\"-32601\")) {\n              if (error.message) {\n                context.emitter.emit(ACTIONS.TX_REJECTED, { uuid, error: error.message })\n                return callback(error.message)\n              }\n              context.emitter.emit(ACTIONS.TX_REJECTED, { uuid, error: error })\n              callback(error)\n            }\n          })\n      })\n      .catch((ex) => {\n        console.log(ex)\n        if (ex.message) {\n          this.emitter.emit(ACTIONS.TX_REJECTED, { uuid, error: ex.message })\n          return callback(ex.message)\n        }\n        this.emitter.emit(ACTIONS.TX_REJECTED, { uuid, error: 'Error estimating gas' })\n        callback(ex)\n      })\n  }\n\n  _makeBatchRequest = (web3, callFrom, calls) => {\n    let batch = new web3.BatchRequest();\n\n    let promises = calls.map(call => {\n      return new Promise((res, rej) => {\n        let req = call.request({from: callFrom}, (err, data) => {\n          if(err) rej(err);\n          else res(data)\n        });\n        batch.add(req)\n      })\n    })\n    batch.execute()\n\n    return Promise.all(promises)\n  }\n  //\n  // _getMulticallWatcher = (web3, calls) => {\n  //\n  // }\n}\n\nexport default Store\n"]},"metadata":{},"sourceType":"module"}