{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pierremarieriviere/Code/solidly-master/components/ssWhitelist/ssWhitelist.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Paper, TextField, InputAdornment, CircularProgress, Typography, Tooltip, Button, Select, MenuItem, Grid } from '@material-ui/core';\nimport BigNumber from 'bignumber.js';\nimport classes from './ssWhitelist.module.css';\nimport SearchIcon from '@material-ui/icons/Search';\nimport stores from '../../stores';\nimport { ACTIONS, ETHERSCAN_URL } from '../../stores/constants';\nimport { formatAddress, formatCurrency } from '../../utils';\nexport default function ssWhitelist() {\n  const {\n    0: web3,\n    1: setWeb3\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: whitelistLoading,\n    1: setWhitelistLoading\n  } = useState(false);\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const {\n    0: token,\n    1: setToken\n  } = useState(null);\n  const {\n    0: nfts,\n    1: setNFTS\n  } = useState([]);\n  const {\n    0: nft,\n    1: setNFT\n  } = useState(null);\n  const {\n    0: veToken,\n    1: setVeToken\n  } = useState(null);\n\n  const onSearchChanged = event => {\n    setSearch(event.target.value);\n\n    if (web3 && web3.utils.isAddress(event.target.value)) {\n      setLoading(true);\n      stores.dispatcher.dispatch({\n        type: ACTIONS.SEARCH_WHITELIST,\n        content: {\n          search: event.target.value\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    const searchReturned = async res => {\n      setToken(res);\n      setLoading(false);\n    };\n\n    const whitelistReturned = async res => {\n      setWhitelistLoading(false);\n    };\n\n    const ssUpdated = () => {\n      setVeToken(stores.stableSwapStore.getStore('veToken'));\n      const nfts = stores.stableSwapStore.getStore('vestNFTs');\n      setNFTS(nfts);\n\n      if (nfts && nfts.length > 0) {\n        setNFT(nfts[0]);\n      }\n    };\n\n    const accountChanged = async () => {\n      const w3 = await stores.accountStore.getWeb3Provider();\n      setWeb3(w3);\n    };\n\n    const errorReturned = () => {\n      setWhitelistLoading(false);\n    };\n\n    stores.emitter.on(ACTIONS.ERROR, errorReturned);\n    stores.emitter.on(ACTIONS.UPDATED, ssUpdated);\n    stores.emitter.on(ACTIONS.ACCOUNT_CHANGED, accountChanged);\n    stores.emitter.on(ACTIONS.ACCOUNT_CONFIGURED, accountChanged);\n    stores.emitter.on(ACTIONS.SEARCH_WHITELIST_RETURNED, searchReturned);\n    stores.emitter.on(ACTIONS.WHITELIST_TOKEN_RETURNED, whitelistReturned);\n    accountChanged();\n    return () => {\n      stores.emitter.removeListener(ACTIONS.ERROR, errorReturned);\n      stores.emitter.removeListener(ACTIONS.UPDATED, ssUpdated);\n      stores.emitter.removeListener(ACTIONS.ACCOUNT_CHANGED, accountChanged);\n      stores.emitter.removeListener(ACTIONS.ACCOUNT_CONFIGURED, accountChanged);\n      stores.emitter.removeListener(ACTIONS.SEARCH_WHITELIST_RETURNED, searchReturned);\n      stores.emitter.removeListener(ACTIONS.WHITELIST_TOKEN_RETURNED, whitelistReturned);\n    };\n  }, []);\n\n  const onAddressClick = address => {\n    window.open(`${ETHERSCAN_URL}token/${address}`, '_blank');\n  };\n\n  const onWhitelist = () => {\n    setWhitelistLoading(true);\n    stores.dispatcher.dispatch({\n      type: ACTIONS.WHITELIST_TOKEN,\n      content: {\n        token,\n        nft\n      }\n    });\n  };\n\n  const handleChange = event => {\n    setNFT(event.target.value);\n  };\n\n  const renderToken = () => {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.tokenContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.inline,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: token.logoURI,\n          alt: \"\",\n          width: \"70\",\n          height: \"70\",\n          className: classes.tokenLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.tokenName,\n            variant: \"h2\",\n            children: token.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"View in explorer\",\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.tokenAddress,\n              color: \"textSecondary\",\n              onClick: () => {\n                onAddressClick(token.address);\n              },\n              children: formatAddress(token.address)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.whitelistStatus,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.whitelistContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.listingFee,\n              color: \"textSecondary\",\n              children: \"Whitelist Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), token.isWhitelisted && /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.isWhitelist,\n              children: 'Whitelisted'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), !token.isWhitelisted && /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.notWhitelist,\n              children: 'Not Whitelisted'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), !token.isWhitelisted && /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: \"Listing fee either needs to be locked in your veToken NFT or be paid and burnt on list\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.listingFee,\n                color: \"textSecondary\",\n                children: \"Listing Fee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.listingFee,\n                children: [formatCurrency(token.listingFee), \" \", veToken === null || veToken === void 0 ? void 0 : veToken.symbol]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [!token.isWhitelisted && nft && BigNumber(nft.lockValue).gt(token.listingFee) && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            size: \"large\",\n            color: \"primary\",\n            onClick: onWhitelist,\n            className: classes.buttonOverride,\n            disabled: whitelistLoading,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.actionButtonText,\n              children: whitelistLoading ? `Whitelisting` : `Whitelist`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), whitelistLoading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 10,\n              className: classes.loadingCircle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 39\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), !token.isWhitelisted && (!nft || BigNumber(nft.lockValue).lt(token.listingFee)) && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            size: \"large\",\n            color: \"primary\",\n            className: classes.buttonOverride,\n            disabled: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.actionButtonText,\n              children: `Vest value < Fee`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderMediumInput = (value, options) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.textField,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.mediumInputContainer,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            lg: \"auto\",\n            md: \"auto\",\n            sm: 12,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              className: classes.smallText,\n              children: \"Please select your veNFT:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            lg: 6,\n            md: 6,\n            sm: 12,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.mediumInputAmount,\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                fullWidth: true,\n                value: value,\n                onChange: handleChange,\n                InputProps: {\n                  className: classes.mediumInput\n                },\n                children: options && options.map(option => {\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: option,\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.menuOption,\n                      children: [/*#__PURE__*/_jsxDEV(Typography, {\n                        children: [\"Token #\", option.id]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 179,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        children: [/*#__PURE__*/_jsxDEV(Typography, {\n                          align: \"right\",\n                          className: classes.smallerText,\n                          children: formatCurrency(option.lockValue)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 181,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                          color: \"textSecondary\",\n                          className: classes.smallerText,\n                          children: veToken === null || veToken === void 0 ? void 0 : veToken.symbol\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 182,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 180,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 25\n                    }, this)\n                  }, option.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 23\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.searchBar,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 7,\n          md: 7,\n          sm: 12,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.searchContainer,\n            variant: \"outlined\",\n            fullWidth: true,\n            placeholder: \"0x...\",\n            value: search,\n            onChange: onSearchChanged,\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 15\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          lg: 5,\n          md: 5,\n          sm: 12,\n          xs: 12,\n          children: renderMediumInput(nft, nfts)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.results,\n      children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 22\n      }, this), token && token.address && renderToken()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/pierremarieriviere/Code/solidly-master/components/ssWhitelist/ssWhitelist.js"],"names":["React","useState","useEffect","useCallback","Paper","TextField","InputAdornment","CircularProgress","Typography","Tooltip","Button","Select","MenuItem","Grid","BigNumber","classes","SearchIcon","stores","ACTIONS","ETHERSCAN_URL","formatAddress","formatCurrency","ssWhitelist","web3","setWeb3","loading","setLoading","whitelistLoading","setWhitelistLoading","search","setSearch","token","setToken","nfts","setNFTS","nft","setNFT","veToken","setVeToken","onSearchChanged","event","target","value","utils","isAddress","dispatcher","dispatch","type","SEARCH_WHITELIST","content","searchReturned","res","whitelistReturned","ssUpdated","stableSwapStore","getStore","length","accountChanged","w3","accountStore","getWeb3Provider","errorReturned","emitter","on","ERROR","UPDATED","ACCOUNT_CHANGED","ACCOUNT_CONFIGURED","SEARCH_WHITELIST_RETURNED","WHITELIST_TOKEN_RETURNED","removeListener","onAddressClick","address","window","open","onWhitelist","WHITELIST_TOKEN","handleChange","renderToken","tokenContainer","inline","logoURI","tokenLogo","tokenName","name","tokenAddress","whitelistStatus","whitelistContainer","listingFee","isWhitelisted","isWhitelist","notWhitelist","symbol","lockValue","gt","buttonOverride","actionButtonText","loadingCircle","lt","renderMediumInput","options","textField","mediumInputContainer","smallText","mediumInputAmount","className","mediumInput","map","option","menuOption","id","smallerText","container","searchBar","searchContainer","startAdornment","results"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { Paper, TextField, InputAdornment, CircularProgress, Typography, Tooltip, Button, Select, MenuItem, Grid } from '@material-ui/core'\nimport BigNumber from 'bignumber.js'\n\nimport classes from './ssWhitelist.module.css'\nimport SearchIcon from '@material-ui/icons/Search'\n\nimport stores from '../../stores'\nimport { ACTIONS, ETHERSCAN_URL } from '../../stores/constants'\nimport { formatAddress, formatCurrency } from '../../utils'\n\nexport default function ssWhitelist() {\n\n  const [ web3, setWeb3 ] = useState(null)\n  const [ loading, setLoading ] = useState(false)\n  const [ whitelistLoading, setWhitelistLoading ] = useState(false)\n  const [ search, setSearch ] = useState('')\n  const [ token, setToken ] = useState(null)\n  const [ nfts, setNFTS ] = useState([])\n  const [ nft, setNFT ] = useState(null)\n  const [ veToken, setVeToken ] = useState(null)\n\n  const onSearchChanged = (event) => {\n    setSearch(event.target.value)\n    if(web3 && web3.utils.isAddress(event.target.value)) {\n      setLoading(true)\n      stores.dispatcher.dispatch({ type: ACTIONS.SEARCH_WHITELIST, content: { search: event.target.value } })\n    }\n  }\n\n  useEffect(() => {\n    const searchReturned = async (res) => {\n      setToken(res)\n      setLoading(false)\n    }\n\n    const whitelistReturned = async (res) => {\n      setWhitelistLoading(false)\n    }\n\n    const ssUpdated = () => {\n      setVeToken(stores.stableSwapStore.getStore('veToken'))\n      const nfts = stores.stableSwapStore.getStore('vestNFTs')\n      setNFTS(nfts)\n\n      if(nfts && nfts.length > 0) {\n        setNFT(nfts[0])\n      }\n    }\n\n    const accountChanged = async () => {\n      const w3 = await stores.accountStore.getWeb3Provider()\n      setWeb3(w3)\n    }\n\n    const errorReturned = () => {\n      setWhitelistLoading(false)\n    }\n\n    stores.emitter.on(ACTIONS.ERROR, errorReturned)\n    stores.emitter.on(ACTIONS.UPDATED, ssUpdated)\n    stores.emitter.on(ACTIONS.ACCOUNT_CHANGED, accountChanged)\n    stores.emitter.on(ACTIONS.ACCOUNT_CONFIGURED, accountChanged)\n    stores.emitter.on(ACTIONS.SEARCH_WHITELIST_RETURNED, searchReturned)\n    stores.emitter.on(ACTIONS.WHITELIST_TOKEN_RETURNED, whitelistReturned)\n\n    accountChanged()\n\n    return () => {\n      stores.emitter.removeListener(ACTIONS.ERROR, errorReturned)\n      stores.emitter.removeListener(ACTIONS.UPDATED, ssUpdated)\n      stores.emitter.removeListener(ACTIONS.ACCOUNT_CHANGED, accountChanged)\n      stores.emitter.removeListener(ACTIONS.ACCOUNT_CONFIGURED, accountChanged)\n      stores.emitter.removeListener(ACTIONS.SEARCH_WHITELIST_RETURNED, searchReturned)\n      stores.emitter.removeListener(ACTIONS.WHITELIST_TOKEN_RETURNED, whitelistReturned)\n    }\n  }, [])\n\n  const onAddressClick = (address) => {\n    window.open(`${ETHERSCAN_URL}token/${address}`, '_blank')\n  }\n\n  const onWhitelist = () => {\n    setWhitelistLoading(true)\n    stores.dispatcher.dispatch({ type: ACTIONS.WHITELIST_TOKEN, content: { token, nft } })\n  }\n\n  const handleChange = (event) => {\n    setNFT(event.target.value)\n  }\n\n  const renderToken = () => {\n    return (\n      <Paper className={ classes.tokenContainer }>\n        <div className={ classes.inline }>\n          <img src={token.logoURI} alt='' width='70' height='70' className={ classes.tokenLogo } />\n          <div>\n            <Typography className={ classes.tokenName } variant='h2'>{token.name}</Typography>\n            <Tooltip title='View in explorer'>\n              <Typography className={ classes.tokenAddress } color='textSecondary' onClick={ () => { onAddressClick(token.address) } }>{formatAddress(token.address)}</Typography>\n            </Tooltip>\n          </div>\n        </div>\n        <div className={ classes.whitelistStatus }>\n          <div className={ classes.whitelistContainer }>\n            <div>\n              <Typography className={ classes.listingFee} color='textSecondary'>Whitelist Status</Typography>\n              { token.isWhitelisted &&\n                <Typography className={ classes.isWhitelist}>{ 'Whitelisted' }</Typography>\n              }\n              { !token.isWhitelisted &&\n                <Typography className={ classes.notWhitelist}>{ 'Not Whitelisted' }</Typography>\n              }\n            </div>\n            {\n              !token.isWhitelisted &&\n              <Tooltip title='Listing fee either needs to be locked in your veToken NFT or be paid and burnt on list'>\n                <div>\n                  <Typography className={ classes.listingFee} color='textSecondary'>Listing Fee</Typography>\n                  <Typography className={ classes.listingFee}>{formatCurrency(token.listingFee)} {veToken?.symbol}</Typography>\n                </div>\n              </Tooltip>\n            }\n          </div>\n          <div>\n            { !token.isWhitelisted && nft && BigNumber(nft.lockValue).gt(token.listingFee) &&\n              <Button\n                variant='contained'\n                size='large'\n                color='primary'\n                onClick={ onWhitelist }\n                className={ classes.buttonOverride }\n                disabled={ whitelistLoading }\n              >\n                <Typography className={ classes.actionButtonText }>{ whitelistLoading ? `Whitelisting` : `Whitelist` }</Typography>\n                { whitelistLoading && <CircularProgress size={10} className={ classes.loadingCircle } /> }\n              </Button>\n            }\n            { !token.isWhitelisted && (!nft || BigNumber(nft.lockValue).lt(token.listingFee)) &&\n              <Button\n                variant='contained'\n                size='large'\n                color='primary'\n                className={ classes.buttonOverride }\n                disabled={ true }\n              >\n                <Typography className={ classes.actionButtonText }>{`Vest value < Fee`}</Typography>\n              </Button>\n            }\n          </div>\n        </div>\n      </Paper>\n    )\n  }\n\n  const renderMediumInput = (value, options) => {\n    return (\n      <div className={ classes.textField}>\n        <div className={ classes.mediumInputContainer}>\n          <Grid container>\n            <Grid item lg='auto' md='auto' sm={12} xs={12}>\n              <Typography variant=\"body2\" className={ classes.smallText }>Please select your veNFT:</Typography>\n            </Grid>\n\n            <Grid item lg={6} md={6} sm={12} xs={12}>\n              <div className={ classes.mediumInputAmount }>\n                <Select\n                  fullWidth\n                  value={ value }\n                  onChange={handleChange}\n                  InputProps={{\n                    className: classes.mediumInput,\n                  }}\n                >\n                  { options && options.map((option) => {\n                    return (\n                      <MenuItem key={option.id} value={option}>\n                        <div className={ classes.menuOption }>\n                          <Typography>Token #{option.id}</Typography>\n                          <div>\n                            <Typography align='right' className={ classes.smallerText }>{ formatCurrency(option.lockValue) }</Typography>\n                            <Typography color='textSecondary' className={ classes.smallerText }>{veToken?.symbol}</Typography>\n                          </div>\n                        </div>\n                      </MenuItem>\n                    )\n                  })}\n                </Select>\n              </div>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className={ classes.container}>\n      <div className={ classes.searchBar }>\n      <Grid container spacing={2}>\n        <Grid item lg={7} md={7} sm={12} xs={12}>\n        <TextField\n          className={classes.searchContainer}\n          variant=\"outlined\"\n          fullWidth\n          placeholder=\"0x...\"\n          value={search}\n          onChange={onSearchChanged}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n        />\n        </Grid>\n        <Grid item lg={5} md={5} sm={12} xs={12}>\n          { renderMediumInput(nft, nfts) }\n        </Grid>\n      </Grid>\n\n      </div>\n      <div className={ classes.results }>\n        { loading && <CircularProgress />}\n        { token && token.address && renderToken()}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}