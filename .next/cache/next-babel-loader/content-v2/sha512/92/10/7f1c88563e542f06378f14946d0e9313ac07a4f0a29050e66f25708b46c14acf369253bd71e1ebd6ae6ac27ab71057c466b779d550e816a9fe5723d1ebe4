{"ast":null,"code":"import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\nimport { NetworkConnector } from \"@web3-react/network-connector\";\nconst POLLING_INTERVAL = 12000;\nconst RPC_URLS = {\n  250: \"https://rpc.ftm.tools\",\n  4002: \"https://rpc.testnet.fantom.network\"\n};\nlet obj = {};\n\nif (process.env.NEXT_PUBLIC_CHAINID == 250) {\n  obj = {\n    250: RPC_URLS[250]\n  };\n} else {\n  obj = {\n    4002: RPC_URLS[4002]\n  };\n}\n\nexport const network = new NetworkConnector({\n  urls: obj\n});\nexport const injected = new InjectedConnector({\n  supportedChainIds: [parseInt(process.env.NEXT_PUBLIC_CHAINID)]\n});\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    250: RPC_URLS[250],\n    4002: RPC_URLS[4002]\n  },\n  chainId: parseInt(process.env.NEXT_PUBLIC_CHAINID),\n  bridge: \"https://bridge.walletconnect.org\",\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n});\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[process.env.NEXT_PUBLIC_CHAINID],\n  appName: \"Solidly\",\n  chainId: parseInt(process.env.NEXT_PUBLIC_CHAINID)\n});","map":{"version":3,"sources":["/Users/pierremarieriviere/Code/solidly-master/stores/connectors/connectors.js"],"names":["InjectedConnector","WalletConnectConnector","WalletLinkConnector","NetworkConnector","POLLING_INTERVAL","RPC_URLS","obj","process","env","NEXT_PUBLIC_CHAINID","network","urls","injected","supportedChainIds","parseInt","walletconnect","rpc","chainId","bridge","qrcode","pollingInterval","walletlink","url","appName"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AAEA,MAAMC,gBAAgB,GAAG,KAAzB;AACA,MAAMC,QAAQ,GAAG;AACf,OAAK,uBADU;AAEf,QAAM;AAFS,CAAjB;AAKA,IAAIC,GAAG,GAAG,EAAV;;AACA,IAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,IAAmC,GAAtC,EAA2C;AACzCH,EAAAA,GAAG,GAAG;AAAE,SAAKD,QAAQ,CAAC,GAAD;AAAf,GAAN;AACD,CAFD,MAEO;AACLC,EAAAA,GAAG,GAAG;AAAE,UAAMD,QAAQ,CAAC,IAAD;AAAhB,GAAN;AACD;;AAED,OAAO,MAAMK,OAAO,GAAG,IAAIP,gBAAJ,CAAqB;AAAEQ,EAAAA,IAAI,EAAEL;AAAR,CAArB,CAAhB;AAEP,OAAO,MAAMM,QAAQ,GAAG,IAAIZ,iBAAJ,CAAsB;AAC5Ca,EAAAA,iBAAiB,EAAE,CAACC,QAAQ,CAACP,OAAO,CAACC,GAAR,CAAYC,mBAAb,CAAT;AADyB,CAAtB,CAAjB;AAIP,OAAO,MAAMM,aAAa,GAAG,IAAId,sBAAJ,CAA2B;AACtDe,EAAAA,GAAG,EAAE;AACH,SAAKX,QAAQ,CAAC,GAAD,CADV;AAEH,UAAMA,QAAQ,CAAC,IAAD;AAFX,GADiD;AAKtDY,EAAAA,OAAO,EAAEH,QAAQ,CAACP,OAAO,CAACC,GAAR,CAAYC,mBAAb,CALqC;AAMtDS,EAAAA,MAAM,EAAE,kCAN8C;AAOtDC,EAAAA,MAAM,EAAE,IAP8C;AAQtDC,EAAAA,eAAe,EAAEhB;AARqC,CAA3B,CAAtB;AAWP,OAAO,MAAMiB,UAAU,GAAG,IAAInB,mBAAJ,CAAwB;AAChDoB,EAAAA,GAAG,EAAEjB,QAAQ,CAACE,OAAO,CAACC,GAAR,CAAYC,mBAAb,CADmC;AAEhDc,EAAAA,OAAO,EAAE,SAFuC;AAGhDN,EAAAA,OAAO,EAAEH,QAAQ,CAACP,OAAO,CAACC,GAAR,CAAYC,mBAAb;AAH+B,CAAxB,CAAnB","sourcesContent":["import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\nimport { NetworkConnector } from \"@web3-react/network-connector\";\n\nconst POLLING_INTERVAL = 12000;\nconst RPC_URLS = {\n  250: \"https://rpc.ftm.tools\",\n  4002: \"https://rpc.testnet.fantom.network\"\n};\n\nlet obj = {}\nif(process.env.NEXT_PUBLIC_CHAINID == 250) {\n  obj = { 250: RPC_URLS[250] }\n} else {\n  obj = { 4002: RPC_URLS[4002] }\n}\n\nexport const network = new NetworkConnector({ urls: obj });\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [parseInt(process.env.NEXT_PUBLIC_CHAINID)]\n});\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    250: RPC_URLS[250],\n    4002: RPC_URLS[4002]\n  },\n  chainId: parseInt(process.env.NEXT_PUBLIC_CHAINID),\n  bridge: \"https://bridge.walletconnect.org\",\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n});\n\nexport const walletlink = new WalletLinkConnector({\n  url: RPC_URLS[process.env.NEXT_PUBLIC_CHAINID],\n  appName: \"Solidly\",\n  chainId: parseInt(process.env.NEXT_PUBLIC_CHAINID),\n});\n"]},"metadata":{},"sourceType":"module"}