{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport async from 'async';\nimport { ACTIONS, CONTRACTS } from './constants';\nimport Multicall from '@dopex-io/web3-multicall';\nimport { injected, walletconnect, walletlink, network } from './connectors';\nimport Web3 from 'web3';\n\nclass Store {\n  constructor(dispatcher, emitter) {\n    _defineProperty(this, \"configure\", async () => {\n      // this.getGasPrices();\n      injected.isAuthorized().then(isAuthorized => {\n        const {\n          supportedChainIds\n        } = injected; // fall back to ethereum mainnet if chainId undefined\n\n        const {\n          chainId = process.env.NEXT_PUBLIC_CHAINID\n        } = window.ethereum || {};\n        const parsedChainId = parseInt(chainId, 16);\n        const isChainSupported = supportedChainIds.includes(parsedChainId);\n\n        if (!isChainSupported) {\n          this.setStore({\n            chainInvalid: true\n          });\n          this.emitter.emit(ACTIONS.ACCOUNT_CHANGED);\n        }\n\n        if (isAuthorized && isChainSupported) {\n          injected.activate().then(a => {\n            this.setStore({\n              account: {\n                address: a.account\n              },\n              web3context: {\n                library: {\n                  provider: a.provider\n                }\n              }\n            });\n            this.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n          }).then(() => {\n            this.dispatcher.dispatch({\n              type: ACTIONS.CONFIGURE_SS,\n              content: {\n                connected: true\n              }\n            });\n          }).catch(e => {\n            this.emitter.emit(ACTIONS.ERROR, e);\n            this.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n            this.dispatcher.dispatch({\n              type: ACTIONS.CONFIGURE_SS,\n              content: {\n                connected: false\n              }\n            });\n          });\n        } else {\n          //we can ignore if not authorized.\n          this.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n          this.emitter.emit(ACTIONS.CONFIGURED);\n        }\n      });\n\n      if (window.ethereum) {\n        this.updateAccount();\n      } else {\n        window.removeEventListener('ethereum#initialized', this.updateAccount);\n        window.addEventListener('ethereum#initialized', this.updateAccount, {\n          once: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateAccount\", () => {\n      const that = this;\n      const res = window.ethereum.on('accountsChanged', function (accounts) {\n        that.setStore({\n          account: {\n            address: accounts[0]\n          },\n          web3context: {\n            library: {\n              provider: window.ethereum\n            }\n          }\n        });\n        that.emitter.emit(ACTIONS.ACCOUNT_CHANGED);\n        that.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n        that.dispatcher.dispatch({\n          type: ACTIONS.CONFIGURE_SS,\n          content: {\n            connected: true\n          }\n        });\n      });\n      window.ethereum.on('chainChanged', function (chainId) {\n        const supportedChainIds = [process.env.NEXT_PUBLIC_CHAINID];\n        const parsedChainId = parseInt(chainId + '', 16) + '';\n        const isChainSupported = supportedChainIds.includes(parsedChainId);\n        that.setStore({\n          chainInvalid: !isChainSupported\n        });\n        that.emitter.emit(ACTIONS.ACCOUNT_CHANGED);\n        that.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n        that.configure();\n      });\n    });\n\n    _defineProperty(this, \"getGasPrices\", async payload => {\n      const gasPrices = await this._getGasPrices();\n      let gasSpeed = localStorage.getItem('yearn.finance-gas-speed');\n\n      if (!gasSpeed) {\n        gasSpeed = 'fast';\n        localStorage.getItem('yearn.finance-gas-speed', 'fast');\n      }\n\n      this.setStore({\n        gasPrices: gasPrices,\n        gasSpeed: gasSpeed\n      });\n      this.emitter.emit(ACTIONS.GAS_PRICES_RETURNED);\n    });\n\n    _defineProperty(this, \"_getGasPrices\", async () => {\n      try {\n        const web3 = await this.getWeb3Provider();\n        const gasPrice = await web3.eth.getGasPrice();\n        const gasPriceInGwei = web3.utils.fromWei(gasPrice, \"gwei\");\n        return {\n          standard: gasPriceInGwei,\n          fast: gasPriceInGwei,\n          instant: gasPriceInGwei\n        };\n      } catch (e) {\n        console.log(e);\n        return {};\n      }\n    });\n\n    _defineProperty(this, \"getGasPrice\", async speed => {\n      let gasSpeed = speed;\n\n      if (!speed) {\n        gasSpeed = this.getStore('gasSpeed');\n      }\n\n      try {\n        const web3 = await this.getWeb3Provider();\n        const gasPrice = await web3.eth.getGasPrice();\n        const gasPriceInGwei = web3.utils.fromWei(gasPrice, \"gwei\");\n        return gasPriceInGwei;\n      } catch (e) {\n        console.log(e);\n        return {};\n      }\n    });\n\n    _defineProperty(this, \"getWeb3Provider\", async () => {\n      let web3context = this.getStore('web3context');\n      let provider = null;\n\n      if (!web3context) {\n        provider = network.providers['1'];\n      } else {\n        provider = web3context.library.provider;\n      }\n\n      if (!provider) {\n        return null;\n      }\n\n      return new Web3(provider);\n    });\n\n    _defineProperty(this, \"getMulticall\", async () => {\n      const web3 = await this.getWeb3Provider();\n      const multicall = new Multicall({\n        multicallAddress: CONTRACTS.MULTICALL_ADDRESS,\n        provider: web3\n      });\n      return multicall;\n    });\n\n    this.dispatcher = dispatcher;\n    this.emitter = emitter;\n    this.store = {\n      account: null,\n      chainInvalid: false,\n      web3context: null,\n      tokens: [],\n      connectorsByName: {\n        MetaMask: injected,\n        TrustWallet: injected,\n        WalletConnect: walletconnect,\n        WalletLink: walletlink\n      },\n      gasPrices: {\n        standard: 90,\n        fast: 100,\n        instant: 130\n      },\n      gasSpeed: 'fast',\n      currentBlock: 12906197\n    };\n    dispatcher.register(function (payload) {\n      switch (payload.type) {\n        case ACTIONS.CONFIGURE:\n          this.configure(payload);\n          break;\n\n        default:\n          {}\n      }\n    }.bind(this));\n  }\n\n  getStore(index) {\n    return this.store[index];\n  }\n\n  setStore(obj) {\n    this.store = _objectSpread(_objectSpread({}, this.store), obj);\n    console.log(this.store);\n    return this.emitter.emit(ACTIONS.STORE_UPDATED);\n  }\n\n}\n\nexport default Store;","map":{"version":3,"sources":["/Users/pierremarieriviere/Code/solidly-master/stores/accountStore.js"],"names":["async","ACTIONS","CONTRACTS","Multicall","injected","walletconnect","walletlink","network","Web3","Store","constructor","dispatcher","emitter","isAuthorized","then","supportedChainIds","chainId","process","env","NEXT_PUBLIC_CHAINID","window","ethereum","parsedChainId","parseInt","isChainSupported","includes","setStore","chainInvalid","emit","ACCOUNT_CHANGED","activate","a","account","address","web3context","library","provider","ACCOUNT_CONFIGURED","dispatch","type","CONFIGURE_SS","content","connected","catch","e","ERROR","CONFIGURED","updateAccount","removeEventListener","addEventListener","once","that","res","on","accounts","configure","payload","gasPrices","_getGasPrices","gasSpeed","localStorage","getItem","GAS_PRICES_RETURNED","web3","getWeb3Provider","gasPrice","eth","getGasPrice","gasPriceInGwei","utils","fromWei","standard","fast","instant","console","log","speed","getStore","providers","multicall","multicallAddress","MULTICALL_ADDRESS","store","tokens","connectorsByName","MetaMask","TrustWallet","WalletConnect","WalletLink","currentBlock","register","CONFIGURE","bind","index","obj","STORE_UPDATED"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,OADF,EAEEC,SAFF,QAGO,aAHP;AAIA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA,SACEC,QADF,EAEEC,aAFF,EAGEC,UAHF,EAIEC,OAJF,QAKO,cALP;AAOA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,KAAN,CAAY;AACVC,EAAAA,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;AAAA,uCA+CrB,YAAY;AACtB;AACAR,MAAAA,QAAQ,CAACS,YAAT,GAAwBC,IAAxB,CAA8BD,YAAD,IAAkB;AAC7C,cAAM;AAAEE,UAAAA;AAAF,YAAwBX,QAA9B,CAD6C,CAE7C;;AACA,cAAM;AAAEY,UAAAA,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC;AAAxB,YAAgDC,MAAM,CAACC,QAAP,IAAmB,EAAzE;AACA,cAAMC,aAAa,GAAGC,QAAQ,CAACP,OAAD,EAAU,EAAV,CAA9B;AACA,cAAMQ,gBAAgB,GAAGT,iBAAiB,CAACU,QAAlB,CAA2BH,aAA3B,CAAzB;;AACA,YAAI,CAACE,gBAAL,EAAuB;AACrB,eAAKE,QAAL,CAAc;AAAEC,YAAAA,YAAY,EAAE;AAAhB,WAAd;AACA,eAAKf,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAAC4B,eAA1B;AACD;;AAED,YAAIhB,YAAY,IAAIW,gBAApB,EAAsC;AACpCpB,UAAAA,QAAQ,CACL0B,QADH,GAEGhB,IAFH,CAESiB,CAAD,IAAO;AACX,iBAAKL,QAAL,CAAc;AACZM,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,OAAO,EAAEF,CAAC,CAACC;AAAb,eADG;AAEZE,cAAAA,WAAW,EAAE;AAAEC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,QAAQ,EAAEL,CAAC,CAACK;AAAd;AAAX;AAFD,aAAd;AAIA,iBAAKxB,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAACoC,kBAA1B;AACD,WARH,EASGvB,IATH,CASQ,MAAM;AACV,iBAAKH,UAAL,CAAgB2B,QAAhB,CAAyB;AACvBC,cAAAA,IAAI,EAAEtC,OAAO,CAACuC,YADS;AAEvBC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,SAAS,EAAE;AAAb;AAFc,aAAzB;AAID,WAdH,EAeGC,KAfH,CAeUC,CAAD,IAAO;AACZ,iBAAKhC,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAAC4C,KAA1B,EAAiCD,CAAjC;AACA,iBAAKhC,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAACoC,kBAA1B;AAEA,iBAAK1B,UAAL,CAAgB2B,QAAhB,CAAyB;AACvBC,cAAAA,IAAI,EAAEtC,OAAO,CAACuC,YADS;AAEvBC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,SAAS,EAAE;AAAb;AAFc,aAAzB;AAID,WAvBH;AAwBD,SAzBD,MAyBO;AACL;AACA,eAAK9B,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAACoC,kBAA1B;AACA,eAAKzB,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAAC6C,UAA1B;AACD;AACF,OAzCD;;AA2CA,UAAI1B,MAAM,CAACC,QAAX,EAAqB;AACnB,aAAK0B,aAAL;AACD,OAFD,MAEO;AACL3B,QAAAA,MAAM,CAAC4B,mBAAP,CAA2B,sBAA3B,EAAmD,KAAKD,aAAxD;AACA3B,QAAAA,MAAM,CAAC6B,gBAAP,CAAwB,sBAAxB,EAAgD,KAAKF,aAArD,EAAoE;AAClEG,UAAAA,IAAI,EAAE;AAD4D,SAApE;AAGD;AACF,KApGgC;;AAAA,2CAsGjB,MAAM;AACpB,YAAMC,IAAI,GAAG,IAAb;AACA,YAAMC,GAAG,GAAGhC,MAAM,CAACC,QAAP,CAAgBgC,EAAhB,CAAmB,iBAAnB,EAAsC,UAAUC,QAAV,EAAoB;AACpEH,QAAAA,IAAI,CAACzB,QAAL,CAAc;AACZM,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAEqB,QAAQ,CAAC,CAAD;AAAnB,WADG;AAEZpB,UAAAA,WAAW,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,QAAQ,EAAEhB,MAAM,CAACC;AAAnB;AAAX;AAFD,SAAd;AAIA8B,QAAAA,IAAI,CAACvC,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAAC4B,eAA1B;AACAsB,QAAAA,IAAI,CAACvC,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAACoC,kBAA1B;AAEAc,QAAAA,IAAI,CAACxC,UAAL,CAAgB2B,QAAhB,CAAyB;AACvBC,UAAAA,IAAI,EAAEtC,OAAO,CAACuC,YADS;AAEvBC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb;AAFc,SAAzB;AAID,OAZW,CAAZ;AAcAtB,MAAAA,MAAM,CAACC,QAAP,CAAgBgC,EAAhB,CAAmB,cAAnB,EAAmC,UAAUrC,OAAV,EAAmB;AACpD,cAAMD,iBAAiB,GAAG,CAACE,OAAO,CAACC,GAAR,CAAYC,mBAAb,CAA1B;AACA,cAAMG,aAAa,GAAIC,QAAQ,CAACP,OAAO,GAAC,EAAT,EAAa,EAAb,CAAR,GAAyB,EAAhD;AACA,cAAMQ,gBAAgB,GAAGT,iBAAiB,CAACU,QAAlB,CAA2BH,aAA3B,CAAzB;AACA6B,QAAAA,IAAI,CAACzB,QAAL,CAAc;AAAEC,UAAAA,YAAY,EAAE,CAACH;AAAjB,SAAd;AACA2B,QAAAA,IAAI,CAACvC,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAAC4B,eAA1B;AACAsB,QAAAA,IAAI,CAACvC,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAACoC,kBAA1B;AAEAc,QAAAA,IAAI,CAACI,SAAL;AACD,OATD;AAUD,KAhIgC;;AAAA,0CAkIlB,MAAOC,OAAP,IAAmB;AAChC,YAAMC,SAAS,GAAG,MAAM,KAAKC,aAAL,EAAxB;AACA,UAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,yBAArB,CAAf;;AAEA,UAAI,CAACF,QAAL,EAAe;AACbA,QAAAA,QAAQ,GAAG,MAAX;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,yBAArB,EAAgD,MAAhD;AACD;;AAED,WAAKnC,QAAL,CAAc;AAAE+B,QAAAA,SAAS,EAAEA,SAAb;AAAwBE,QAAAA,QAAQ,EAAEA;AAAlC,OAAd;AACA,WAAK/C,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAAC6D,mBAA1B;AACD,KA7IgC;;AAAA,2CA+IjB,YAAY;AAC1B,UAAI;AACF,cAAMC,IAAI,GAAG,MAAM,KAAKC,eAAL,EAAnB;AACA,cAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAvB;AACA,cAAMC,cAAc,GAAGL,IAAI,CAACM,KAAL,CAAWC,OAAX,CAAmBL,QAAnB,EAA6B,MAA7B,CAAvB;AACA,eAAO;AACLM,UAAAA,QAAQ,EAAEH,cADL;AAELI,UAAAA,IAAI,EAAEJ,cAFD;AAGLK,UAAAA,OAAO,EAAEL;AAHJ,SAAP;AAKD,OATD,CASE,OAAOxB,CAAP,EAAU;AACV8B,QAAAA,OAAO,CAACC,GAAR,CAAY/B,CAAZ;AACA,eAAO,EAAP;AAGD;AACF,KA/JgC;;AAAA,yCAiKnB,MAAOgC,KAAP,IAAiB;AAC7B,UAAIjB,QAAQ,GAAGiB,KAAf;;AACA,UAAI,CAACA,KAAL,EAAY;AACVjB,QAAAA,QAAQ,GAAG,KAAKkB,QAAL,CAAc,UAAd,CAAX;AACD;;AAED,UAAI;AACF,cAAMd,IAAI,GAAG,MAAM,KAAKC,eAAL,EAAnB;AACA,cAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASC,WAAT,EAAvB;AACA,cAAMC,cAAc,GAAGL,IAAI,CAACM,KAAL,CAAWC,OAAX,CAAmBL,QAAnB,EAA6B,MAA7B,CAAvB;AACA,eAAOG,cAAP;AACD,OALD,CAKE,OAAOxB,CAAP,EAAU;AACV8B,QAAAA,OAAO,CAACC,GAAR,CAAY/B,CAAZ;AACA,eAAO,EAAP;AACD;AACF,KAhLgC;;AAAA,6CAkLf,YAAY;AAC5B,UAAIV,WAAW,GAAG,KAAK2C,QAAL,CAAc,aAAd,CAAlB;AACA,UAAIzC,QAAQ,GAAG,IAAf;;AAEA,UAAI,CAACF,WAAL,EAAkB;AAChBE,QAAAA,QAAQ,GAAG7B,OAAO,CAACuE,SAAR,CAAkB,GAAlB,CAAX;AACD,OAFD,MAEO;AACL1C,QAAAA,QAAQ,GAAGF,WAAW,CAACC,OAAZ,CAAoBC,QAA/B;AACD;;AAED,UAAI,CAACA,QAAL,EAAe;AACb,eAAO,IAAP;AACD;;AACD,aAAO,IAAI5B,IAAJ,CAAS4B,QAAT,CAAP;AACD,KAhMgC;;AAAA,0CAkMlB,YAAY;AACzB,YAAM2B,IAAI,GAAG,MAAM,KAAKC,eAAL,EAAnB;AACA,YAAMe,SAAS,GAAG,IAAI5E,SAAJ,CAAc;AAC9B6E,QAAAA,gBAAgB,EAAE9E,SAAS,CAAC+E,iBADE;AAE9B7C,QAAAA,QAAQ,EAAE2B;AAFoB,OAAd,CAAlB;AAIA,aAAOgB,SAAP;AACD,KAzMgC;;AAC/B,SAAKpE,UAAL,GAAkBA,UAAlB;AACA,SAAKC,OAAL,GAAeA,OAAf;AAEA,SAAKsE,KAAL,GAAa;AACXlD,MAAAA,OAAO,EAAE,IADE;AAEXL,MAAAA,YAAY,EAAE,KAFH;AAGXO,MAAAA,WAAW,EAAE,IAHF;AAIXiD,MAAAA,MAAM,EAAE,EAJG;AAKXC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,QAAQ,EAAEjF,QADM;AAEhBkF,QAAAA,WAAW,EAAElF,QAFG;AAGhBmF,QAAAA,aAAa,EAAElF,aAHC;AAIhBmF,QAAAA,UAAU,EAAElF;AAJI,OALP;AAWXmD,MAAAA,SAAS,EAAE;AACTc,QAAAA,QAAQ,EAAE,EADD;AAETC,QAAAA,IAAI,EAAE,GAFG;AAGTC,QAAAA,OAAO,EAAE;AAHA,OAXA;AAgBXd,MAAAA,QAAQ,EAAE,MAhBC;AAiBX8B,MAAAA,YAAY,EAAE;AAjBH,KAAb;AAoBA9E,IAAAA,UAAU,CAAC+E,QAAX,CACE,UAAUlC,OAAV,EAAmB;AACjB,cAAQA,OAAO,CAACjB,IAAhB;AACE,aAAKtC,OAAO,CAAC0F,SAAb;AACE,eAAKpC,SAAL,CAAeC,OAAf;AACA;;AACF;AAAS,WACR;AALH;AAOD,KARD,CAQEoC,IARF,CAQO,IARP,CADF;AAWD;;AAEDf,EAAAA,QAAQ,CAACgB,KAAD,EAAQ;AACd,WAAO,KAAKX,KAAL,CAAWW,KAAX,CAAP;AACD;;AAEDnE,EAAAA,QAAQ,CAACoE,GAAD,EAAM;AACZ,SAAKZ,KAAL,mCAAkB,KAAKA,KAAvB,GAAiCY,GAAjC;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKO,KAAjB;AACA,WAAO,KAAKtE,OAAL,CAAagB,IAAb,CAAkB3B,OAAO,CAAC8F,aAA1B,CAAP;AACD;;AA9CS;;AA6MZ,eAAetF,KAAf","sourcesContent":["import async from 'async';\nimport {\n  ACTIONS,\n  CONTRACTS\n} from './constants';\nimport Multicall from '@dopex-io/web3-multicall';\n\nimport {\n  injected,\n  walletconnect,\n  walletlink,\n  network\n} from './connectors';\n\nimport Web3 from 'web3';\n\nclass Store {\n  constructor(dispatcher, emitter) {\n    this.dispatcher = dispatcher;\n    this.emitter = emitter;\n\n    this.store = {\n      account: null,\n      chainInvalid: false,\n      web3context: null,\n      tokens: [],\n      connectorsByName: {\n        MetaMask: injected,\n        TrustWallet: injected,\n        WalletConnect: walletconnect,\n        WalletLink: walletlink,\n      },\n      gasPrices: {\n        standard: 90,\n        fast: 100,\n        instant: 130,\n      },\n      gasSpeed: 'fast',\n      currentBlock: 12906197,\n    };\n\n    dispatcher.register(\n      function (payload) {\n        switch (payload.type) {\n          case ACTIONS.CONFIGURE:\n            this.configure(payload);\n            break;\n          default: {\n          }\n        }\n      }.bind(this),\n    );\n  }\n\n  getStore(index) {\n    return this.store[index];\n  }\n\n  setStore(obj) {\n    this.store = { ...this.store, ...obj };\n    console.log(this.store);\n    return this.emitter.emit(ACTIONS.STORE_UPDATED);\n  }\n\n  configure = async () => {\n    // this.getGasPrices();\n    injected.isAuthorized().then((isAuthorized) => {\n      const { supportedChainIds } = injected;\n      // fall back to ethereum mainnet if chainId undefined\n      const { chainId = process.env.NEXT_PUBLIC_CHAINID } = window.ethereum || {};\n      const parsedChainId = parseInt(chainId, 16);\n      const isChainSupported = supportedChainIds.includes(parsedChainId);\n      if (!isChainSupported) {\n        this.setStore({ chainInvalid: true });\n        this.emitter.emit(ACTIONS.ACCOUNT_CHANGED);\n      }\n\n      if (isAuthorized && isChainSupported) {\n        injected\n          .activate()\n          .then((a) => {\n            this.setStore({\n              account: { address: a.account },\n              web3context: { library: { provider: a.provider } }\n            });\n            this.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n          })\n          .then(() => {\n            this.dispatcher.dispatch({\n              type: ACTIONS.CONFIGURE_SS,\n              content: { connected: true },\n            });\n          })\n          .catch((e) => {\n            this.emitter.emit(ACTIONS.ERROR, e);\n            this.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n\n            this.dispatcher.dispatch({\n              type: ACTIONS.CONFIGURE_SS,\n              content: { connected: false },\n            });\n          });\n      } else {\n        //we can ignore if not authorized.\n        this.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n        this.emitter.emit(ACTIONS.CONFIGURED);\n      }\n    });\n\n    if (window.ethereum) {\n      this.updateAccount();\n    } else {\n      window.removeEventListener('ethereum#initialized', this.updateAccount);\n      window.addEventListener('ethereum#initialized', this.updateAccount, {\n        once: true,\n      });\n    }\n  };\n\n  updateAccount = () => {\n    const that = this;\n    const res = window.ethereum.on('accountsChanged', function (accounts) {\n      that.setStore({\n        account: { address: accounts[0] },\n        web3context: { library: { provider: window.ethereum } }\n      });\n      that.emitter.emit(ACTIONS.ACCOUNT_CHANGED);\n      that.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n\n      that.dispatcher.dispatch({\n        type: ACTIONS.CONFIGURE_SS,\n        content: { connected: true },\n      });\n    });\n\n    window.ethereum.on('chainChanged', function (chainId) {\n      const supportedChainIds = [process.env.NEXT_PUBLIC_CHAINID];\n      const parsedChainId = (parseInt(chainId+'', 16)+'');\n      const isChainSupported = supportedChainIds.includes(parsedChainId);\n      that.setStore({ chainInvalid: !isChainSupported });\n      that.emitter.emit(ACTIONS.ACCOUNT_CHANGED);\n      that.emitter.emit(ACTIONS.ACCOUNT_CONFIGURED);\n\n      that.configure()\n    });\n  };\n\n  getGasPrices = async (payload) => {\n    const gasPrices = await this._getGasPrices();\n    let gasSpeed = localStorage.getItem('yearn.finance-gas-speed');\n\n    if (!gasSpeed) {\n      gasSpeed = 'fast';\n      localStorage.getItem('yearn.finance-gas-speed', 'fast');\n    }\n\n    this.setStore({ gasPrices: gasPrices, gasSpeed: gasSpeed });\n    this.emitter.emit(ACTIONS.GAS_PRICES_RETURNED);\n  };\n\n  _getGasPrices = async () => {\n    try {\n      const web3 = await this.getWeb3Provider();\n      const gasPrice = await web3.eth.getGasPrice();\n      const gasPriceInGwei = web3.utils.fromWei(gasPrice, \"gwei\");\n      return {\n        standard: gasPriceInGwei,\n        fast: gasPriceInGwei,\n        instant: gasPriceInGwei,\n      };\n    } catch (e) {\n      console.log(e);\n      return {\n\n      }\n    }\n  };\n\n  getGasPrice = async (speed) => {\n    let gasSpeed = speed;\n    if (!speed) {\n      gasSpeed = this.getStore('gasSpeed');\n    }\n\n    try {\n      const web3 = await this.getWeb3Provider();\n      const gasPrice = await web3.eth.getGasPrice();\n      const gasPriceInGwei = web3.utils.fromWei(gasPrice, \"gwei\");\n      return gasPriceInGwei;\n    } catch (e) {\n      console.log(e);\n      return {};\n    }\n  };\n\n  getWeb3Provider = async () => {\n    let web3context = this.getStore('web3context');\n    let provider = null;\n\n    if (!web3context) {\n      provider = network.providers['1'];\n    } else {\n      provider = web3context.library.provider;\n    }\n\n    if (!provider) {\n      return null;\n    }\n    return new Web3(provider);\n  };\n\n  getMulticall = async () => {\n    const web3 = await this.getWeb3Provider()\n    const multicall = new Multicall({\n      multicallAddress: CONTRACTS.MULTICALL_ADDRESS,\n      provider: web3,\n    })\n    return multicall\n  };\n}\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}